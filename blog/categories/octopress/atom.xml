<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：Octopress | 生命之氢]]></title>
  <link href="http://shengmingzhiqing.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://shengmingzhiqing.com/"/>
  <updated>2014-05-26T21:10:16+02:00</updated>
  <id>http://shengmingzhiqing.com/</id>
  <author>
    <name><![CDATA[郝海龙]]></name>
    <email><![CDATA[haohailong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress 教程目录]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-tutorials-toc.html/"/>
    <updated>2014-05-06T15:50:25+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-tutorials-toc</id>
    <content type="html"><![CDATA[<p class="info">经过近十天的撰写，这份被自己当做备忘录的 Octopress 教程终于算是告一段落了，相信遵照这份教程可以生成一个不错的 Octopress 独立博客。当然正如在教程里说的，对于主题的修改是「永远的第二步」，所以我不敢说这份教程已经完成，又或者说永远都不可能完成。姑且把完成的部分的目录放在这里，供大家参考。</p>
<!--more-->
<div class="bordergrey">

<h2><a href="/blog/everybody-should-build-his-own-writing-space.html/" target="_blank">每个人都该为自己打造专属的写作环境</a></h2>
<ul>
  <li><a href="/blog/everybody-should-build-his-own-writing-space.html/#section">我的博客史</a></li>
  <li><a href="/blog/everybody-should-build-his-own-writing-space.html/#section-1">每个人都该为自己打造专属的写作环境</a></li>
  <li><a href="/blog/everybody-should-build-his-own-writing-space.html/#wordpress--octopress">WordPress &amp; Octopress</a></li>
  <li><a href="/blog/everybody-should-build-his-own-writing-space.html/#octopress-">关于 Octopress 搭建</a></li>
</ul>

<h2><a href="/blog/setup-octopress-with-github-pages.html/" target="_blank">Octopress 搭建流程 – Github Pages</a></h2>

<ul>
  <li><a href="/blog/setup-octopress-with-github-pages.html/#octopress--github-pages">1. 为什么是 Octopress &amp; Github Pages?</a></li>
  <li><a href="/blog/setup-octopress-with-github-pages.html/#section">2. 准备工作</a>    <ul>
      <li><a href="/blog/setup-octopress-with-github-pages.html/#git-2">2.1 安装 git </a></li>
      <li><a href="/blog/setup-octopress-with-github-pages.html/#ruby-3">2.2 安装 Ruby </a></li>
      <li><a href="/blog/setup-octopress-with-github-pages.html/#github-">2.3 注册 Github 账号</a></li>
      <li><a href="/blog/setup-octopress-with-github-pages.html/#section-1">2.4 域名指向（可选）</a></li>
    </ul>
  </li>
  <li><a href="/blog/setup-octopress-with-github-pages.html/#octopress">3. 本地安装 Octopress</a></li>
  <li><a href="/blog/setup-octopress-with-github-pages.html/#octopress--github-pages-1">4. 将 Octopress 部署到 Github Pages</a>    <ul>
      <li><a href="/blog/setup-octopress-with-github-pages.html/#repository">4.1 新建库 (Repository)</a></li>
      <li><a href="/blog/setup-octopress-with-github-pages.html/#octopress--github-pages-2">4.2 将本地部署的 Octopress 发布到 Github Pages</a></li>
      <li><a href="/blog/setup-octopress-with-github-pages.html/#section-2">4.3 使用自己的域名（可选）</a></li>
    </ul>
  </li>
  <li><a href="/blog/setup-octopress-with-github-pages.html/#section-3">5. 发布新贴</a></li>
</ul>

<h2><a href="/blog/octopress-lean-modification-1.html/" target="_blank">精益修改 (1) – 基本配置</a></h2>

<ul>
  <li><a href="/blog/octopress-lean-modification-1.html/#section">1. 永远的第二步</a></li>
  <li><a href="/blog/octopress-lean-modification-1.html/#section-1">2. 简要说明</a></li>
  <li><a href="/blog/octopress-lean-modification-1.html/#section-2">3. 新主题安装</a></li>
  <li><a href="/blog/octopress-lean-modification-1.html/#section-3">4. 基本配置</a>    <ul>
      <li><a href="/blog/octopress-lean-modification-1.html/#section-4">4.1 域名，网站标题，作者</a></li>
      <li><a href="/blog/octopress-lean-modification-1.html/#section-5">4.2 日期格式</a></li>
      <li><a href="/blog/octopress-lean-modification-1.html/#section-6">4.3 文章链接形式</a></li>
      <li><a href="/blog/octopress-lean-modification-1.html/#section-7">4.4 分类目录前缀</a></li>
      <li><a href="/blog/octopress-lean-modification-1.html/#section-8">4.5「继续阅读」按钮</a></li>
      <li><a href="/blog/octopress-lean-modification-1.html/#markdown-">4.6 修改 Markdown 文件后缀</a></li>
      <li><a href="/blog/octopress-lean-modification-1.html/#markdown--1">4.7 修改默认 Markdown 解释器</a></li>
    </ul>
  </li>
</ul>

<h2><a href="/blog/octopress-lean-modification-2.html/" target="_blank">精益修改 (2) – 主题修改</a></h2>

<ul>
  <li><a href="/blog/octopress-lean-modification-2.html/#section">1. 页面相关设置</a>    <ul>
      <li><a href="/blog/octopress-lean-modification-2.html/#section-1">1.1 新建页面</a></li>
      <li><a href="/blog/octopress-lean-modification-2.html/#section-2">1.2 添加公益 404 页面</a></li>
      <li><a href="/blog/octopress-lean-modification-2.html/#section-3">1.3 添加页面和其他链接至导航栏</a></li>
    </ul>
  </li>
  <li><a href="/blog/octopress-lean-modification-2.html/#section-4">2. 主题汉化</a>    <ul>
      <li><a href="/blog/octopress-lean-modification-2.html/#section-5">2.1 汉化导航栏</a></li>
      <li><a href="/blog/octopress-lean-modification-2.html/#section-6">2.2 汉化移动设备导航栏</a></li>
      <li><a href="/blog/octopress-lean-modification-2.html/#section-7">2.3 汉化归档页面</a></li>
      <li><a href="/blog/octopress-lean-modification-2.html/#section-8">2.4 汉化侧边栏</a></li>
      <li><a href="/blog/octopress-lean-modification-2.html/#section-9">2.5 汉化其他部分</a></li>
    </ul>
  </li>
  <li><a href="/blog/octopress-lean-modification-2.html/#section-10">3. 网站底部</a></li>
  <li><a href="/blog/octopress-lean-modification-2.html/#section-11">4. 添加侧边栏</a></li>
  <li><a href="/blog/octopress-lean-modification-2.html/#section-12">5. 添加评论系统</a></li>
</ul>

<h2><a href="/blog/octopress-lean-modification-3.html/" target="_blank">精益修改 (3) – 样式修改</a></h2>

<ul>
  <li><a href="/blog/octopress-lean-modification-3.html/#section">1. 网站布局</a>    <ul>
      <li><a href="/blog/octopress-lean-modification-3.html/#section-1">1.1 修改框架宽度</a></li>
      <li><a href="/blog/octopress-lean-modification-3.html/#section-2">1.2 修改内容宽度</a></li>
    </ul>
  </li>
  <li><a href="/blog/octopress-lean-modification-3.html/#section-3">2. 页面字体</a></li>
  <li><a href="/blog/octopress-lean-modification-3.html/#section-4">3. 修改链接样式</a></li>
  <li><a href="/blog/octopress-lean-modification-3.html/#section-5">4. 给中英文间添加空格</a></li>
</ul>

<h2><a href="/blog/octopress-lean-modification-4.html/" target="_blank">精益修改 (4) – 元素美化</a></h2>

<ul>
  <li><a href="/blog/octopress-lean-modification-4.html/#coderay-block-">1.  CodeRay Block 代码块插件</a>    <ul>
      <li><a href="/blog/octopress-lean-modification-4.html/#kramdown-coderay">1.1 安装 kramdown, CodeRay</a></li>
      <li><a href="/blog/octopress-lean-modification-4.html/#section">1.2 修改样式表</a></li>
      <li><a href="/blog/octopress-lean-modification-4.html/#section-1">1.3 使用方法</a></li>
    </ul>
  </li>
  <li><a href="/blog/octopress-lean-modification-4.html/#caption">2. 给图片添加说明 (Caption)</a>    <ul>
      <li><a href="/blog/octopress-lean-modification-4.html/#section-2">2.1 制作并添加插件</a></li>
      <li><a href="/blog/octopress-lean-modification-4.html/#section-3">2.2 修改样式表</a></li>
      <li><a href="/blog/octopress-lean-modification-4.html/#section-4">2.3 使用方法</a></li>
    </ul>
  </li>
  <li><a href="/blog/octopress-lean-modification-4.html/#fontawesome">3. 使用 FontAwesome</a></li>
</ul>

<h2><a href="/blog/octopress-lean-modification-5.html/" target="_blank">精益修改 (5) – 必备功能</a></h2>

<ul>
  <li><a href="/blog/octopress-lean-modification-5.html/#section">1. 侧边栏显示分类目录</a></li>
  <li><a href="/blog/octopress-lean-modification-5.html/#section-1">2. 自动生成文章目录</a></li>
  <li><a href="/blog/octopress-lean-modification-5.html/#section-2">3. 自动添加文章修改记录</a></li>
</ul>

</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (5)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-5.html/"/>
    <updated>2014-05-06T12:31:11+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-5</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">1. 侧边栏显示分类目录</a></li>
  <li><a href="#section-1">2. 自动生成文章目录</a></li>
  <li><a href="#section-2">3. 自动添加文章修改记录</a></li>
</ul>

<h2 id="section">1. 侧边栏显示分类目录</h2>

<p>随着文章数量的增多，为了更方便检索，我们需要对文章进行整理。整理的方式一般分为两种：1. 「分类目录」，这是一种收敛式的整理方式，也是 Octopress 的默认方式；2. 「标签」，这是一种扩散式的整理方式，使用这种方式的典范是 <a href="http://www.tumblr.com">Tumblr</a> 轻博客。</p>

<p>对我个人而言，搭建这个新博客主要是为了存放自己撰写的与理工（目前看来是 IT 和经济学）相关的文章，主题比较收敛，本身文章也不多，所以采用了 Octopress 默认的「分类目录」整理方式。<!--more--></p>

<p>但我们的目的是方便检索，仅仅给每篇文章设置分类还不够，还需要专门找个地方显示分类列表。由于 Wordpress 的习惯，我更愿意把分类目录放到侧边栏显示。那么该如何实现这一功能呢？在自己动手写代码之前，先看看有没有巨人的肩膀可以踩是个非常好的习惯。Google 之后，我们找到这样一篇文章：《<a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">为 octopress 添加分类(category)列表</a>》。参考这篇文章的方法，具体实现步骤如下：</p>

<p>首先，用如下代码新建文本文件，另存为 <code>category_list_tag.rb</code>，并把这个文件放到 <code>plugins</code> 目录下。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>plugins/category_list_tag.rb </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">module</span> <span class="class">Jekyll</span>
  <span class="keyword">class</span> <span class="class">CategoryListTag</span> &amp;lt; <span class="constant">Liquid</span>::<span class="constant">Tag</span>
    <span class="keyword">def</span> <span class="function">render</span>(context)
      html = “”
      categories = context.registers[<span class="symbol">:site</span>].categories.keys
      categories.sort.each <span class="keyword">do</span> |category|
        posts_in_category = context.registers[<span class="symbol">:site</span>].categories[category].size
        category_dir = context.registers[<span class="symbol">:site</span>].config[‘category_dir’]
        category_url = <span class="constant">File</span>.join(category_dir, category.gsub(<span class="regexp"><span class="delimiter">/</span><span class="content">_|</span><span class="char">\P</span><span class="content">{Word}</span><span class="delimiter">/</span></span>, ‘-‘).gsub(<span class="regexp"><span class="delimiter">/</span><span class="content">-{2,}</span><span class="delimiter">/</span></span>, ‘-‘).downcase)
        html « “&amp;lt;li <span class="keyword">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">category</span><span class="delimiter">'</span></span>&amp;gt;&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://shengmingzhiqing.com/</span><span class="inline"><span class="inline-delimiter">#{</span>category_url<span class="inline-delimiter">}</span></span><span class="content">/</span><span class="delimiter">&quot;</span></span>&gt;<span class="comment">#{category} (#{posts_in_category})&lt;/a&gt;&amp;lt;/li&amp;gt;\n”</span>
      <span class="keyword">end</span>
      html
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;Liquid::Template.register_tag(‘category_list’, Jekyll::CategoryListTag)</span></span></pre></div>
</div>
 </figure></notextile></div></p>

<p>然后我们使用如下代码新建 <code>category_list.html</code> 文件，并放到 <code>source/_includes/custom/asides/</code> 文件夹下。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/asides/category_list.html </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;/p&gt;</span>
<span class="tag">&lt;section&gt;</span>
  <span class="tag">&lt;h1&gt;</span>Categories<span class="tag">&lt;/h1&gt;</span>
  <span class="tag">&lt;ul</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">categories</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    {% category_list %}
  <span class="tag">&lt;/ul&gt;</span>
<span class="tag">&lt;/section&gt;</span>
<span class="tag">&lt;p&gt;</span></pre></div>
</div>
 </figure></notextile></div></p>

<p>最后，我们在 <code>_config.yml</code> 文件中 <code>default_asides:</code> 后面的方括号中，添加一项 <code>custom/asides/category_list.html</code>，放到你喜欢的位置。</p>

<p>这样我们就可以在侧边栏看到分类目录列表了。不过且慢，每个功能实现之后，我们还是测试一下为好。如果你的分类名称中有中文，你就会发现这个链接并不能正确指向该分类的页面，那么该怎么办呢？</p>

<p>打开 <code>plugins/category_list_tag.rb</code>，找到如下一行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>plugins/category_list_tag.rb </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
html « “&amp;lt;li <span class="keyword">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">category</span><span class="delimiter">'</span></span>&amp;gt;&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://shengmingzhiqing.com/</span><span class="inline"><span class="inline-delimiter">#{</span>category_url<span class="inline-delimiter">}</span></span><span class="content">/</span><span class="delimiter">&quot;</span></span>&gt;<span class="comment">#{category} (#{posts_in_category})&lt;/a&gt;&amp;lt;/li&amp;gt;\n”</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>替换为：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>plugins/category_list_tag.rb </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
html « “&amp;lt;li <span class="keyword">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">category</span><span class="delimiter">'</span></span>&amp;gt;&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://shengmingzhiqing.com/blog/categories/</span><span class="inline"><span class="inline-delimiter">#{</span>category.to_url.downcase<span class="inline-delimiter">}</span></span><span class="content">/</span><span class="delimiter">&quot;</span></span>&gt;<span class="comment">#{category} (#{posts_in_category})&lt;/a&gt;&amp;lt;/li&amp;gt;\n”</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>完工。</p>

<h2 id="section-1">2. 自动生成文章目录</h2>

<p>博客文章不想报纸杂志，自然有长有短：短文章可以短到只有标题，而长文章往往会分为好多个章节。为了方便阅读，我们往往会把一篇长文章分为好几篇来发布，比如我们的「Octopress 精益修改」，但即便如此，有些文章还是会超出最适宜阅读的长度，同样比如我们这个 Octopress 教程。那么有没有什么办法能够解决这个不宜阅读的问题呢？</p>

<p>我们知道，使用 Markdown 语言撰写的文章，只要你把章节题目标清楚，本身会生成一个内在的文档结构，如果我们直接把这个结构提取出来，作为文章的目录，放到文章开头，这样就能一举解决我们刚才所说的问题。那么有没有这样的实现方式呢？带着这个问题，我们找到了这样一篇文章：<a href="http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/"><em>Table Of Contents in Octopress</em></a>，参考此文，具体实现步骤如下：</p>

<p>首先，请使用 kramdown 作为 Octopress 默认的 Markdown 解析器，具体如何设置请参照先前的教程。</p>

<p>然后只要你在想插入目录的地方，插入如下一段代码即可：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
* list element with functor item
{:toc}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>没错，就这么简单。当然你可能希望能在这个目录前面自动添加，类似本文前面的「本页目录」四个字，只需要修改样式表 <code>sass/custom/_style.scss</code>，添加如下代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_style.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
#markdown-toc:before {
  content: “本页目录”;
  font-weight: bold;
}</pre></div>
</div>
 </figure></notextile></div></p>

<p>最后，可能还有一个问题，有些朋友和我一样会在文章中使用 <code>&lt;!-- more --&gt;</code> 标签，在首页只显示部分文章，这时这个目录生成可能就会出现错误，而且事实上我们也没必要在文章的摘要中放置一个目录，所以我们可以在 <code>sass/custom/_style.scss</code> 添加如下代码，让主页不出现目录：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_style.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
.blog-index #markdown-toc {
  display: none;
}</pre></div>
</div>
 </figure></notextile></div></p>

<p>如果你对这个目录的样式不满意，还可以在样式表中进一步修改，改成什么样就看你个人喜好了。</p>

<h2 id="section-2">3. 自动添加文章修改记录</h2>

<p><a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/#octopress--github-pages">前面我们说过</a>，写文章，建网站都难免要修改，而且会反复修改。如果能把这些修改过程记录下来，本身就是很好的学习资料，那么有没有办法实现这一点呢？Git 就是干这个的，而且也正是我们前面说的 Octopress + Github Pages 相比其他博客系统的优势之一。</p>

<p>事实上，我们每一次更新文章后提交至 Github 的 Commit 就可以当做是文章的修改记录和说明，如果我们能让这个信息自动出现在文章末尾，就可以实现我们想要的功能。同样，百事未行先 Google，我们发现了这样一篇文章：<a href="http://jhshi.me/2013/11/17/post-revision-plugin-for-octopress/"><em>Post Revision Plugin for Octopress</em></a>，参考此文，具体实现步骤如下：</p>

<ol>
  <li>
    <p>到这里 <a href="http://s.olo.la/a6cM">http://s.olo.la/a6cM</a> 找到 Octopress Post Revision 插件。</p>
  </li>
  <li>
    <p>复制 <code>plugins/revision.rb</code> 到你自己的 <code>plugins</code> 目录下。</p>
  </li>
  <li>
    <p>复制 <code>source/_includes/post/revision.html</code> 到你自己的 <code>source/_includes/post</code> 目录下。</p>
  </li>
  <li>在 <code>_config.yml</code> 文件中，添加你的 Github 账户信息，如下： <br />
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">github_user</span>: <span class="comment"># 这你填你的 Github 用户名</span>
<span class="key">github_repo</span>: <span class="comment"># 这里填你博客的库名，即 [your_user_name].github.io</span>
</pre></div>
</div>
 </figure></notextile></div></li>
  <li>在 <code>source/_layouts/post.html</code> 的 <code>&lt;footer&gt;</code> 和 <code>&lt;/footer&gt;</code> 之间，你想要的位置，添加如下代码，此处即为文章修改记录的显示位置：<br />
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_layouts/post.html </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
{% include revision.html %}</pre></div>
</div>
 </figure></notextile></div></li>
</ol>

<p>这样，我们就可以在文章末尾看到本文的修改记录了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (4)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-4.html/"/>
    <updated>2014-05-05T18:52:14+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-4</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#coderay-block-">1.  CodeRay Block 代码块插件</a>    <ul>
      <li><a href="#kramdown-coderay">1.1 安装 kramdown, CodeRay</a></li>
      <li><a href="#section">1.2 修改样式表</a></li>
      <li><a href="#section-1">1.3 使用方法</a></li>
    </ul>
  </li>
  <li><a href="#caption">2. 给图片添加说明 (Caption)</a>    <ul>
      <li><a href="#section-2">2.1 制作并添加插件</a></li>
      <li><a href="#section-3">2.2 修改样式表</a></li>
      <li><a href="#section-4">2.3 使用方法</a></li>
    </ul>
  </li>
  <li><a href="#fontawesome">3. 使用 FontAwesome</a></li>
</ul>

<h2 id="coderay-block-">1.  CodeRay Block 代码块插件</h2>

<p>用 Octopress 写博客的很多朋友需要在博客内容当中添加代码块，毕竟这是一个「为黑客而生的博客框架」。Octopress 除了可以使用 Markdown 语言默认的代码块实现方式之外，本身也集成了很强大的代码块 (Code Block) 插件，按照<a href="http://octopress.org/docs/plugins/codeblock/">官方的说明</a>调用即可，比如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>节选自比特币 Python API </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rv</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">validateaddress</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">rv</span><span class="o">.</span><span class="n">isvalid</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">“</span><span class="n">The</span> <span class="n">address</span> <span class="n">that</span> <span class="n">you</span> <span class="n">provided</span> <span class="ow">is</span> <span class="n">valid</span><span class="err">”</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">“</span><span class="n">The</span> <span class="n">address</span> <span class="n">that</span> <span class="n">you</span> <span class="n">provided</span> <span class="ow">is</span> <span class="n">invalid</span><span class="p">,</span> <span class="n">please</span> <span class="n">correct</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>官方的 Code Block 插件支持语法高亮，本身的显示效果也非常不错，可以与博客大背景的深色形成呼应。但如果你的文章中出现大量的代码块，黑色背景看起来可能不那么舒服。这时，你可能想要使用浅色系的代码块，比如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>节选自比特币 Python API </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
rv = conn.validateaddress(foo)
<span class="keyword">if</span> rv.isvalid:
    <span class="keyword">print</span> <span class="error">“</span>The address that you provided <span class="keyword">is</span> valid<span class="error">”</span>
<span class="keyword">else</span>:
    <span class="keyword">print</span> <span class="error">“</span>The address that you provided <span class="keyword">is</span> invalid, please correct<span class="error">”</span>
</pre></div>
</div>
 </figure></notextile></div><!--more--></p>

<p>最早看到这种风格的显示是在 <a href="http://blog.codebykat.com/2013/05/23/gorgeous-octopress-codeblocks-with-coderay/">Kat Hagan 的博客</a>，她在文章中介绍了一种新的语法高亮工具——<a href="http://coderay.rubychan.de">CodeRay</a>，使用这种工具即可实现上面浅色圆角的代码块。作者同时也是一位极具分享精神的 Web 开发者，为了方便大家使用 CodeRay，她还专门制作了一个可直接安装的 Octopress 插件。</p>

<p>但是她这个插件取消了 CodeRay 自带的行号功能，在当你需要指出某一行代码时，就非常不方便。为了解决这个问题，<a href="http://www.fritz-hut.com/2013/11/24/github-style-code-highlighting-for-octopress/">Jan Stevens</a> 在 Kat 的插件基础上，开发了可以添加行号的 CodeRay 插件，但为了适应他自己博客的风格，同时也写了新的样式表。</p>

<p>由于 Kat 用的是 Octopress 默认主题，从总体风格上而言，Kat 的插件样式更适合我们的博客，于是我尝试着用 Kat 的样式表配合 Jan 的插件使用，在代码块没有标题框 (Caption) 的情况下表现完美。但一旦加上标题框，问题就出现了：代码块主体部分与标题框的连接处出现了不必要的圆角，显得非常难看。为了解决这一问题，我在他们的基础上修改了 Coderay Block 插件，如果你需要，在这里：<a href="http://s.olo.la/iqLp">Octopress CodeRay Block</a>.</p>

<p>具体安装和使用方法如下：</p>

<h3 id="kramdown-coderay">1.1 安装 kramdown, CodeRay</h3>

<p>首先你需要在你的博客程序中安装 kramdown 和 CodeRay（如果你已经安装过，则可以跳过此步）：</p>

<p>在 <code>Gemfile</code> 中添加如下两行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
gem ‘kramdown’
gem ‘coderay’
</pre></div>
</div>
 </figure></notextile></div></p>

<p>在终端执行如下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
bundle install
</pre></div>
</div>
 </figure></notextile></div></p>

<p>然后修改 <code>_config.yml</code> 文件中相关内容如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">markdown</span>: <span class="string"><span class="content">kramdown</span></span>
<span class="key">kramdown</span>:
    <span class="key">use_coderay</span>: <span class="string"><span class="content">true</span></span>
    <span class="key">coderay</span>:
        <span class="key">coderay_line_numbers</span>: <span class="string"><span class="content">table</span></span>
        <span class="key">coderay_css</span>: <span class="string"><span class="content">class</span></span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>其中 <code>coderay_line_numbers: table</code> 表示激活 CodeRay 的行号功能。</p>

<h3 id="section">1.2 修改样式表</h3>

<p>把 <code>/sass/custom/_coderay.scss</code> 文件复制到你自己的 <code>/sass/custom/</code> 文件夹下。</p>

<p>把 <code>/sass/custom/_styles.scss</code> <strong>文件中的代码</strong>添加到你自己的 <code>/sass/custom/_styles.scss</code>文件夹中。</p>

<p>安装完成。</p>

<h3 id="section-1">1.3 使用方法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
{ <span class="string"><span class="delimiter">% </span><span class="content">coderay</span><span class="delimiter"> </span></span>[<span class="key">lang</span>:lang] [<span class="key">linenos</span>:<span class="predefined-constant">true</span>|<span class="predefined-constant">false</span>(default)] [title] [url] [link text] % }
代码片段
{ <span class="string"><span class="delimiter">% </span><span class="content">endcoderay</span><span class="delimiter"> </span></span>% }
</pre></div>
</div>
 </figure></notextile></div></p>

<p>你可以看到这个使用方法与官方的 CodeBlock 插件非常像，其中：<code>lang:</code> 定义了代码的语言，<code>linenos:</code> 定义了是否显示行号（默认不显示），<code>title</code> 是代码框标题，<code>url</code> 是链接，<code>link text</code> 是链接文本。</p>

<h2 id="caption">2. 给图片添加说明 (Caption)</h2>

<p>在我们发布文章的时候，难免会插入图片。你可以把你想插入的图片（比如 dream.jpg）放到 <code>source/images/</code> 文件夹下。重新生成部署站点之后，图片的地址为 <code>{{ root_url }}/source/images/dream.jpg</code>，当然你也可以给 images 文件夹下再添加其他文件夹，只要你加到图片最终的路径上即可。</p>

<p>具体使用图片时，官方自带了图片插件 (Image Tag)，使用非常方便，具体方法可以参考<a href="http://octopress.org/docs/plugins/image-tag/">官方说明</a>。但有时候，我们需要给图片添加说明 (Caption)，比如在我的文章「<a href="http://shengmingzhiqing.com/blog/why-enter-key-is-huiche-in-chinese.html/">为什么「Enter 键」要被翻译为「回车键」？</a>」中的第二张图。这时官方的插件就显得不够用了，参照 <a href="http://blog.zerosharp.com/image-captions-for-octopress/"><em>Image Captions for Octopress</em></a> , 我们可以按如下步骤实现想要的功能：</p>

<h3 id="section-2">2.1 制作并添加插件</h3>

<p>首先新建一个文本文件，复制如下代码，另存为 <code>image_caption_tag.rb</code> 文件，注意要使用 .rb 后缀。然后再把这个文件放到 <code>plugins</code> 目录下。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>plugins/image_caption_tag.rb </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># Title: Image tag with caption for Jekyll</span>
<span class="comment"># Description: Easily output images with captions&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">module</span> <span class="class">Jekyll</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;class CaptionImageTag &amp;lt; Liquid::Tag
    @img = nil
    @title = nil
    @class = ‘’
    @width = ‘’
    @height = ‘’&lt;</span><span class="delimiter">/</span></span>p&gt;

&lt;pre&gt;&lt;code&gt;<span class="keyword">def</span> <span class="function">initialize</span>(tag_name, markup, tokens)
  <span class="keyword">if</span> markup =~ <span class="regexp"><span class="delimiter">/</span><span class="content">(</span><span class="char">\S</span><span class="content">.*</span><span class="char">\s</span><span class="content">+)?(https?:</span><span class="char">\/</span><span class="char">\/</span><span class="content">|</span><span class="char">\/</span><span class="content">)(</span><span class="char">\S</span><span class="content">+)(</span><span class="char">\s</span><span class="content">+</span><span class="char">\d</span><span class="content">+</span><span class="char">\s</span><span class="content">+</span><span class="char">\d</span><span class="content">+)?(</span><span class="char">\s</span><span class="content">+.+)?</span><span class="delimiter">/</span><span class="modifier">i</span></span>
    <span class="instance-variable">@class</span> = <span class="global-variable">$1</span> || <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
    <span class="instance-variable">@img</span> = <span class="global-variable">$2</span> + <span class="global-variable">$3</span>
    <span class="keyword">if</span> <span class="global-variable">$5</span>
      <span class="instance-variable">@title</span> = <span class="global-variable">$5</span>.strip
    <span class="keyword">end</span>
    <span class="keyword">if</span> <span class="global-variable">$4</span> =~ <span class="regexp"><span class="delimiter">/</span><span class="char">\s</span><span class="content">*(</span><span class="char">\d</span><span class="content">+)</span><span class="char">\s</span><span class="content">+(</span><span class="char">\d</span><span class="content">+)</span><span class="delimiter">/</span></span>
      <span class="instance-variable">@width</span> = <span class="global-variable">$1</span>
      <span class="instance-variable">@height</span> = <span class="global-variable">$2</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
  <span class="keyword">super</span>
<span class="keyword">end</span>

<span class="keyword">def</span> <span class="function">render</span>(context)
  output = <span class="keyword">super</span>
  <span class="keyword">if</span> <span class="instance-variable">@img</span>
    <span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;lt;span class='</span><span class="inline"><span class="inline-delimiter">#{</span>(<span class="string"><span class="delimiter">'</span><span class="content">caption-wrapper </span><span class="delimiter">'</span></span> + <span class="instance-variable">@class</span>).rstrip<span class="inline-delimiter">}</span></span><span class="content">'&amp;gt;</span><span class="delimiter">&quot;</span></span> +
      <span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;lt;img class='caption' src='</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@img</span><span class="inline-delimiter">}</span></span><span class="content">' width='</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@width</span><span class="inline-delimiter">}</span></span><span class="content">' height='</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@height</span><span class="inline-delimiter">}</span></span><span class="content">' title='</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@title</span><span class="inline-delimiter">}</span></span><span class="content">'&amp;gt;</span><span class="delimiter">&quot;</span></span> +
      <span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;lt;span class='caption-text'&amp;gt;</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@title</span><span class="inline-delimiter">}</span></span><span class="content">&amp;lt;/span&amp;gt;</span><span class="delimiter">&quot;</span></span> +
    <span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;lt;/span&amp;gt;</span><span class="delimiter">&quot;</span></span>
  <span class="keyword">else</span>
    <span class="string"><span class="delimiter">&quot;</span><span class="content">Error processing input, expected syntax: &lt;img class=</span><span class="delimiter">&quot;</span></span>[<span class="keyword">class</span> <span class="class">name</span>(s)]<span class="string"><span class="delimiter">&quot;</span><span class="content"> src=</span><span class="delimiter">&quot;</span></span>/url/to/image<span class="string"><span class="delimiter">&quot;</span><span class="content"> title=</span><span class="delimiter">&quot;</span></span>[width height] [title text]<span class="string"><span class="delimiter">&quot;</span><span class="content"> &gt;</span><span class="delimiter">&quot;</span></span>
  <span class="keyword">end</span>
<span class="keyword">end</span>   <span class="keyword">end</span> <span class="keyword">end</span>
&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">code&gt;&lt;</span><span class="delimiter">/</span></span>pre&gt;

&lt;p&gt;<span class="constant">Liquid</span>::<span class="constant">Template</span>.register_tag(‘imgcap’, <span class="constant">Jekyll</span>::<span class="constant">CaptionImageTag</span></pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="section-3">2.2 修改样式表</h3>

<p>在 <code>sass/base/_utilities.scss</code> 文件中添加如下几行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/base/_utilities.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="directive">@mixin</span> <span class="error">r</span><span class="error">e</span><span class="error">s</span><span class="error">e</span><span class="error">t</span><span class="error">-</span><span class="error">s</span><span class="error">h</span><span class="error">a</span><span class="error">d</span><span class="error">o</span><span class="error">w</span><span class="error">-</span><span class="error">b</span><span class="error">o</span><span class="error">x</span>() {
  <span class="directive">@include</span> <span class="error">s</span><span class="error">h</span><span class="error">a</span><span class="error">d</span><span class="error">o</span><span class="error">w</span><span class="error">-</span><span class="error">b</span><span class="error">o</span><span class="error">x</span>(<span class="float">0px</span>, <span class="float">0px</span>, <span class="float">0px</span>);
}</pre></div>
</div>
 </figure></notextile></div></p>

<p>最后，打开 <code>sass/partials/_blog.scss</code> 文件，作如下修改，其中减号表示删掉该行，加号表示新添该行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/partials/_blog.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
   <span class="tag">article</span> {
     <span class="key">font-size</span>: <span class="float">2.0em</span>; <span class="key">font-style</span>: <span class="value">italic</span>;
     <span class="key">line-height</span>: <span class="float">1.3em</span>;
   }
<span class="error">-</span>  <span class="tag">img</span>, <span class="tag">video</span>, <span class="class">.flash-video</span> {
+  <span class="key">img</span>, <span class="key">video</span>, .<span class="key">flash-video</span>, .<span class="key">caption-wrapper</span> {
     <span class="directive">@extend</span> .<span class="key">flex-content</span>;
     <span class="directive">@extend</span> .<span class="key">basic-alignment</span>;
     <span class="directive">@include</span> <span class="key">shadow-box</span>;
+    <span class="error">&amp;</span><span class="key">amp</span>;.<span class="key">caption</span> {
+      <span class="directive">@include</span> <span class="key">reset-shadow-box</span>;
+    }
+  }
+  .<span class="key">caption-wrapper</span> {
+    <span class="key">display</span>: <span class="value">inline-block</span>;
+    <span class="key">margin-bottom</span>: <span class="float">10px</span>;
+    .<span class="key">caption-text</span> {
+      <span class="key">background</span>: <span class="color">#fff</span>;
+      <span class="key">text-align</span>: <span class="value">center</span>;
+      <span class="key">font-size</span>: <span class="float">.8em</span>;
+      <span class="key">color</span>: <span class="color">#666</span>;
+      <span class="key">display</span>: <span class="value">block</span>;
+    }
   }
   <span class="key">video</span>, .<span class="key">flash-video</span> { <span class="key">margin</span>: <span class="float">0</span> <span class="value">auto</span> <span class="float">1.5em</span>; }
   <span class="key">video</span> { <span class="key">display</span>: <span class="value">block</span>; <span class="key">width</span>: <span class="float">100%</span>; }</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="section-4">2.3 使用方法</h3>

<p>按照如下代码将图片插入文中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&lt;span <span class="keyword">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">caption-wrapper</span><span class="delimiter">'</span></span>&gt;&lt;img <span class="keyword">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">caption</span><span class="delimiter">'</span></span> src=<span class="string"><span class="delimiter">'</span><span class="content">/right]</span><span class="delimiter">'</span></span> width=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span> height=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span> title=<span class="string"><span class="delimiter">'</span><span class="content">[url] [caption] [width] [height] [title text] [alt text]</span><span class="delimiter">'</span></span>&gt;&lt;span <span class="keyword">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">caption-text</span><span class="delimiter">'</span></span>&gt;[url] [caption] [width] [height] [title text] [alt text]&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">span&gt;&lt;</span><span class="delimiter">/</span><span class="modifier">s</span></span>pan&gt; 
</pre></div>
</div>
 </figure></notextile></div></p>

<p>其中，<code>[left/right]</code> 是表示图片显示在页面上的位置，<code>[url]</code> 是图片完整链接，<code>[caption]</code> 是图片说明，<code>[width]</code> 和 <code>[height]</code> 分别是图片的宽度和高度，<code>[title]</code> 是图片标题，<code>[alt text]</code> 是图片替代文字。</p>

<p>有必要区别一下 <code>[caption]</code>,  <code>[title]</code>, 和 <code>[alt text]</code> 三个图片属性。<code>[caption]</code> 指显示在图片下方的说明文字，<code>[title]</code> 指鼠标悬停在图片上时显示出来的文字，<code>[alt text]</code> 指图片无法加载时，该图片的位置所显示的文字。</p>

<h2 id="fontawesome">3. 使用 FontAwesome</h2>

<p>装饰网站和撰写文章，不可避免的要使用到一些 Logo 和图标，对于一个非设计专业人士来说，该如何轻松获取图标呢？这里有一个巨大的图标库 <a href="http://fortawesome.github.io/Font-Awesome/icons/">Font Awesome</a>，事实上，我博客导航栏和侧边栏使用的 Logo 就来自 Font Awesome.</p>

<p>要使用 Font Awesome，你只需要简单地在 <code>source/_includes/custom/head.html</code> 中添加如下一行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/head.html</span><a href='http://fortawesome.github.io/Font-Awesome/get-started/'>link</a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;link</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">stylesheet</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>安装工作就完成了。然后你看中哪个 Logo，直接输入官方的 Logo 代码，就可以让 Logo 出现在页面相应位置。比如你想显示照相机的 Logo：</p>

<i class="fa fa-camera-retro fa-5x"></i>

<p>你只需要输入如下代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&lt;i class=&quot;fa fa-camera-retro fa-5x&quot; /&gt;</pre></div>
</div>
 </figure></notextile></div></p>

<p>有时候 Font Awesome 可能会出现与 kramdown 解析器相冲突的情况，导致全局样式发生变化，这是你只需要在 Logo 的代码前后分别添加 <code>{::nomarkdown}</code> 和 <code>{:/nomarkdown}</code>强制 kramdown 不去解析这段语句即可，比如上面的代码可以改为：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>

&lt;i class=&quot;fa fa-camera-retro fa-5x&quot;&gt;&lt;/i&gt;
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (3)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-3.html/"/>
    <updated>2014-05-04T13:38:26+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-3</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">1. 网站布局</a>    <ul>
      <li><a href="#section-1">1.1 修改框架宽度</a></li>
      <li><a href="#section-2">1.2 修改内容宽度</a></li>
    </ul>
  </li>
  <li><a href="#section-3">2. 页面字体</a></li>
  <li><a href="#section-4">3. 修改链接样式</a></li>
  <li><a href="#section-5">4. 给中英文间添加空格</a></li>
</ul>

<p>在主题的框架部署完成之后，我们的博客已经可以算是一个五脏俱全的个人网站了，下一步网站变成什么样子，主要看我们往里面加什么样的内容。但在你发表几篇文章之后，你可能就会发现，文字的呈现并不美观，这就需要我们去修改网站和文字的样式。当然，我们必须承认，由于各种各样的原因，同一个网站在不同的操作系统或者不同的浏览器下显示是完全不一样的。作为一个小博客这站长，只能尽我们所能去修改样式，但真的没有精力去保证适应所有的操作系统和所有的浏览器（尤其是 IE）。<!--more--></p>

<p>本文主要讲网站和文字样式的修改，主要工作就是要修改整个网站的样式表。 Octopress 的样式表放在 <code>sass</code> 目录下。秉承之前谈到的原则，在可能的情况下，我们尽量只修改 <code>sass/custom</code> 这个目录下的内容。</p>

<h2 id="section">1. 网站布局</h2>

<h3 id="section-1">1.1 修改框架宽度</h3>

<p>如果说两年多的学术生涯带给我什么对于排版格式方面的收获，那么就是我在使用 LaTeX 的过程中意识到，过宽的布局并不易于阅读。而 Octopress 默认的页面主体框架非常宽，也许对活动颈椎有好处，但我们读起来并不舒服。所以首先我们要缩减默认宽度。</p>

<p>打开 <code>sass/custom/_layout.scss</code> 这个文件，找到如下两行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_layout.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>//<span class="error">$</span><span class="tag">max-width</span>: <span class="float">1350px</span>;
<span class="error">…</span>
//<span class="error">$</span><span class="tag">sidebar-width-wide</span>: <span class="float">300px</span>;
</pre></div>
</div>
 </figure></notextile></div></p>

<p>你可以从字面意思看出这两行代码是什么意思，所以你只需要修改相应的数字就好了。以我的博客为例，整体框架的最宽宽度我设为 1000px，侧边栏最宽宽度我设为 260px。之所以称为最宽宽度，是因为网站会根据不同的显示设备自适应宽度。其他诸如最窄宽度，中等宽度，你也可以在这个文件中找到相应的代码，进行修改。</p>

<p>修改完之后，记得把这两行前面的 <code>//</code> 去掉，因为在样式表中，这个符号后面的内容默认是注释内容，会被自动忽略。比如，按照我的设置改完之后，这两行应该变为：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_layout.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="error">$</span><span class="tag">max-width</span>: <span class="float">1000px</span>;
<span class="error">…</span>
<span class="error">$</span><span class="tag">sidebar-width-wide</span>: <span class="float">260px</span>;
</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="section-2">1.2 修改内容宽度</h3>

<p>修改完框架宽度之后，我们可以预览一下效果，会发现，由于宽度变窄，文章内容距离框架的边界就显得过宽了，所以我们也要对文章内容的宽度进行修改。同样还是在刚才的 <code>sass/custom/_layout.scss</code> 文件，找到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_layout.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>//<span class="error">$</span><span class="tag">pad-wide</span>: <span class="float">55px</span>;
<span class="error">…</span>
//<span class="error">$</span><span class="tag">sidebar-pad-wide</span>: <span class="float">20px</span>;
</pre></div>
</div>
 </figure></notextile></div></p>

<p>这两行定义的是主栏和侧边栏的文字与边框最宽距离，改成你觉得适合的大小即可。当然如果你想修改「中等距离」和「最窄距离」，找到相应代码修改即可。</p>

<p>同样，记得去掉注释符号 <code>//</code> 。</p>

<p>内容宽度设置好之后，我们在插入列表时会发现一个问题：Octopress 的列表符号（或者编号）默认溢出左侧文字内容边界，以保证文字可以对齐。但我们缩小了文字与边框的距离，这样项目符号出现在这里就会显得非常拥挤。建议开启列表缩进功能：在 <code>sass/custom/_layout.scss</code> 中找到 <code>//$indented-lists: true;</code> 去掉注释符号 <code>//</code> 即可。</p>

<h2 id="section-3">2. 页面字体</h2>

<p>布局修改好之后，我们接着来修改文字字体。打开 <code>sass/custom/_font.scss</code> 这个文件，你会发现如下几行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_font.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>//<span class="error">$</span><span class="tag">sans</span>: <span class="error">“</span><span class="tag">Optima</span><span class="error">”</span>, <span class="tag">sans-serif</span>;
//<span class="error">$</span><span class="tag">serif</span>: <span class="error">“</span><span class="tag">Baskerville</span><span class="error">”</span>, <span class="tag">serif</span>;
//<span class="error">$</span><span class="tag">mono</span>: <span class="error">“</span><span class="tag">Courier</span><span class="error">”</span>, <span class="tag">monospace</span>;
//<span class="error">$</span><span class="tag">heading-font-family</span>: <span class="error">“</span><span class="tag">Verdana</span><span class="error">”</span>, <span class="tag">sans-serif</span>;
//<span class="error">$</span><span class="tag">header-title-font-family</span>: <span class="error">“</span><span class="tag">Futura</span><span class="error">”</span>, <span class="tag">sans-serif</span>;
//<span class="error">$</span><span class="tag">header-subtitle-font-family</span>: <span class="error">“</span><span class="tag">Futura</span><span class="error">”</span>, <span class="tag">sans-serif</span></pre></div>
</div>
 </figure></notextile></div></p>

<p>由上至下定义了「衬线字体」「无衬线字体」「等宽字体」「标题字体」「网站主标题字体」「网站副标题字体」，在其中添加你喜欢的字体即可。字体的优先级是由先到后的。当然别忘了去掉注释符号。</p>

<p>对于英文字体，你还可以去 <a href="http://www.google.com/fonts/">Google Webfonts</a> 查找你喜欢的字体并使用，比如你想用 PT Serif 这个字体，你只需要在 <code>source/_includes/custom/head.html</code> 中添加如下代码即可：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/head.html </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;link</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">stylesheet</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/css</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span> </pre></div>
</div>
 </figure></notextile></div></p>

<p>顺便说一句，对于中文字体，为了照顾 Windows 用户，我们不得不在 font-family 中添加「微软雅黑」，因为一般人电脑里都会有。尽管这个字体并不好看，但其他 Windows 自带字体更难看。</p>

<p>字体选好之后，我们还需要调整不同文字字体的大小。这部分内容是在 <code>sass/base/_typography.scss</code> 这个样式表中定义的。注意它并不在 <code>sass/custom</code> 目录下。打开之后，你会看到对于不同内容字体样式的定义，比如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/base/_typography.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="tag">body</span> <span class="error">&amp;</span><span class="tag">gt</span>; <span class="tag">header</span> <span class="tag">h1</span> {
  <span class="key">font-size</span>: <span class="float">2.2em</span>;
  <span class="directive">@extend</span> .<span class="key">heading</span>;
  <span class="key">font-family</span>: <span class="error">$</span><span class="value">header-title-font-family</span>;
  <span class="key">font-weight</span>: <span class="value">normal</span>;
  <span class="key">line-height</span>: <span class="float">1.2em</span>;
  <span class="key">margin-bottom</span>: <span class="float">0.6667em</span>;
}</pre></div>
</div>
 </figure></notextile></div></p>

<p>这部分定义的是一级标题的字体样式，其中 <code>font-size: 2.2em</code> 即为字体大小。其他文字的字体大小定义方式也与此类似。你可以直接修改这里的数字来更改文字大小，但秉承我们之前的原则，我们并不修改这个文件。复制 <code>sass/base/_typography.scss</code> 当中想要修改的部分，粘贴到 <code>sass/custom/_styles.scss</code> 这个文件中，然后在 <code>_sytle.scss</code> 这文件中修改即可生效。</p>

<p>这里顺便讲讲 Octopress 的样式表。其实真正定义最终呈现在页面上的效果的样式表是 <code>sass/screen.scss</code> 这个文件，打开之后你会发现：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/screen.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="directive">@import</span> <span class="error">“</span><span class="tag">compass</span><span class="error">”</span>;
<span class="directive">@include</span> <span class="tag">global-reset</span>;<span class="error">&lt;</span>/<span class="tag">p</span>&gt;

<span class="error">&lt;</span><span class="tag">p</span>&gt;<span class="directive">@import</span> <span class="error">“</span><span class="tag">custom</span>/<span class="tag">colors</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">custom</span>/<span class="tag">fonts</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">custom</span>/<span class="tag">layout</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">base</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">partials</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">plugins</span>/<span class="error">&lt;</span><span class="tag">em</span>&gt;<span class="tag">*</span>/<span class="error">&lt;</span>/<span class="tag">em</span>&gt;<span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">custom</span>/<span class="tag">styles</span><span class="error">”</span>;</pre></div>
</div>
 </figure></notextile></div></p>

<p>几乎全文件都是 @import 语句，我们可以从字面意思猜出这个语句的意思。也就是说，我们修改的那些样式表，最终会导入这个样式表，然后实现对样式的改动。</p>

<p>如果你想新定义一些样式，事实上也可以新建一个样式表，然后在这里添加@import 语句导入 <code>sass/screen.scss</code> 即可。当然本身 @import 语句也可以嵌套，你甚至可以把你自己新建的样式表导入 <code>sass/custom/_styles.scss</code>，最终你的样式设置也会导入到 <code>sass/screen.scss</code>，因为 <code>sass/custom/_styles.scss</code> 本身也被导入了 <code>sass/screen.scss</code> 当中。这样无论我们定义什么样式，都可以只修改 <code>sass/custom</code> 目录中的内容。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2 id="section-4">3. 修改链接样式</h2>

<p>Octopress 默认超链接显示样式有下划线，对于中文来说，这条下划线会和文字挤在一起，不甚美观。打开 <code>sass/base/_theme.scss</code> 文件，找到这行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/base/_theme.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">a</span> {
  <span class="directive">@include</span> <span class="error">l</span><span class="error">i</span><span class="error">n</span><span class="error">k</span><span class="error">-</span><span class="error">c</span><span class="error">o</span><span class="error">l</span><span class="error">o</span><span class="error">r</span><span class="error">s</span>(<span class="error">$</span><span class="key">link-color</span>, <span class="error">$</span><span class="key">hover</span>: <span class="error">$</span><span class="value">link-color-hover</span>, <span class="error">$</span><span class="value">focus</span>: <span class="error">$</span><span class="value">link-color-hover</span>, <span class="error">$</span><span class="value">visited</span>: <span class="error">$</span><span class="value">link-color-visited</span>, <span class="error">$</span><span class="value">active</span>: <span class="error">$</span><span class="value">link-color-active</span>);
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>在花括号中添加一行 <code>text-decoration: none; </code> 。当然也可以把这段代码复制到 <code>sass/custom/_styles.scss</code> 中再做相应修改。</p>

<p>所有有关链接样式的修改，都只需要在相应的样式表中找到 <code>a { }</code> 这样的代码，修改花括号里面的内容即可。</p>

<h2 id="section-5">4. 给中英文间添加空格</h2>

<p>锤子科技的 UX 产品总监<a href="http://weibo.com/u/1842158375">@朱萧木</a> 老师前一段时间发了一条微博：</p>

<blockquote>
  <p>打字时，中英混排时，中文和英文之间应该空一格，这一格，就是逼格。<br />
<a href="http://www.weibo.com/1842158375/AEWZGogNT">4 月 10 日 00:09</a></p>
</blockquote>

<p>很多朋友看完之后，并不明白他到底是什么意思，那么为什么要在中英文间加空格呢？首先，这样确实要好看一些；其次，对于网页显示来说，如果中英文间不加空格，默认会把这个英文单词和它前后的汉字当成一个单词，所以不会再汉字和英文之间换行，如果有采用了两段对齐的格式，很有可能出现某行文字过于稀疏的问题，整体上依然不美观。</p>

<p>但我们在书写中文的时候，其实并没有在汉字之间加空格的习惯，如果文字中偶尔出现英文，像我这样的强迫症都不是每次都记得空格。那么该如何解决这个问题呢？如果你用过 Word，你会发现在中英文之间，会自动保持一点距离，也就是说软件设计者自动实现了中英文间的空格，并不需要我们在打字时额外留意。</p>

<p>考虑到朱萧木老师的身份，我给他做了如下的回复：</p>

<blockquote>
  <p>朱老师，作为一个贴心的产品经理，这一格不应该默认加在手机系统中么？参考<a href="http://t.cn/zOWs207">http://t.cn/zOWs207</a><br />
<a href="http://www.weibo.com/1645866217/AEXIFwGEZ">4 月 10 日 02:00</a></p>
</blockquote>

<p>注意我给他的参考链接，正是在 Octopress 下的实现方式，来自<a href="http://xoyo.name">肖之慰的博客</a>。参考他这篇《<a href="http://xoyo.name/2012/04/auto-spacing-for-octopress/">给中英文间加个空格</a>》，你可以实现像本博客一样的中英文自动空格。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>当然有些时候，一些插件的样式表放到 <code>sass/plugins</code> 目录下似乎更合逻辑。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (2)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-2.html/"/>
    <updated>2014-05-04T05:41:14+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-2</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">1. 页面相关设置</a>    <ul>
      <li><a href="#section-1">1.1 新建页面</a></li>
      <li><a href="#section-2">1.2 添加公益 404 页面</a></li>
      <li><a href="#section-3">1.3 添加页面和其他链接至导航栏</a></li>
    </ul>
  </li>
  <li><a href="#section-4">2. 主题汉化</a>    <ul>
      <li><a href="#section-5">2.1 汉化导航栏</a></li>
      <li><a href="#section-6">2.2 汉化移动设备导航栏</a></li>
      <li><a href="#section-7">2.3 汉化归档页面</a></li>
      <li><a href="#section-8">2.4 汉化侧边栏</a></li>
      <li><a href="#section-9">2.5 汉化其他部分</a></li>
    </ul>
  </li>
  <li><a href="#section-10">3. 网站底部</a></li>
  <li><a href="#section-11">4. 添加侧边栏</a></li>
  <li><a href="#section-12">5. 添加评论系统</a></li>
</ul>

<p>通过前面的教程，我们成功搭建起了自己的 Octopress 博客，并对博客框架做了基本配置。这已经可以算是一个真正意义上的个人博客了：1. 确实可以在互联网上看到；2. 文章有自己的署名；3. 甚至可以撰写有公式的科技文章。</p>

<p>但我们对于网站的个性化修改并没有结束：首先，网站整体显得很粗糙，很多必要的信息，比如作者简介，并没有呈现；其次，虽然我们对基本配置中涉及到的部分做了有限的汉化，但也正因为我们做了部分汉化，其余的英文部分显得更加不伦不类。针对这些问题，本文将继续我们「精益修改」之路。<!--more--></p>

<p>在正式进入主题之前，先给大家一个小技巧：我们可以先在终端执行命令 <code>sudo rake preview</code>，然后使用 <code>http://localhost:4000/</code> 这个网址对我们的网站进行预览。然后我们再修改相关属性，在修改过程中，只要刷新页面就可以看到实时效果，等效果没有问题了，我们再执行 <code>sudo rake generate</code> 和 <code>sudo rake deploy</code> 发布到网络上。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>当然，最后还要记得使用 git 命令把修改后的源文件传到 Github 上。</p>

<h2 id="section">1. 页面相关设置</h2>

<h3 id="section-1">1.1 新建页面</h3>

<p>对于一个博客来说，仅仅有按时间发布的文章或日志是不够的，我们还需要在上面放一些其他页面。对于 Octopress 来说，系统默认只有两个页面，一个是 Blog 页面，上面按照时间顺序显示着我们发布的日志，另一个是 Archives (归档) 页面，也是我们的文章列表，只是用一种更为简洁的方式呈现，只有标题，时间，和分类描述。</p>

<p>但仅有这两个页面对很多人来说并不够，我们需要更多，比如在我的博客中，还有一个「<a href="http://shengmingzhiqing.com/article-series/">系列文章</a>」页面，里面放的是我成系列的文章，更加方便读者阅读，也方便自己查阅。那么像这样一个页面该如何生成呢？很简单，执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
sudo rake new_page[your-title]
</pre></div>
</div>
 </figure></notextile></div></p>

<p>然后你会发现，在你 <code>source</code>  文件夹下会出现一个名为 <code>your-title</code> 的文件夹，里面会有一个名为 index.md 的文件。还记得我们在「<a href="http://shengmingzhiqing.com/blog/octopress-lean-modification-1.html/#markdown-">精益修改 (1)</a>」中修改过 rakefile 里的 Markdown 文件的 后缀，其中有一行是 <code>new_page_ext</code>，这里改动的正式新页面的后缀。</p>

<p>在你重新部署后，这个文件将会生成一个名为<code>index.html</code> 的文件。可以用以下链接来访问这个页面：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain]/your-title/
</pre></div>
</div>
 </figure></notextile></div></p>

<p>当然如果你现在访问的话，页面的标题将会是 “your title”，而内容是空白，这简直太合理了，因为我们真的就什么都没写。</p>

<p>那么该怎么修改页面的内容呢？不用我说你也知道，只要修改那个 <code>your-title</code> 文件夹下的 index.md 文件即可，具体方法和修改文章一样，在此我不再赘述。</p>

<p>当然有时候我们并不想让每个页面都生成一个新的文件夹，那么你可以考虑执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
sudo rake new_page[your-title/mylove.html]
</pre></div>
</div>
 </figure></notextile></div></p>

<p>这样你将在 <code>your-title</code> 文件夹下生成一个 mylove.html 的文件，部署后即可用以下地址访问：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain]/your-title/mylove.html
</pre></div>
</div>
 </figure></notextile></div></p>

<p>当你打开这些新页面文件的时候，你会发现和新文章类似的元数据：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>—
layout: page
title: “your-title”
date: 
comments: true
sharing: true
footer: true
—</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>如果你想让页面显示作者，可以在中间加一行 <code>author: </code> 后面接作者名字即可。顺便说一说第一行的 <code>layout: </code> 属性，指的是这个页面用什么样的布局来显示。比如这里是页面布局，之前我们发的文章是 post 布局。具体什么布局是什么样子，通过 <code>source/_layout</code> 这个文件夹下的文件来定义。如果你有一点点模仿能力，你可以根据里面已有的文件，设计出自己的布局。</p>

<p>和生成新文章一样，你可以自己在相应的文件夹下新建 Markdown 文件来生成相应的页面，并不是一定要用命令行的方式实现。当然，记得要给文件添加上面的元数据。</p>

<h3 id="section-2">1.2 添加公益 404 页面</h3>

<p>对于一个网站来说，有一个页面我们很少会注意到，那就是这个网站的 404 页面——当网站找不到用户访问的页面（通常是不存在）时的替代页面。</p>

<p>这个页面对我们来说并不重要，但却是经常被访问到的页面之一。很多聪明人就想到了这一点：我们可以用它来做公益。你可以试着访问以下我的 404 页面：<a href="http://shengmingzhiqing.com/404">http://shengmingzhiqing.com/404</a>，你会发现一条寻人的公益广告。那么这是如何实现的呢？</p>

<p>首先在 <code>source</code> 文件夹下新建一个 404.md 页面文件，然后到 <a href="http://notfound.org/">http://notfound.org/</a> 这里复制粘贴相应的代码即可。</p>

<p>当然如果你更愿意用中文的产品，可以考虑益云的公益 404 项目，我的<a href="http://haohailong.net/">另一个博客</a>用的就是这个方案。不过益云生成的页面并不是响应式设计<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，所以手机浏览效果比较差。</p>

<h3 id="section-3">1.3 添加页面和其他链接至导航栏</h3>

<p>我们现在知道了新页面的生成方式，知道了页面生成后的链接，你可以通过这个链接来访问，但你博客的读者却并不知道这个页面在哪里，因此我们需要给他一个快速找到这个页面的方式，毕竟我们不能把所有的页面都当成 404 页面。</p>

<p>你可以直接把链接放到文章中，和你插入别的超链接的方式没有任何区别。但很多时候我们会把一些重要页面的链接放在导航栏：</p>

<p>首先，请打开<code>source/_includes/custom/navigation.html</code> 这个文件，你会看到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/navigation.html </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span class="entity">&amp;lt;</span>ul class=&quot;main-navigation&quot;<span class="entity">&amp;gt;</span><span class="tag">&lt;/p&gt;</span>
<span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Blog<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/blog/archives</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Archives<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;p&gt;</span><span class="entity">&amp;lt;</span>/ul<span class="entity">&amp;gt;</span></pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>这里就是导航栏里所有链接的列表，你只需要依样画葫芦即可完成页面添加。比如你想把刚刚生成的 your-title 页面和 mylove 页面添加到导航栏中，你可以在第三行下面再加如下两行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/navigation.html </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>  <span class="entity">&amp;lt;</span>li<span class="entity">&amp;gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/your-title/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>your-title<span class="tag">&lt;/a&gt;</span><span class="entity">&amp;lt;</span>/li<span class="entity">&amp;gt;</span><span class="tag">&lt;/p&gt;</span>
<span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/your-title/mylove.html</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>mylove<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;p&gt;</span></pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>当然，我们也可以顺手汉化系统默认的两个页面，只要你把上面的 <code>Blog</code> 和 <code>Archives</code> 分别修改成你想要的信息，比如「首页」和「文章列表」，即可像本博客这样显示。</p>

<p>你也可以在这里添加站外链接，只需要把 <code>a href</code> 后面引号中的部分改为相应的网站链接即可。</p>

<p>有一点需要说明，这里出现的 <code>{{ root_url }}</code> 是你网站的根目录，一般而言就是你的主域名。比如对于我这个博客来说，只要这个链接在站内：<code>{{ root_url }}/page.html</code> 和 <code>http://shengmingzhiqing.com/page.html</code> 是一个意思。前者给出的是 page.html 相对于根目录的路径，后者给出的是在 <code>shengmingzhiqing.com</code> 这个目录下的路径。简单来说，前者是页面的相对路径，后者是页面的绝对路径。</p>

<p>一般而言，站内连接的使用原则是，能使用相对路径就不要使用绝对路径。 因为域名一旦变更，相对路径继续有效，绝对路径将依然指向原域名下的页面，这本来就不是我们的本本意，而如果原来的域名废弃了，链接将直接失效。最为直接的影响是，如果我们在一个指向页面的超链接中使用了绝对路径，我们本地预览页面中的链接与已经部署到网络上的页面链接将指向相同的内容，这样我们就无法通过这个已经设好的超链接来追踪页面的实时效果。</p>

<p>在本文后面的部分以及后面的文章中，我将使用 <code>{{ root_url }}</code> 来代替你网站的根目录（域名）。</p>

<h2 id="section-4">2. 主题汉化</h2>

<p>之前在设置各种属性的时候，我们已经顺手汉化了一些内容，本节将继续其余的汉化工作。之所以到现在才系统性地对主题进行汉化，是因为通过前面的设置和修改，与博客相关的基本内容都已经呈现在了我们面前，这样我们可以一次性把所有的需要汉化的内容都做好。</p>

<h3 id="section-5">2.1 汉化导航栏</h3>

<p>在给导航栏添加页面连接时，我们已经完成了左侧链接部分的汉化，现在剩下的是导航栏右侧的搜索框和 RSS 订阅链接。这部分内容在 <code>source/_includes/navigation.html</code> 文件中，注意文件路径，与刚才我们修改的 navigation.html 文件不是一个文件。</p>

<p class="warning">在这里顺便说一句，通常只主张修改 <code>custom</code> 目录下的内容，因为这部分内容会覆盖掉主题默认的内容，这样可以在不影响原主题代码的情况下，完成我们想要的效果，同时保证了即使我们自己写的代码有问题，系统也有一个默认的代码可以执行。当然对于我们的汉化工作来说，这样不会有太大影响。</p>

<p>打开之后找到如下两行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre><span class="entity">&amp;lt;</span>li<span class="entity">&amp;gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ site.subscribe_rss }}</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">subscribe-rss</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">subscribe via RSS</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>RSS<span class="tag">&lt;/a&gt;</span><span class="entity">&amp;lt;</span>/li<span class="entity">&amp;gt;</span>
  …
<span class="tag">&lt;input</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">search</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">q</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">results</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">0</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">placeholder</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Search</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span></pre></div>
</div>
 </figure></notextile></div></p>

<p>把其中的 “subscribe via RSS” 和 “Search” (“pacehoder=” 后面那个) 分别换成「订阅 RSS」和「搜索」即可。</p>

<h3 id="section-6">2.2 汉化移动设备导航栏</h3>

<p>Octopress 默认采用了响应式设计，也就是说会根据不同的浏览器和浏览工具自动调节页面显示效果。当你用非常窄的工具（比如手机）浏览时，导航栏会缩为一个下拉菜单，默认内容是 navigation…，要修改这个内容，请打开 <code>source/javascripts/octopress.js</code> 文件，把第四行的 navigation 改为「网站导航」即可。</p>

<h3 id="section-7">2.3 汉化归档页面</h3>

<p>汉化完导航栏之后，我们打开归档页面 (http://{{ root_url }}/blog/archives)，你会发现这个页面上的日期和分类 (Posted in) 还是用英文显示的。要汉化这个内容，我们应该找到相应的页面文件。</p>

<p>不妨根据我们刚才新建页面时对目录的理解，推测一下它在哪个目录。没错，它应该是在 <code>source/blog/archives</code> 目录下的 <code>index.html</code> 文件。但我们打开这个文件之后，发现并没有日期和分类这两项，不过不要着急，仔细观察，你会发现页面的主体内容部分被如下一句代码所代替：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>{% include archive_post.html %}</pre></div>
</div>
 </figure></notextile></div></p>

<p>也就是说，真正出现文字的地方应该在 <code>archive_post.html</code> 这个文件中。那么哪里去找这个文件呢？你当然可以用搜索功能，但在这里，为了更好的了解目录结构，不妨再推测一下。<code>archive_post.html</code> 前面有个 <code>include</code>，通常用这个命令包含的网页，都在 <code>source/_include</code> 这个目录下。打开这个目录，你果然找到了 <code>archive_post.html</code> ，打开之后会找到如下两行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;time</span> <span class="attribute-name">datetime</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ post.date | datetime | date_to_xmlschema }}</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">pubdate</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>{{ post.date | date: &quot;<span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">month</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>%b<span class="tag">&lt;/span&gt;</span> <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">day</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>%d<span class="tag">&lt;/span&gt;</span> <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">year</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>%Y<span class="tag">&lt;/span&gt;</span>&quot;}}<span class="tag">&lt;/time&gt;</span>
…
<span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">categories</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>posted in {{ post.categories | category_links }}<span class="tag">&lt;/span&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>分别做如下替换：”%b” →「%m 月」；”%d” →「%d 日」；”posted in” →「分类：」。</p>

<h3 id="section-8">2.4 汉化侧边栏</h3>

<p>归档页汉化完之后，朝右看你会发现侧边栏有个 Recent posts，你当然明白是什么意思，但你更希望这个标题是汉语。</p>

<p>Octopress 所有侧边栏页面都在 <code>source/_includes/asides</code>文件夹下，在这里你找到 <code>recent_posts.html</code> 这个文件。将其中的 <code>Recent posts</code> 改为 <code>最新文章</code> 即可。</p>

<p>如果以后添加了其他的侧边栏，也通过同样的方式来汉化。</p>

<h3 id="section-9">2.5 汉化其他部分</h3>

<p>当你完成上面三步的时候，整个网站汉化工作基本上已经完成了，只是以后你可能会在添加其他内容，这是可能又需要重复一些汉化工作。那么该如何进行呢？</p>

<p>对于系统或主题已有的一些组件：</p>

<ol>
  <li>
    <p>如果要汉化页面，那么按照页面生成的规范找到页面源文件修改即可；</p>
  </li>
  <li>
    <p>如果出现 include 这样的语句，后面的文件一般会出现在 <code>source/_include</code> 目录下，当然也包括这个目录下的子目录，比如 <code>source/_include/custom</code> 目录；</p>
  </li>
  <li>
    <p>如果要汉化侧边栏，一般去 <code>source/_include/asides</code> 目录寻找相应文件；</p>
  </li>
  <li>
    <p>如果上述方式都无法找到文件，请在 <code>source</code> 文件夹下针对关键字搜索。</p>
  </li>
</ol>

<p>如果是新安装的插件：</p>

<ol>
  <li>
    <p>首先在新添加的文件中查找；</p>
  </li>
  <li>
    <p>如果上述方式都无法找到文件，请在 <code>source</code> 文件夹下针对关键字搜索。</p>
  </li>
</ol>

<p>以上的方法几乎可以解决所有和页面内容有关的问题，而不仅仅是汉化问题。</p>

<h2 id="section-10">3. 网站底部</h2>

<p>一般来说网站底部会有一些网站的描述信息，比如版权声明，网站主题，网站使用的系统等等，要修改这部分内容，直接打开 <code>source/_includes/custom/foot.html</code>修改相应部分即可。</p>

<h2 id="section-11">4. 添加侧边栏</h2>

<p>我们刚刚说过，所有的侧边栏页面都在 <code>source/_include/asides</code> 目录下，我们可以把我们想要的侧边栏工具放到这里。系统自带了一些侧边栏小工具，比如我们刚刚已经看到的 Recent posts。</p>

<p>如果我们想让系统自带的这些侧边栏工具显示出来的话，需要在 _config.yml 文件下作相应的设置。比如你想添加 pinboard 的小工具，在 _config.yml 中找到如下代码做相应修改即可：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># Pinboard</span>
<span class="key">pinboard_user</span>: <span class="comment">#在这里添加你的 pinboard 用户名</span>
<span class="key">pinboard_count</span>: <span class="string"><span class="content">3</span></span> <span class="comment">#这里的数字是默认现实的 pinboard 书签数量，可以任意修改</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>还有一行代码需要注意：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="key">default_asides</span>: <span class="string"><span class="content">[asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span></span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>这行代码中，后面给出的页面文件，都是默认显示在侧边栏的小工具，只要你进行了类似上面对 Pinboard 工具的设置，就会出现在侧边栏上。前后顺序代表了出现在侧边栏上的上下顺序，你可以根据需要做相应的修改。</p>

<p>如果你自己要添加新的侧边栏工具，也需要把文件目录加到这个列表中。</p>

<p>一般而言自行添加的侧边栏工具建议放到 <code>source/_include/custom/asides</code> 这个目录下。你会看到这个目录下主题默认已经有了 <code>about.html</code>，你可以直接修改此文件（包括汉化）来生成「关于」侧边栏。生成完之后，需要把 <code>custom/asides/about.html</code> 添加到上面的列表中，注意这个列表中的路径都是想对于 <code>source/_include/</code> 目录的路径。</p>

<h2 id="section-12">5. 添加评论系统</h2>

<p>到目前为止，我们都忽略了一个博客系统非常重要的组成部分，就是与读者的互动。这需要我们加入一个评论系统。Octopress 默认支持 Disqus 评论系统，你需要先到 disqus.com 注册一个账号。然后在 _config.yml 中找到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># Disqus Comments</span>
<span class="key">disqus_short_name</span>: 
<span class="key">disqus_show_comment_count</span>: <span class="string"><span class="content">false </span></span></pre></div>
</div>
 </figure></notextile></div></p>

<p>填入相关信息即可。</p>

<p>很多人会说 Disqus 评论系统在中国水土不服，如果你也是这样的观点，网上也有许多安装「多说」和「友言」评论系统的教程可供参考。对于我个人而言，我更愿意用 Disqus，毕竟这个博客是我的一个实验室，我愿意尝试原来的博客不一样的东西。</p>

<p>目前 Disqus 的提示文字并不支持简体中文，鉴于这一情况，我推荐你使用英文或者繁体中文作为评论框的提示语言。根据 Disqus 官方的一些说明，将会在不久的将来支持简体中文，到时候再切换也不迟。</p>

<p>你可能会惊讶于能在我的博客上看到简体中文的 Disqus 评论框，其实是这样的，Disqus 的旧版是支持简体中文的，新版的简体中文翻译工作正在进行，但他们并没有把简体中文的选项在系统中彻底抹去，可以通过审查元素的方式把这个选项调出来。但毕竟翻译没有完成，可能会在夹杂一些英文在系统当中，所以除非你像我一样想折腾一下，否则并不建议使用。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>这个技巧对主题和样式的修改有效，但对于一些插件，实现效果可能需要重新生成页面，并重新部署。不过总的来说这个预览功能非常实用。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>不要被这个唬人的术语吓住，其实就是原来的自适应设计的新名字。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
