<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：Octopress | 生命之氢]]></title>
  <link href="http://shengmingzhiqing.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://shengmingzhiqing.com/"/>
  <updated>2014-05-05T19:51:21+02:00</updated>
  <id>http://shengmingzhiqing.com/</id>
  <author>
    <name><![CDATA[郝海龙]]></name>
    <email><![CDATA[haohailong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (4)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-4.html/"/>
    <updated>2014-05-05T18:52:14+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-4</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#coderay-block-">1.  CodeRay Block 代码块插件</a>    <ul>
      <li><a href="#kramdown-coderay">1.1 安装 kramdown, CodeRay</a></li>
      <li><a href="#section">1.2 修改样式表</a></li>
      <li><a href="#section-1">1.3 使用方法</a></li>
    </ul>
  </li>
  <li><a href="#caption">2. 给图片添加说明 (Caption)</a>    <ul>
      <li><a href="#section-2">2.1 制作并添加插件</a></li>
      <li><a href="#section-3">2.2 修改样式表</a></li>
      <li><a href="#section-4">2.3 使用方法</a></li>
    </ul>
  </li>
  <li><a href="#fontawesome">3. 使用 FontAwesome</a></li>
</ul>

<h2 id="coderay-block-">1.  CodeRay Block 代码块插件</h2>

<p>用 Octopress 写博客的很多朋友需要在博客内容当中添加代码块，毕竟这是一个「为黑客而生的博客框架」。Octopress 除了可以使用 Markdown 语言默认的代码块实现方式之外，本身也集成了很强大的代码块 (Code Block) 插件，按照<a href="http://octopress.org/docs/plugins/codeblock/">官方的说明</a>调用即可，比如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>节选自比特币 Python API </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rv</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">validateaddress</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">rv</span><span class="o">.</span><span class="n">isvalid</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">“</span><span class="n">The</span> <span class="n">address</span> <span class="n">that</span> <span class="n">you</span> <span class="n">provided</span> <span class="ow">is</span> <span class="n">valid</span><span class="err">”</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">“</span><span class="n">The</span> <span class="n">address</span> <span class="n">that</span> <span class="n">you</span> <span class="n">provided</span> <span class="ow">is</span> <span class="n">invalid</span><span class="p">,</span> <span class="n">please</span> <span class="n">correct</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>官方的 Code Block 插件支持语法高亮，本身的显示效果也非常不错，可以与博客大背景的深色形成呼应。但如果你的文章中出现大量的代码块，黑色背景看起来可能不那么舒服。这时，你可能想要使用浅色系的代码块，比如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>节选自比特币 Python API </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
rv = conn.validateaddress(foo)
<span class="keyword">if</span> rv.isvalid:
    <span class="keyword">print</span> <span class="error">“</span>The address that you provided <span class="keyword">is</span> valid<span class="error">”</span>
<span class="keyword">else</span>:
    <span class="keyword">print</span> <span class="error">“</span>The address that you provided <span class="keyword">is</span> invalid, please correct<span class="error">”</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>最早看到这种风格的显示是在 <a href="http://blog.codebykat.com/2013/05/23/gorgeous-octopress-codeblocks-with-coderay/">Kat Hagan 的博客</a>，她在文章中介绍了一种新的语法高亮工具——<a href="http://coderay.rubychan.de">CodeRay</a>，使用这种工具即可实现上面浅色圆角的代码块。作者同时也是一位极具分享精神的 Web 开发者，为了方便大家使用 CodeRay，她还专门制作了一个可直接安装的 Octopress 插件。</p>

<p>但是她这个插件取消了 CodeRay 自带的行号功能，在当你需要指出某一行代码时，就非常不方便。为了解决这个问题，<a href="http://www.fritz-hut.com/2013/11/24/github-style-code-highlighting-for-octopress/">Jan Stevens</a> 在 Kat 的插件基础上，开发了可以添加行号的 CodeRay 插件，但为了适应他自己博客的风格，同时也写了新的样式表。</p>

<p>由于 Kat 用的是 Octopress 默认主题，从总体风格上而言，Kat 的插件样式更适合我们的博客，于是我尝试着用 Kat 的样式表配合 Jan 的插件使用，在代码块没有标题框 (Caption) 的情况下表现完美。但一旦加上标题框，问题就出现了：代码块主体部分与标题框的连接处出现了不必要的圆角，显得非常难看。为了解决这一问题，我在他们的基础上修改了 Coderay Block 插件，如果你需要，在这里：<a href="http://s.olo.la/iqLp">Octopress CodeRay Block</a>.</p>

<p>具体安装和使用方法如下：</p>

<h3 id="kramdown-coderay">1.1 安装 kramdown, CodeRay</h3>

<p>首先你需要在你的博客程序中安装 kramdown 和 CodeRay（如果你已经安装过，则可以跳过此步）：</p>

<p>在 <code>Gemfile</code> 中添加如下两行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
gem ‘kramdown’
gem ‘coderay’
</pre></div>
</div>
 </figure></notextile></div></p>

<p>在终端执行如下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
bundle install
</pre></div>
</div>
 </figure></notextile></div></p>

<p>然后修改 <code>_config.yml</code> 文件中相关内容如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">markdown</span>: <span class="string"><span class="content">kramdown</span></span>
<span class="key">kramdown</span>:
    <span class="key">use_coderay</span>: <span class="string"><span class="content">true</span></span>
    <span class="key">coderay</span>:
        <span class="key">coderay_line_numbers</span>: <span class="string"><span class="content">table</span></span>
        <span class="key">coderay_css</span>: <span class="string"><span class="content">class</span></span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>其中 <code>coderay_line_numbers: table</code> 表示激活 CodeRay 的行号功能。</p>

<h3 id="section">1.2 修改样式表</h3>

<p>把 <code>/sass/custom/_coderay.scss</code> 文件复制到你自己的 <code>/sass/custom/</code> 文件夹下。</p>

<p>把 <code>/sass/custom/_styles.scss</code> <strong>文件中的代码</strong>添加到你自己的 <code>/sass/custom/_styles.scss</code>文件夹中。</p>

<p>安装完成。</p>

<h3 id="section-1">1.3 使用方法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
{ <span class="string"><span class="delimiter">% </span><span class="content">coderay</span><span class="delimiter"> </span></span>[<span class="key">lang</span>:lang] [<span class="key">linenos</span>:<span class="predefined-constant">true</span>|<span class="predefined-constant">false</span>(default)] [title] [url] [link text] % }
代码片段
{ <span class="string"><span class="delimiter">% </span><span class="content">endcoderay</span><span class="delimiter"> </span></span>% }
</pre></div>
</div>
 </figure></notextile></div></p>

<p>你可以看到这个使用方法与官方的 CodeBlock 插件非常像，其中：<code>lang:</code> 定义了代码的语言，<code>linenos:</code> 定义了是否显示行号（默认不显示），<code>title</code> 是代码框标题，<code>url</code> 是链接，<code>link text</code> 是链接文本。</p>

<h2 id="caption">2. 给图片添加说明 (Caption)</h2>

<p>在我们发布文章的时候，难免会插入图片。你可以把你想插入的图片（比如 dream.jpg）放到 <code>source/images/</code> 文件夹下。重新生成部署站点之后，图片的地址为 <code>{{ root_url }}/source/images/dream.jpg</code>，当然你也可以给 images 文件夹下再添加其他文件夹，只要你加到图片最终的路径上即可。</p>

<p>具体使用图片时，官方自带了图片插件 (Image Tag)，使用非常方便，具体方法可以参考<a href="http://octopress.org/docs/plugins/image-tag/">官方说明</a>。但有时候，我们需要给图片添加说明 (Caption)，比如在我的文章「<a href="http://shengmingzhiqing.com/blog/why-enter-key-is-huiche-in-chinese.html/">为什么「Enter 键」要被翻译为「回车键」？</a>」中的第二张图。这时官方的插件就显得不够用了，参照 <a href="http://blog.zerosharp.com/image-captions-for-octopress/"><em>Image Captions for Octopress</em></a> , 我们可以按如下步骤实现想要的功能：</p>

<h3 id="section-2">2.1 制作并添加插件</h3>

<p>首先新建一个文本文件，复制如下代码，另存为 <code>image_caption_tag.rb</code> 文件，注意要使用 .rb 后缀。然后再把这个文件放到 <code>plugins</code> 目录下。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>plugins/image_caption_tag.rb </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># Title: Image tag with caption for Jekyll</span>
<span class="comment"># Description: Easily output images with captions&lt;/p&gt;</span>

&lt;p&gt;<span class="keyword">module</span> <span class="class">Jekyll</span>&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;class CaptionImageTag &amp;lt; Liquid::Tag
    @img = nil
    @title = nil
    @class = ‘’
    @width = ‘’
    @height = ‘’&lt;</span><span class="delimiter">/</span></span>p&gt;

&lt;pre&gt;&lt;code&gt;<span class="keyword">def</span> <span class="function">initialize</span>(tag_name, markup, tokens)
  <span class="keyword">if</span> markup =~ <span class="regexp"><span class="delimiter">/</span><span class="content">(</span><span class="char">\S</span><span class="content">.*</span><span class="char">\s</span><span class="content">+)?(https?:</span><span class="char">\/</span><span class="char">\/</span><span class="content">|</span><span class="char">\/</span><span class="content">)(</span><span class="char">\S</span><span class="content">+)(</span><span class="char">\s</span><span class="content">+</span><span class="char">\d</span><span class="content">+</span><span class="char">\s</span><span class="content">+</span><span class="char">\d</span><span class="content">+)?(</span><span class="char">\s</span><span class="content">+.+)?</span><span class="delimiter">/</span><span class="modifier">i</span></span>
    <span class="instance-variable">@class</span> = <span class="global-variable">$1</span> || <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
    <span class="instance-variable">@img</span> = <span class="global-variable">$2</span> + <span class="global-variable">$3</span>
    <span class="keyword">if</span> <span class="global-variable">$5</span>
      <span class="instance-variable">@title</span> = <span class="global-variable">$5</span>.strip
    <span class="keyword">end</span>
    <span class="keyword">if</span> <span class="global-variable">$4</span> =~ <span class="regexp"><span class="delimiter">/</span><span class="char">\s</span><span class="content">*(</span><span class="char">\d</span><span class="content">+)</span><span class="char">\s</span><span class="content">+(</span><span class="char">\d</span><span class="content">+)</span><span class="delimiter">/</span></span>
      <span class="instance-variable">@width</span> = <span class="global-variable">$1</span>
      <span class="instance-variable">@height</span> = <span class="global-variable">$2</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
  <span class="keyword">super</span>
<span class="keyword">end</span>

<span class="keyword">def</span> <span class="function">render</span>(context)
  output = <span class="keyword">super</span>
  <span class="keyword">if</span> <span class="instance-variable">@img</span>
    <span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;lt;span class='</span><span class="inline"><span class="inline-delimiter">#{</span>(<span class="string"><span class="delimiter">'</span><span class="content">caption-wrapper </span><span class="delimiter">'</span></span> + <span class="instance-variable">@class</span>).rstrip<span class="inline-delimiter">}</span></span><span class="content">'&amp;gt;</span><span class="delimiter">&quot;</span></span> +
      <span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;lt;img class='caption' src='</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@img</span><span class="inline-delimiter">}</span></span><span class="content">' width='</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@width</span><span class="inline-delimiter">}</span></span><span class="content">' height='</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@height</span><span class="inline-delimiter">}</span></span><span class="content">' title='</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@title</span><span class="inline-delimiter">}</span></span><span class="content">'&amp;gt;</span><span class="delimiter">&quot;</span></span> +
      <span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;lt;span class='caption-text'&amp;gt;</span><span class="inline"><span class="inline-delimiter">#{</span><span class="instance-variable">@title</span><span class="inline-delimiter">}</span></span><span class="content">&amp;lt;/span&amp;gt;</span><span class="delimiter">&quot;</span></span> +
    <span class="string"><span class="delimiter">&quot;</span><span class="content">&amp;lt;/span&amp;gt;</span><span class="delimiter">&quot;</span></span>
  <span class="keyword">else</span>
    <span class="string"><span class="delimiter">&quot;</span><span class="content">Error processing input, expected syntax: &lt;img class=</span><span class="delimiter">&quot;</span></span>[<span class="keyword">class</span> <span class="class">name</span>(s)]<span class="string"><span class="delimiter">&quot;</span><span class="content"> src=</span><span class="delimiter">&quot;</span></span>/url/to/image<span class="string"><span class="delimiter">&quot;</span><span class="content"> title=</span><span class="delimiter">&quot;</span></span>[width height] [title text]<span class="string"><span class="delimiter">&quot;</span><span class="content"> &gt;</span><span class="delimiter">&quot;</span></span>
  <span class="keyword">end</span>
<span class="keyword">end</span>   <span class="keyword">end</span> <span class="keyword">end</span>
&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">code&gt;&lt;</span><span class="delimiter">/</span></span>pre&gt;

&lt;p&gt;<span class="constant">Liquid</span>::<span class="constant">Template</span>.register_tag(‘imgcap’, <span class="constant">Jekyll</span>::<span class="constant">CaptionImageTag</span></pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="section-3">2.2 修改样式表</h3>

<p>在 <code>sass/base/_utilities.scss</code> 文件中添加如下几行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/base/_utilities.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="directive">@mixin</span> <span class="error">r</span><span class="error">e</span><span class="error">s</span><span class="error">e</span><span class="error">t</span><span class="error">-</span><span class="error">s</span><span class="error">h</span><span class="error">a</span><span class="error">d</span><span class="error">o</span><span class="error">w</span><span class="error">-</span><span class="error">b</span><span class="error">o</span><span class="error">x</span>() {
  <span class="directive">@include</span> <span class="error">s</span><span class="error">h</span><span class="error">a</span><span class="error">d</span><span class="error">o</span><span class="error">w</span><span class="error">-</span><span class="error">b</span><span class="error">o</span><span class="error">x</span>(<span class="float">0px</span>, <span class="float">0px</span>, <span class="float">0px</span>);
}</pre></div>
</div>
 </figure></notextile></div></p>

<p>最后，打开 <code>sass/partials/_blog.scss</code> 文件，作如下修改，其中减号表示删掉该行，加号表示新添该行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/partials/_blog.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
   <span class="tag">article</span> {
     <span class="key">font-size</span>: <span class="float">2.0em</span>; <span class="key">font-style</span>: <span class="value">italic</span>;
     <span class="key">line-height</span>: <span class="float">1.3em</span>;
   }
<span class="error">-</span>  <span class="tag">img</span>, <span class="tag">video</span>, <span class="class">.flash-video</span> {
+  <span class="key">img</span>, <span class="key">video</span>, .<span class="key">flash-video</span>, .<span class="key">caption-wrapper</span> {
     <span class="directive">@extend</span> .<span class="key">flex-content</span>;
     <span class="directive">@extend</span> .<span class="key">basic-alignment</span>;
     <span class="directive">@include</span> <span class="key">shadow-box</span>;
+    <span class="error">&amp;</span><span class="key">amp</span>;.<span class="key">caption</span> {
+      <span class="directive">@include</span> <span class="key">reset-shadow-box</span>;
+    }
+  }
+  .<span class="key">caption-wrapper</span> {
+    <span class="key">display</span>: <span class="value">inline-block</span>;
+    <span class="key">margin-bottom</span>: <span class="float">10px</span>;
+    .<span class="key">caption-text</span> {
+      <span class="key">background</span>: <span class="color">#fff</span>;
+      <span class="key">text-align</span>: <span class="value">center</span>;
+      <span class="key">font-size</span>: <span class="float">.8em</span>;
+      <span class="key">color</span>: <span class="color">#666</span>;
+      <span class="key">display</span>: <span class="value">block</span>;
+    }
   }
   <span class="key">video</span>, .<span class="key">flash-video</span> { <span class="key">margin</span>: <span class="float">0</span> <span class="value">auto</span> <span class="float">1.5em</span>; }
   <span class="key">video</span> { <span class="key">display</span>: <span class="value">block</span>; <span class="key">width</span>: <span class="float">100%</span>; }</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="section-4">2.3 使用方法</h3>

<p>按照如下代码将图片插入文中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&lt;span <span class="keyword">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">caption-wrapper</span><span class="delimiter">'</span></span>&gt;&lt;img <span class="keyword">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">caption</span><span class="delimiter">'</span></span> src=<span class="string"><span class="delimiter">'</span><span class="content">/right]</span><span class="delimiter">'</span></span> width=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span> height=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span> title=<span class="string"><span class="delimiter">'</span><span class="content">[url] [caption] [width] [height] [title text] [alt text]</span><span class="delimiter">'</span></span>&gt;&lt;span <span class="keyword">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">caption-text</span><span class="delimiter">'</span></span>&gt;[url] [caption] [width] [height] [title text] [alt text]&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">span&gt;&lt;</span><span class="delimiter">/</span><span class="modifier">s</span></span>pan&gt; 
</pre></div>
</div>
 </figure></notextile></div></p>

<p>其中，<code>[left/right]</code> 是表示图片显示在页面上的位置，<code>[url]</code> 是图片完整链接，<code>[caption]</code> 是图片说明，<code>[width]</code> 和 <code>[height]</code> 分别是图片的宽度和高度，<code>[title]</code> 是图片标题，<code>[alt text]</code> 是图片替代文字。</p>

<p>有必要区别一下 <code>[caption]</code>,  <code>[title]</code>, 和 <code>[alt text]</code> 三个图片属性。<code>[caption]</code> 指显示在图片下方的说明文字，<code>[title]</code> 指鼠标悬停在图片上时显示出来的文字，<code>[alt text]</code> 指图片无法加载时，该图片的位置所显示的文字。</p>

<h2 id="fontawesome">3. 使用 FontAwesome</h2>

<p>装饰网站和撰写文章，不可避免的要使用到一些 Logo 和图标，对于一个非设计专业人士来说，该如何轻松获取图标呢？这里有一个巨大的图标库 <a href="http://fortawesome.github.io/Font-Awesome/icons/">Font Awesome</a>，事实上，我博客导航栏和侧边栏使用的 Logo 就来自 Font Awesome.</p>

<p>要使用 Font Awesome，你只需要简单地在 <code>source/_includes/custom/head.html</code> 中添加如下一行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/head.html</span><a href='http://fortawesome.github.io/Font-Awesome/get-started/'>link</a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;link</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">stylesheet</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>安装工作就完成了。然后你看中哪个 Logo，直接输入官方的 Logo 代码，就可以让 Logo 出现在页面相应位置。比如你想显示照相机的 Logo：</p>

<i class="fa fa-camera-retro fa-5x"></i>

<p>你只需要输入如下代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
&lt;i class=&quot;fa fa-camera-retro fa-5x&quot; /&gt;</pre></div>
</div>
 </figure></notextile></div></p>

<p>有时候 Font Awesome 可能会出现与 kramdown 解析器相冲突的情况，导致全局样式发生变化，这是你只需要在 Logo 的代码前后分别添加 <code>{::nomarkdown}</code> 和 <code>{:/nomarkdown}</code>强制 kramdown 不去解析这段语句即可，比如上面的代码可以改为：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>

&lt;i class=&quot;fa fa-camera-retro fa-5x&quot;&gt;&lt;/i&gt;
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (3)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-3.html/"/>
    <updated>2014-05-04T13:38:26+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-3</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">1. 网站布局</a>    <ul>
      <li><a href="#section-1">1.1 修改框架宽度</a></li>
      <li><a href="#section-2">1.2 修改内容宽度</a></li>
    </ul>
  </li>
  <li><a href="#section-3">2. 页面字体</a></li>
  <li><a href="#section-4">3. 修改链接样式</a></li>
  <li><a href="#section-5">4. 给中英文间添加空格</a></li>
</ul>

<p>在主题的框架部署完成之后，我们的博客已经可以算是一个五脏俱全的个人网站了，下一步网站变成什么样子，主要看我们往里面加什么样的内容。但在你发表几篇文章之后，你可能就会发现，文字的呈现并不美观，这就需要我们去修改网站和文字的样式。当然，我们必须承认，由于各种各样的原因，同一个网站在不同的操作系统或者不同的浏览器下显示是完全不一样的。作为一个小博客这站长，只能尽我们所能去修改样式，但真的没有精力去保证适应所有的操作系统和所有的浏览器（尤其是 IE）。<!--more--></p>

<p>本文主要讲网站和文字样式的修改，主要工作就是要修改整个网站的样式表。 Octopress 的样式表放在 <code>sass</code> 目录下。秉承之前谈到的原则，在可能的情况下，我们尽量只修改 <code>sass/custom</code> 这个目录下的内容。</p>

<h2 id="section">1. 网站布局</h2>

<h3 id="section-1">1.1 修改框架宽度</h3>

<p>如果说两年多的学术生涯带给我什么对于排版格式方面的收获，那么就是我在使用 LaTeX 的过程中意识到，过宽的布局并不易于阅读。而 Octopress 默认的页面主体框架非常宽，也许对活动颈椎有好处，但我们读起来并不舒服。所以首先我们要缩减默认宽度。</p>

<p>打开 <code>sass/custom/_layout.scss</code> 这个文件，找到如下两行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_layout.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>//<span class="error">$</span><span class="tag">max-width</span>: <span class="float">1350px</span>;
<span class="error">…</span>
//<span class="error">$</span><span class="tag">sidebar-width-wide</span>: <span class="float">300px</span>;
</pre></div>
</div>
 </figure></notextile></div></p>

<p>你可以从字面意思看出这两行代码是什么意思，所以你只需要修改相应的数字就好了。以我的博客为例，整体框架的最宽宽度我设为 1000px，侧边栏最宽宽度我设为 260px。之所以称为最宽宽度，是因为网站会根据不同的显示设备自适应宽度。其他诸如最窄宽度，中等宽度，你也可以在这个文件中找到相应的代码，进行修改。</p>

<p>修改完之后，记得把这两行前面的 <code>//</code> 去掉，因为在样式表中，这个符号后面的内容默认是注释内容，会被自动忽略。比如，按照我的设置改完之后，这两行应该变为：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_layout.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="error">$</span><span class="tag">max-width</span>: <span class="float">1000px</span>;
<span class="error">…</span>
<span class="error">$</span><span class="tag">sidebar-width-wide</span>: <span class="float">260px</span>;
</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="section-2">1.2 修改内容宽度</h3>

<p>修改完框架宽度之后，我们可以预览一下效果，会发现，由于宽度变窄，文章内容距离框架的边界就显得过宽了，所以我们也要对文章内容的宽度进行修改。同样还是在刚才的 <code>sass/custom/_layout.scss</code> 文件，找到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_layout.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>//<span class="error">$</span><span class="tag">pad-wide</span>: <span class="float">55px</span>;
<span class="error">…</span>
//<span class="error">$</span><span class="tag">sidebar-pad-wide</span>: <span class="float">20px</span>;
</pre></div>
</div>
 </figure></notextile></div></p>

<p>这两行定义的是主栏和侧边栏的文字与边框最宽距离，改成你觉得适合的大小即可。当然如果你想修改「中等距离」和「最窄距离」，找到相应代码修改即可。</p>

<p>同样，记得去掉注释符号 <code>//</code> 。</p>

<p>内容宽度设置好之后，我们在插入列表时会发现一个问题：Octopress 的列表符号（或者编号）默认溢出左侧文字内容边界，以保证文字可以对齐。但我们缩小了文字与边框的距离，这样项目符号出现在这里就会显得非常拥挤。建议开启列表缩进功能：在 <code>sass/custom/_layout.scss</code> 中找到 <code>//$indented-lists: true;</code> 去掉注释符号 <code>//</code> 即可。</p>

<h2 id="section-3">2. 页面字体</h2>

<p>布局修改好之后，我们接着来修改文字字体。打开 <code>sass/custom/_font.scss</code> 这个文件，你会发现如下几行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/custom/_font.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>//<span class="error">$</span><span class="tag">sans</span>: <span class="error">“</span><span class="tag">Optima</span><span class="error">”</span>, <span class="tag">sans-serif</span>;
//<span class="error">$</span><span class="tag">serif</span>: <span class="error">“</span><span class="tag">Baskerville</span><span class="error">”</span>, <span class="tag">serif</span>;
//<span class="error">$</span><span class="tag">mono</span>: <span class="error">“</span><span class="tag">Courier</span><span class="error">”</span>, <span class="tag">monospace</span>;
//<span class="error">$</span><span class="tag">heading-font-family</span>: <span class="error">“</span><span class="tag">Verdana</span><span class="error">”</span>, <span class="tag">sans-serif</span>;
//<span class="error">$</span><span class="tag">header-title-font-family</span>: <span class="error">“</span><span class="tag">Futura</span><span class="error">”</span>, <span class="tag">sans-serif</span>;
//<span class="error">$</span><span class="tag">header-subtitle-font-family</span>: <span class="error">“</span><span class="tag">Futura</span><span class="error">”</span>, <span class="tag">sans-serif</span></pre></div>
</div>
 </figure></notextile></div></p>

<p>由上至下定义了「衬线字体」「无衬线字体」「等宽字体」「标题字体」「网站主标题字体」「网站副标题字体」，在其中添加你喜欢的字体即可。字体的优先级是由先到后的。当然别忘了去掉注释符号。</p>

<p>对于英文字体，你还可以去 <a href="http://www.google.com/fonts/">Google Webfonts</a> 查找你喜欢的字体并使用，比如你想用 PT Serif 这个字体，你只需要在 <code>source/_includes/custom/head.html</code> 中添加如下代码即可：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/head.html </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;link</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">stylesheet</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/css</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span> </pre></div>
</div>
 </figure></notextile></div></p>

<p>顺便说一句，对于中文字体，为了照顾 Windows 用户，我们不得不在 font-family 中添加「微软雅黑」，因为一般人电脑里都会有。尽管这个字体并不好看，但其他 Windows 自带字体更难看。</p>

<p>字体选好之后，我们还需要调整不同文字字体的大小。这部分内容是在 <code>sass/base/_typography.scss</code> 这个样式表中定义的。注意它并不在 <code>sass/custom</code> 目录下。打开之后，你会看到对于不同内容字体样式的定义，比如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/base/_typography.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="tag">body</span> <span class="error">&amp;</span><span class="tag">gt</span>; <span class="tag">header</span> <span class="tag">h1</span> {
  <span class="key">font-size</span>: <span class="float">2.2em</span>;
  <span class="directive">@extend</span> .<span class="key">heading</span>;
  <span class="key">font-family</span>: <span class="error">$</span><span class="value">header-title-font-family</span>;
  <span class="key">font-weight</span>: <span class="value">normal</span>;
  <span class="key">line-height</span>: <span class="float">1.2em</span>;
  <span class="key">margin-bottom</span>: <span class="float">0.6667em</span>;
}</pre></div>
</div>
 </figure></notextile></div></p>

<p>这部分定义的是一级标题的字体样式，其中 <code>font-size: 2.2em</code> 即为字体大小。其他文字的字体大小定义方式也与此类似。你可以直接修改这里的数字来更改文字大小，但秉承我们之前的原则，我们并不修改这个文件。复制 <code>sass/base/_typography.scss</code> 当中想要修改的部分，粘贴到 <code>sass/custom/_styles.scss</code> 这个文件中，然后在 <code>_sytle.scss</code> 这文件中修改即可生效。</p>

<p>这里顺便讲讲 Octopress 的样式表。其实真正定义最终呈现在页面上的效果的样式表是 <code>sass/screen.scss</code> 这个文件，打开之后你会发现：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/screen.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="directive">@import</span> <span class="error">“</span><span class="tag">compass</span><span class="error">”</span>;
<span class="directive">@include</span> <span class="tag">global-reset</span>;<span class="error">&lt;</span>/<span class="tag">p</span>&gt;

<span class="error">&lt;</span><span class="tag">p</span>&gt;<span class="directive">@import</span> <span class="error">“</span><span class="tag">custom</span>/<span class="tag">colors</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">custom</span>/<span class="tag">fonts</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">custom</span>/<span class="tag">layout</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">base</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">partials</span><span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">plugins</span>/<span class="error">&lt;</span><span class="tag">em</span>&gt;<span class="tag">*</span>/<span class="error">&lt;</span>/<span class="tag">em</span>&gt;<span class="error">”</span>;
<span class="directive">@import</span> <span class="error">“</span><span class="tag">custom</span>/<span class="tag">styles</span><span class="error">”</span>;</pre></div>
</div>
 </figure></notextile></div></p>

<p>几乎全文件都是 @import 语句，我们可以从字面意思猜出这个语句的意思。也就是说，我们修改的那些样式表，最终会导入这个样式表，然后实现对样式的改动。</p>

<p>如果你想新定义一些样式，事实上也可以新建一个样式表，然后在这里添加@import 语句导入 <code>sass/screen.scss</code> 即可。当然本身 @import 语句也可以嵌套，你甚至可以把你自己新建的样式表导入 <code>sass/custom/_styles.scss</code>，最终你的样式设置也会导入到 <code>sass/screen.scss</code>，因为 <code>sass/custom/_styles.scss</code> 本身也被导入了 <code>sass/screen.scss</code> 当中。这样无论我们定义什么样式，都可以只修改 <code>sass/custom</code> 目录中的内容。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2 id="section-4">3. 修改链接样式</h2>

<p>Octopress 默认超链接显示样式有下划线，对于中文来说，这条下划线会和文字挤在一起，不甚美观。打开 <code>sass/base/_theme.scss</code> 文件，找到这行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>sass/base/_theme.scss </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">a</span> {
  <span class="directive">@include</span> <span class="error">l</span><span class="error">i</span><span class="error">n</span><span class="error">k</span><span class="error">-</span><span class="error">c</span><span class="error">o</span><span class="error">l</span><span class="error">o</span><span class="error">r</span><span class="error">s</span>(<span class="error">$</span><span class="key">link-color</span>, <span class="error">$</span><span class="key">hover</span>: <span class="error">$</span><span class="value">link-color-hover</span>, <span class="error">$</span><span class="value">focus</span>: <span class="error">$</span><span class="value">link-color-hover</span>, <span class="error">$</span><span class="value">visited</span>: <span class="error">$</span><span class="value">link-color-visited</span>, <span class="error">$</span><span class="value">active</span>: <span class="error">$</span><span class="value">link-color-active</span>);
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>在花括号中添加一行 <code>text-decoration: none; </code> 。当然也可以把这段代码复制到 <code>sass/custom/_styles.scss</code> 中再做相应修改。</p>

<p>所有有关链接样式的修改，都只需要在相应的样式表中找到 <code>a { }</code> 这样的代码，修改花括号里面的内容即可。</p>

<h2 id="section-5">4. 给中英文间添加空格</h2>

<p>锤子科技的 UX 产品总监<a href="http://weibo.com/u/1842158375">@朱萧木</a> 老师前一段时间发了一条微博：</p>

<blockquote>
  <p>打字时，中英混排时，中文和英文之间应该空一格，这一格，就是逼格。<br />
<a href="http://www.weibo.com/1842158375/AEWZGogNT">4 月 10 日 00:09</a></p>
</blockquote>

<p>很多朋友看完之后，并不明白他到底是什么意思，那么为什么要在中英文间加空格呢？首先，这样确实要好看一些；其次，对于网页显示来说，如果中英文间不加空格，默认会把这个英文单词和它前后的汉字当成一个单词，所以不会再汉字和英文之间换行，如果有采用了两段对齐的格式，很有可能出现某行文字过于稀疏的问题，整体上依然不美观。</p>

<p>但我们在书写中文的时候，其实并没有在汉字之间加空格的习惯，如果文字中偶尔出现英文，像我这样的强迫症都不是每次都记得空格。那么该如何解决这个问题呢？如果你用过 Word，你会发现在中英文之间，会自动保持一点距离，也就是说软件设计者自动实现了中英文间的空格，并不需要我们在打字时额外留意。</p>

<p>考虑到朱萧木老师的身份，我给他做了如下的回复：</p>

<blockquote>
  <p>朱老师，作为一个贴心的产品经理，这一格不应该默认加在手机系统中么？参考<a href="http://t.cn/zOWs207">http://t.cn/zOWs207</a><br />
<a href="http://www.weibo.com/1645866217/AEXIFwGEZ">4 月 10 日 02:00</a></p>
</blockquote>

<p>注意我给他的参考链接，正是在 Octopress 下的实现方式，来自<a href="http://xoyo.name">肖之慰的博客</a>。参考他这篇《<a href="http://xoyo.name/2012/04/auto-spacing-for-octopress/">给中英文间加个空格</a>》，你可以实现像本博客一样的中英文自动空格。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>当然有些时候，一些插件的样式表放到 <code>sass/plugins</code> 目录下似乎更合逻辑。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (2)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-2.html/"/>
    <updated>2014-05-04T05:41:14+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-2</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">1. 页面相关设置</a>    <ul>
      <li><a href="#section-1">1.1 新建页面</a></li>
      <li><a href="#section-2">1.2 添加公益 404 页面</a></li>
      <li><a href="#section-3">1.3 添加页面和其他链接至导航栏</a></li>
    </ul>
  </li>
  <li><a href="#section-4">2. 主题汉化</a>    <ul>
      <li><a href="#section-5">2.1 汉化导航栏</a></li>
      <li><a href="#section-6">2.2 汉化移动设备导航栏</a></li>
      <li><a href="#section-7">2.3 汉化归档页面</a></li>
      <li><a href="#section-8">2.4 汉化侧边栏</a></li>
      <li><a href="#section-9">2.5 汉化其他部分</a></li>
    </ul>
  </li>
  <li><a href="#section-10">3. 网站底部</a></li>
  <li><a href="#section-11">4. 添加侧边栏</a></li>
  <li><a href="#section-12">5. 添加评论系统</a></li>
</ul>

<p>通过前面的教程，我们成功搭建起了自己的 Octopress 博客，并对博客框架做了基本配置。这已经可以算是一个真正意义上的个人博客了：1. 确实可以在互联网上看到；2. 文章有自己的署名；3. 甚至可以撰写有公式的科技文章。</p>

<p>但我们对于网站的个性化修改并没有结束：首先，网站整体显得很粗糙，很多必要的信息，比如作者简介，并没有呈现；其次，虽然我们对基本配置中涉及到的部分做了有限的汉化，但也正因为我们做了部分汉化，其余的英文部分显得更加不伦不类。针对这些问题，本文将继续我们「精益修改」之路。<!--more--></p>

<p>在正式进入主题之前，先给大家一个小技巧：我们可以先在终端执行命令 <code>sudo rake preview</code>，然后使用 <code>http://localhost:4000/</code> 这个网址对我们的网站进行预览。然后我们再修改相关属性，在修改过程中，只要刷新页面就可以看到实时效果，等效果没有问题了，我们再执行 <code>sudo rake generate</code> 和 <code>sudo rake deploy</code> 发布到网络上。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>当然，最后还要记得使用 git 命令把修改后的源文件传到 Github 上。</p>

<h2 id="section">1. 页面相关设置</h2>

<h3 id="section-1">1.1 新建页面</h3>

<p>对于一个博客来说，仅仅有按时间发布的文章或日志是不够的，我们还需要在上面放一些其他页面。对于 Octopress 来说，系统默认只有两个页面，一个是 Blog 页面，上面按照时间顺序显示着我们发布的日志，另一个是 Archives (归档) 页面，也是我们的文章列表，只是用一种更为简洁的方式呈现，只有标题，时间，和分类描述。</p>

<p>但仅有这两个页面对很多人来说并不够，我们需要更多，比如在我的博客中，还有一个「<a href="http://shengmingzhiqing.com/article-series/">系列文章</a>」页面，里面放的是我成系列的文章，更加方便读者阅读，也方便自己查阅。那么像这样一个页面该如何生成呢？很简单，执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
sudo rake new_page[your-title]
</pre></div>
</div>
 </figure></notextile></div></p>

<p>然后你会发现，在你 <code>source</code>  文件夹下会出现一个名为 <code>your-title</code> 的文件夹，里面会有一个名为 index.md 的文件。还记得我们在「<a href="http://shengmingzhiqing.com/blog/octopress-lean-modification-1.html/#markdown-">精益修改 (1)</a>」中修改过 rakefile 里的 Markdown 文件的 后缀，其中有一行是 <code>new_page_ext</code>，这里改动的正式新页面的后缀。</p>

<p>在你重新部署后，这个文件将会生成一个名为<code>index.html</code> 的文件。可以用以下链接来访问这个页面：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain]/your-title/
</pre></div>
</div>
 </figure></notextile></div></p>

<p>当然如果你现在访问的话，页面的标题将会是 “your title”，而内容是空白，这简直太合理了，因为我们真的就什么都没写。</p>

<p>那么该怎么修改页面的内容呢？不用我说你也知道，只要修改那个 <code>your-title</code> 文件夹下的 index.md 文件即可，具体方法和修改文章一样，在此我不再赘述。</p>

<p>当然有时候我们并不想让每个页面都生成一个新的文件夹，那么你可以考虑执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
sudo rake new_page[your-title/mylove.html]
</pre></div>
</div>
 </figure></notextile></div></p>

<p>这样你将在 <code>your-title</code> 文件夹下生成一个 mylove.html 的文件，部署后即可用以下地址访问：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain]/your-title/mylove.html
</pre></div>
</div>
 </figure></notextile></div></p>

<p>当你打开这些新页面文件的时候，你会发现和新文章类似的元数据：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>—
layout: page
title: “your-title”
date: 
comments: true
sharing: true
footer: true
—</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>如果你想让页面显示作者，可以在中间加一行 <code>author: </code> 后面接作者名字即可。顺便说一说第一行的 <code>layout: </code> 属性，指的是这个页面用什么样的布局来显示。比如这里是页面布局，之前我们发的文章是 post 布局。具体什么布局是什么样子，通过 <code>source/_layout</code> 这个文件夹下的文件来定义。如果你有一点点模仿能力，你可以根据里面已有的文件，设计出自己的布局。</p>

<p>和生成新文章一样，你可以自己在相应的文件夹下新建 Markdown 文件来生成相应的页面，并不是一定要用命令行的方式实现。当然，记得要给文件添加上面的元数据。</p>

<h3 id="section-2">1.2 添加公益 404 页面</h3>

<p>对于一个网站来说，有一个页面我们很少会注意到，那就是这个网站的 404 页面——当网站找不到用户访问的页面（通常是不存在）时的替代页面。</p>

<p>这个页面对我们来说并不重要，但却是经常被访问到的页面之一。很多聪明人就想到了这一点：我们可以用它来做公益。你可以试着访问以下我的 404 页面：<a href="http://shengmingzhiqing.com/404">http://shengmingzhiqing.com/404</a>，你会发现一条寻人的公益广告。那么这是如何实现的呢？</p>

<p>首先在 <code>source</code> 文件夹下新建一个 404.md 页面文件，然后到 <a href="http://notfound.org/">http://notfound.org/</a> 这里复制粘贴相应的代码即可。</p>

<p>当然如果你更愿意用中文的产品，可以考虑益云的公益 404 项目，我的<a href="http://haohailong.net/">另一个博客</a>用的就是这个方案。不过益云生成的页面并不是响应式设计<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，所以手机浏览效果比较差。</p>

<h3 id="section-3">1.3 添加页面和其他链接至导航栏</h3>

<p>我们现在知道了新页面的生成方式，知道了页面生成后的链接，你可以通过这个链接来访问，但你博客的读者却并不知道这个页面在哪里，因此我们需要给他一个快速找到这个页面的方式，毕竟我们不能把所有的页面都当成 404 页面。</p>

<p>你可以直接把链接放到文章中，和你插入别的超链接的方式没有任何区别。但很多时候我们会把一些重要页面的链接放在导航栏：</p>

<p>首先，请打开<code>source/_includes/custom/navigation.html</code> 这个文件，你会看到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/navigation.html </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span class="entity">&amp;lt;</span>ul class=&quot;main-navigation&quot;<span class="entity">&amp;gt;</span><span class="tag">&lt;/p&gt;</span>
<span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Blog<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/blog/archives</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Archives<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;p&gt;</span><span class="entity">&amp;lt;</span>/ul<span class="entity">&amp;gt;</span></pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>这里就是导航栏里所有链接的列表，你只需要依样画葫芦即可完成页面添加。比如你想把刚刚生成的 your-title 页面和 mylove 页面添加到导航栏中，你可以在第三行下面再加如下两行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/navigation.html </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>  <span class="entity">&amp;lt;</span>li<span class="entity">&amp;gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/your-title/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>your-title<span class="tag">&lt;/a&gt;</span><span class="entity">&amp;lt;</span>/li<span class="entity">&amp;gt;</span><span class="tag">&lt;/p&gt;</span>
<span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/your-title/mylove.html</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>mylove<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;p&gt;</span></pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>当然，我们也可以顺手汉化系统默认的两个页面，只要你把上面的 <code>Blog</code> 和 <code>Archives</code> 分别修改成你想要的信息，比如「首页」和「文章列表」，即可像本博客这样显示。</p>

<p>你也可以在这里添加站外链接，只需要把 <code>a href</code> 后面引号中的部分改为相应的网站链接即可。</p>

<p>有一点需要说明，这里出现的 <code>{{ root_url }}</code> 是你网站的根目录，一般而言就是你的主域名。比如对于我这个博客来说，只要这个链接在站内：<code>{{ root_url }}/page.html</code> 和 <code>http://shengmingzhiqing.com/page.html</code> 是一个意思。前者给出的是 page.html 相对于根目录的路径，后者给出的是在 <code>shengmingzhiqing.com</code> 这个目录下的路径。简单来说，前者是页面的相对路径，后者是页面的绝对路径。</p>

<p>一般而言，站内连接的使用原则是，能使用相对路径就不要使用绝对路径。 因为域名一旦变更，相对路径继续有效，绝对路径将依然指向原域名下的页面，这本来就不是我们的本本意，而如果原来的域名废弃了，链接将直接失效。最为直接的影响是，如果我们在一个指向页面的超链接中使用了绝对路径，我们本地预览页面中的链接与已经部署到网络上的页面链接将指向相同的内容，这样我们就无法通过这个已经设好的超链接来追踪页面的实时效果。</p>

<p>在本文后面的部分以及后面的文章中，我将使用 <code>{{ root_url }}</code> 来代替你网站的根目录（域名）。</p>

<h2 id="section-4">2. 主题汉化</h2>

<p>之前在设置各种属性的时候，我们已经顺手汉化了一些内容，本节将继续其余的汉化工作。之所以到现在才系统性地对主题进行汉化，是因为通过前面的设置和修改，与博客相关的基本内容都已经呈现在了我们面前，这样我们可以一次性把所有的需要汉化的内容都做好。</p>

<h3 id="section-5">2.1 汉化导航栏</h3>

<p>在给导航栏添加页面连接时，我们已经完成了左侧链接部分的汉化，现在剩下的是导航栏右侧的搜索框和 RSS 订阅链接。这部分内容在 <code>source/_includes/navigation.html</code> 文件中，注意文件路径，与刚才我们修改的 navigation.html 文件不是一个文件。</p>

<p class="warning">在这里顺便说一句，通常只主张修改 <code>custom</code> 目录下的内容，因为这部分内容会覆盖掉主题默认的内容，这样可以在不影响原主题代码的情况下，完成我们想要的效果，同时保证了即使我们自己写的代码有问题，系统也有一个默认的代码可以执行。当然对于我们的汉化工作来说，这样不会有太大影响。</p>

<p>打开之后找到如下两行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre><span class="entity">&amp;lt;</span>li<span class="entity">&amp;gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ site.subscribe_rss }}</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">subscribe-rss</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">subscribe via RSS</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>RSS<span class="tag">&lt;/a&gt;</span><span class="entity">&amp;lt;</span>/li<span class="entity">&amp;gt;</span>
  …
<span class="tag">&lt;input</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">search</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">q</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">results</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">0</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">placeholder</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Search</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span></pre></div>
</div>
 </figure></notextile></div></p>

<p>把其中的 “subscribe via RSS” 和 “Search” (“pacehoder=” 后面那个) 分别换成「订阅 RSS」和「搜索」即可。</p>

<h3 id="section-6">2.2 汉化移动设备导航栏</h3>

<p>Octopress 默认采用了响应式设计，也就是说会根据不同的浏览器和浏览工具自动调节页面显示效果。当你用非常窄的工具（比如手机）浏览时，导航栏会缩为一个下拉菜单，默认内容是 navigation…，要修改这个内容，请打开 <code>source/javascripts/octopress.js</code> 文件，把第四行的 navigation 改为「网站导航」即可。</p>

<h3 id="section-7">2.3 汉化归档页面</h3>

<p>汉化完导航栏之后，我们打开归档页面 (http://{{ root_url }}/blog/archives)，你会发现这个页面上的日期和分类 (Posted in) 还是用英文显示的。要汉化这个内容，我们应该找到相应的页面文件。</p>

<p>不妨根据我们刚才新建页面时对目录的理解，推测一下它在哪个目录。没错，它应该是在 <code>source/blog/archives</code> 目录下的 <code>index.html</code> 文件。但我们打开这个文件之后，发现并没有日期和分类这两项，不过不要着急，仔细观察，你会发现页面的主体内容部分被如下一句代码所代替：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>{% include archive_post.html %}</pre></div>
</div>
 </figure></notextile></div></p>

<p>也就是说，真正出现文字的地方应该在 <code>archive_post.html</code> 这个文件中。那么哪里去找这个文件呢？你当然可以用搜索功能，但在这里，为了更好的了解目录结构，不妨再推测一下。<code>archive_post.html</code> 前面有个 <code>include</code>，通常用这个命令包含的网页，都在 <code>source/_include</code> 这个目录下。打开这个目录，你果然找到了 <code>archive_post.html</code> ，打开之后会找到如下两行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;time</span> <span class="attribute-name">datetime</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ post.date | datetime | date_to_xmlschema }}</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">pubdate</span>=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>{{ post.date | date: &quot;<span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">month</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>%b<span class="tag">&lt;/span&gt;</span> <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">day</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>%d<span class="tag">&lt;/span&gt;</span> <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">year</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>%Y<span class="tag">&lt;/span&gt;</span>&quot;}}<span class="tag">&lt;/time&gt;</span>
…
<span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">categories</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>posted in {{ post.categories | category_links }}<span class="tag">&lt;/span&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>分别做如下替换：”%b” →「%m 月」；”%d” →「%d 日」；”posted in” →「分类：」。</p>

<h3 id="section-8">2.4 汉化侧边栏</h3>

<p>归档页汉化完之后，朝右看你会发现侧边栏有个 Recent posts，你当然明白是什么意思，但你更希望这个标题是汉语。</p>

<p>Octopress 所有侧边栏页面都在 <code>source/_includes/asides</code>文件夹下，在这里你找到 <code>recent_posts.html</code> 这个文件。将其中的 <code>Recent posts</code> 改为 <code>最新文章</code> 即可。</p>

<p>如果以后添加了其他的侧边栏，也通过同样的方式来汉化。</p>

<h3 id="section-9">2.5 汉化其他部分</h3>

<p>当你完成上面三步的时候，整个网站汉化工作基本上已经完成了，只是以后你可能会在添加其他内容，这是可能又需要重复一些汉化工作。那么该如何进行呢？</p>

<p>对于系统或主题已有的一些组件：</p>

<ol>
  <li>
    <p>如果要汉化页面，那么按照页面生成的规范找到页面源文件修改即可；</p>
  </li>
  <li>
    <p>如果出现 include 这样的语句，后面的文件一般会出现在 <code>source/_include</code> 目录下，当然也包括这个目录下的子目录，比如 <code>source/_include/custom</code> 目录；</p>
  </li>
  <li>
    <p>如果要汉化侧边栏，一般去 <code>source/_include/asides</code> 目录寻找相应文件；</p>
  </li>
  <li>
    <p>如果上述方式都无法找到文件，请在 <code>source</code> 文件夹下针对关键字搜索。</p>
  </li>
</ol>

<p>如果是新安装的插件：</p>

<ol>
  <li>
    <p>首先在新添加的文件中查找；</p>
  </li>
  <li>
    <p>如果上述方式都无法找到文件，请在 <code>source</code> 文件夹下针对关键字搜索。</p>
  </li>
</ol>

<p>以上的方法几乎可以解决所有和页面内容有关的问题，而不仅仅是汉化问题。</p>

<h2 id="section-10">3. 网站底部</h2>

<p>一般来说网站底部会有一些网站的描述信息，比如版权声明，网站主题，网站使用的系统等等，要修改这部分内容，直接打开 <code>source/_includes/custom/foot.html</code>修改相应部分即可。</p>

<h2 id="section-11">4. 添加侧边栏</h2>

<p>我们刚刚说过，所有的侧边栏页面都在 <code>source/_include/asides</code> 目录下，我们可以把我们想要的侧边栏工具放到这里。系统自带了一些侧边栏小工具，比如我们刚刚已经看到的 Recent posts。</p>

<p>如果我们想让系统自带的这些侧边栏工具显示出来的话，需要在 _config.yml 文件下作相应的设置。比如你想添加 pinboard 的小工具，在 _config.yml 中找到如下代码做相应修改即可：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># Pinboard</span>
<span class="key">pinboard_user</span>: <span class="comment">#在这里添加你的 pinboard 用户名</span>
<span class="key">pinboard_count</span>: <span class="string"><span class="content">3</span></span> <span class="comment">#这里的数字是默认现实的 pinboard 书签数量，可以任意修改</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>还有一行代码需要注意：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="key">default_asides</span>: <span class="string"><span class="content">[asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span></span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>这行代码中，后面给出的页面文件，都是默认显示在侧边栏的小工具，只要你进行了类似上面对 Pinboard 工具的设置，就会出现在侧边栏上。前后顺序代表了出现在侧边栏上的上下顺序，你可以根据需要做相应的修改。</p>

<p>如果你自己要添加新的侧边栏工具，也需要把文件目录加到这个列表中。</p>

<p>一般而言自行添加的侧边栏工具建议放到 <code>source/_include/custom/asides</code> 这个目录下。你会看到这个目录下主题默认已经有了 <code>about.html</code>，你可以直接修改此文件（包括汉化）来生成「关于」侧边栏。生成完之后，需要把 <code>custom/asides/about.html</code> 添加到上面的列表中，注意这个列表中的路径都是想对于 <code>source/_include/</code> 目录的路径。</p>

<h2 id="section-12">5. 添加评论系统</h2>

<p>到目前为止，我们都忽略了一个博客系统非常重要的组成部分，就是与读者的互动。这需要我们加入一个评论系统。Octopress 默认支持 Disqus 评论系统，你需要先到 disqus.com 注册一个账号。然后在 _config.yml 中找到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># Disqus Comments</span>
<span class="key">disqus_short_name</span>: 
<span class="key">disqus_show_comment_count</span>: <span class="string"><span class="content">false </span></span></pre></div>
</div>
 </figure></notextile></div></p>

<p>填入相关信息即可。</p>

<p>很多人会说 Disqus 评论系统在中国水土不服，如果你也是这样的观点，网上也有许多安装「多说」和「友言」评论系统的教程可供参考。对于我个人而言，我更愿意用 Disqus，毕竟这个博客是我的一个实验室，我愿意尝试原来的博客不一样的东西。</p>

<p>目前 Disqus 的提示文字并不支持简体中文，鉴于这一情况，我推荐你使用英文或者繁体中文作为评论框的提示语言。根据 Disqus 官方的一些说明，将会在不久的将来支持简体中文，到时候再切换也不迟。</p>

<p>你可能会惊讶于能在我的博客上看到简体中文的 Disqus 评论框，其实是这样的，Disqus 的旧版是支持简体中文的，新版的简体中文翻译工作正在进行，但他们并没有把简体中文的选项在系统中彻底抹去，可以通过审查元素的方式把这个选项调出来。但毕竟翻译没有完成，可能会在夹杂一些英文在系统当中，所以除非你像我一样想折腾一下，否则并不建议使用。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>这个技巧对主题和样式的修改有效，但对于一些插件，实现效果可能需要重新生成页面，并重新部署。不过总的来说这个预览功能非常实用。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>不要被这个唬人的术语吓住，其实就是原来的自适应设计的新名字。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (1)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-1.html/"/>
    <updated>2014-04-29T01:31:59+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-1</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">1. 永远的第二步</a></li>
  <li><a href="#section-1">2. 简要说明</a></li>
  <li><a href="#section-2">3. 新主题安装</a></li>
  <li><a href="#section-3">4. 基本配置</a>    <ul>
      <li><a href="#section-4">4.1 域名，网站标题，作者</a></li>
      <li><a href="#section-5">4.2 日期格式</a></li>
      <li><a href="#section-6">4.3 文章链接形式</a></li>
      <li><a href="#section-7">4.4 分类目录前缀</a></li>
      <li><a href="#section-8">4.5「继续阅读」按钮</a></li>
      <li><a href="#markdown-">4.6 修改 Markdown 文件后缀</a></li>
      <li><a href="#markdown--1">4.7 修改默认 Markdown 解释器</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">1. 永远的第二步</h2>

<p>通过「<a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">Octopress 搭建流程 – Github Pages</a>」，我们搭建好了自己的 Octopress 博客并发布了第一篇文章。</p>

<p>但这只是我们 Octopress 博客之旅的第一步，说白了，我们不过是把别人已经做好的程序成功的安装到了网上，并且试运行了一下。但博客终究是个讲究个性化的地方，个性化就意味着需要自己动手进行修改。我们的第二步就是对安装好的 Octopress 做个性化修改。<!--more--></p>

<p><a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">前面我们说过</a>，对于实用性的知识，我向来秉承「精益学习」的态度。对我来说，「如何对一个网站进行个性化修改」正是这类知识，所以我们这篇文章的标题叫做「Octopress 精益修改」。</p>

<p>我们会在使用博客系统的过程中不断发现问题，发现一例解决一例即可，如果一次性发现了很多个问题，可以做一个<a href="http://shengmingzhiqing.com/ebauche/octopress/task-list.html">任务列表</a>逐一解决。如果遇到暂时解决不了的问题，那么恭喜你，这是你学习的机会，不妨就花一段时间学学相关知识。</p>

<p>当然永远都会出现新的问题，我们的修改过程也就永远不会终止，所以我们的第二步是「永远的第二步」。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>为了行文简化，再说一点：本文中凡出现需要执行的命令，默认使用终端 (Terminal)。如不做特殊说明，请首先使用 <code>cd octopress</code> 命令进 <code>octopress</code> 文件夹，所出现的文件夹或者目录都以此目录为根目录。</p>

<h2 id="section-1">2. 简要说明</h2>

<p>对于博客系统的个性化修改，一般来说分为如下几个方面：</p>

<ul>
  <li>新主题安装：Octopress 本身有很多<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方主题</a>可以直接安装使用。</li>
  <li>基本配置：主要指博客作者，时间显示方式，目录层级关系等等。这部分信息主要通过 <code>_config.yml</code> 这个配置文件来修改。</li>
  <li>自定义主题模板：主要指顶部导航栏显示内容，侧边栏显示内容等等。这部分内容主要通过 <code>/source/_includes/custom</code> 这个目录下的相关文件来修改。</li>
  <li>插件安装：安装第三方插件以实现相应效果，比如侧边栏显示 Twitter 时间线等等。 主要与 <code>/plugins</code> 这个目录有关。</li>
  <li>样式修改：字体，配色等通过样式表修改的属性。主要通过修改 <code>/sass/custom/_styles.scss</code> 来实现。</li>
</ul>

<p>一般的 Octopress 教程会按照上面的列表分别进行讲解，而我们的修改方式是针对具体问题进行的，同一个问题可能会涉及到以上多方面的修改。这种分类讲解模式可能并不是很方便。所以我会把一些后期基本上不用做太多修改的，类别属性比较明显的放在前面单独讲，之后就按照单个问题来讲解。</p>

<h2 id="section-2">3. 新主题安装</h2>

<p>在你搭建博客的时候，Octopress 会为你安装默认的主题 Classic，但这个主题第一眼看上去很难说好看，所以可以考虑选择安装<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方主题</a>。</p>

<p>如果你能在上面的链接中找到满意的主题，按照主题的要求去安装部署即可。比如你喜欢 <a href="https://github.com/macjasp/cleanpress">CleanPress</a> 这款主题，你可执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
cd octopress
git clone git://github.com/macjasp/cleanpress.git .themes/cleanpress
rake install[‘cleanpress’]
rake generate
</pre></div>
</div>
 </figure></notextile></div></p>

<p>我个人看过很多主题，但最终还是用了简洁素雅的默认主题。我并不需要太多的装饰<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，只要版面布局符合基本审美要求即可。另外，我也喜欢这个浓浓的黑客范儿。</p>

<p>当然默认主题也有很多令人不满意的地方，好在我们还可以修改，不着急，慢慢来。</p>

<h2 id="section-3">4. 基本配置</h2>

<h3 id="section-4">4.1 域名，网站标题，作者</h3>

<p>当你打开搭建好的博客后，你会发现博客的标题是 My Octopress Blog，副标题是 A blogging framework for hackers.</p>

<p>当你把第一篇文章发布到博客的时候，你会发现文章底部显示 “posted by Your Name”，也就是说原本应该出现你名字的地方成了系统默认的两个英文单词 “Your Name”。</p>

<p>所有以上这些信息都可以通过基本配置文件 <code>_config.yml</code> 来修改。先在 <code>octopress</code> 文件夹下找到这个文件，用你喜欢的文本编辑器打开（我喜欢 TextMate 2），你会发现如下信息:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">url</span>: <span class="string"><span class="content">http://yoursite.com</span></span>  <span class="comment">#这里改为你网站的域名</span>
<span class="key">title</span>: <span class="string"><span class="content">My Octopress Blog</span></span>  <span class="comment">#这里改为你想要的网站标题</span>
<span class="key">subtitle</span>: <span class="string"><span class="content">A blogging framework for hackers.</span></span> <span class="comment">#这里改为你的博客副标题</span>
<span class="key">author</span>: <span class="string"><span class="content">Your Name</span></span> <span class="comment">#这里改为博客作者的名字，也就是你的名字</span>
<span class="key">simple_search</span>: <span class="string"><span class="content">https://www.google.com/search</span></span> <span class="comment">#这是默认搜索引擎，可以先不管</span>
<span class="key">description</span>: <span class="comment">#网站描述信息</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>按照我给出的 # 后面的提示信息做相应修改即可，请注意，诸如<code>url: </code>中的冒号必须是英文冒号，并且要符合英文标点符号使用规范：冒号后必须空格。</p>

<h3 id="section-5">4.2 日期格式</h3>

<p>我们暂且把 <code>_config.yml</code> 文件放到一边，再回头看博客主页，你会发现每条博客上面的日期和文章尾部的日期都是诸如 <code>Apr 28th 2014</code> 这样的格式。我们当然是想把它变成中文的「2014 年 4 月 28 日」这样的格式，那么再次回到 <code>_config.yml</code> 文件，顺着刚才那几行代码往下看，你会发现这样一行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">date_format</span>: <span class="string"><span class="content">“ordinal”</span></span> <span class="comment">#默认日期显示方式</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>请把其中的 <code>"ordinal"</code> 改为 <code>"%Y 年%-m 月%-d 日"</code>，并保存。</p>

<h3 id="section-6">4.3 文章链接形式</h3>

<p>回到博客，点开你发表的文章，这是你看一下地址栏，发现网址（也就是这篇文章的链接）是类似这样的形式：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain_name]/blog/2014/04/28/Post-Title/
</pre></div>
</div>
 </figure></notextile></div></p>

<p>对我们个人博客而言，这种层级显得太多，我个人推荐如下两种地址生成方式：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain_name]/blog/20140428/Post-Title.html/
http://[your_domain_name]/blog/Post-Title.html/ # 这也是本博的生成方式
</pre></div>
</div>
 </figure></notextile></div></p>

<p>怎么实现呢？接着回到<code>_config.yml</code> 文件，往下看，找到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">permalink</span>: <span class="string"><span class="content">/blog/:year/:month/:day/:title/</span></span> <span class="comment">#文章固定链接</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>按照如下方式修改（二者任选其一）并保存：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">permalink</span>: <span class="string"><span class="content">/blog/:year:month:day/:title.html/</span></span> <span class="comment">#实现第一种</span>
<span class="key">permalink</span>: <span class="string"><span class="content">/blog/:title.html/</span></span> <span class="comment">#实现第二种</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="section-7">4.4 分类目录前缀</h3>

<p>在你文章底部日期右边是该文章所属的分类，点击它，会显示该分类下所有的文章<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。但你发现该目录标题前有一个前缀 “Categories”，这当然没错，但我们希望它是汉语。</p>

<p>回到<code>_config.yml</code> 文件，添加下面一行代码并保存：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">category_title_prefix</span>: <span class="string"><span class="content">“分类：”</span></span> <span class="comment"># 修改分类前缀</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>理论上可以添加到任何位置，但为了显示直观，建议加到 <code>category_dir: blog/categories</code> 下一行。</p>

<h3 id="section-8">4.5「继续阅读」按钮</h3>

<p>如果你希望你的文章在首页显示摘要，点击类似「继续阅读」这样的按钮查看全文，可以在你的文章中插入 <code><!--more--></code>，这样在这个标记之前的内容会出现在首页。你可以试着在你的文章中插入这个标签，会发现首页会在这里出现一个<code>Read on &rarr;</code>这样的按钮，当然我们也希望他是汉语。</p>

<p>回到<code>_config.yml</code> 文件，找到这一行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">excerpt_link</span>: <span class="string"><span class="content">“Read on →”</span></span>  <span class="comment"># “Continue reading” link text at the bottom of excerpted articles</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>然后把引号中高亮显示的部分替换为你想要的文字，比如「阅读全文」，并保存。</p>

<p>修改到这一步，你肯定很想看看效果，现在执行如下命令，重新生成并部署页面：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
rake generate
rake deploy
</pre></div>
</div>
 </figure></notextile></div></p>

<p>看看博客，我们想要的效果都已经实现了吧。</p>

<h3 id="markdown-">4.6 修改 Markdown 文件后缀</h3>

<p>Octopress 默认日志文件后缀是 .markdown，但现在大多数 Markdown 文件的后缀是 .md，推荐使用这种更为简洁的后缀。</p>

<p>用文本编辑器打开 rakefile 文件，找到如下两行代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>rakefile </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
new_post_ext    = “markdown”  <span class="comment"># default new post file extension when using the new_post task</span>
new_page_ext    = “markdown”  <span class="comment"># default new page file extension when using the new_page task</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>改为：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>rakefile </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
new_post_ext    = “md”  <span class="comment"># 默认新日志文件后缀</span>
new_page_ext    = “md”  <span class="comment"># 默认新页面文件后缀</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>第二行是默认新页面文件后缀，如果不明白新页面具体指什么，后面的文章中会有讲解。</p>

<h3 id="markdown--1">4.7 修改默认 Markdown 解释器</h3>

<p>Octopress 默认的 Markdown 解释器是 rdiscount，个人更喜欢 <a href="http://kramdown.gettalong.org/quickref.html">kramdown</a>，支持 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide">Multi Markdown</a> 语法和 LaTeX，对于理工科博客 LaTeX 必不可少，而且据说 kramdown 更快，也是 Github 推荐的 Markdown 解释器。</p>

<p>首先用文本编辑器打开 <code>Gemfile</code> 文件，在文件末尾添加一行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Gemfile </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
gem ‘kramdown’
</pre></div>
</div>
 </figure></notextile></div></p>

<p>然后在终端 (Terminal) 执行如下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
sudo bundle install
</pre></div>
</div>
 </figure></notextile></div></p>

<p>回到<code>_config.yml</code> 文件，找到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">markdown</span>: <span class="string"><span class="content">rdiscount</span></span>
<span class="key">rdiscount</span>:
  <span class="key">extensions</span>:
    - <span class="string"><span class="content">autolink</span></span>
    - <span class="string"><span class="content">footnotes</span></span>
    - <span class="string"><span class="content">smart</span></span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>把其中的 <code>markdown: rdiscount</code> 改为 <code>markdown: kramdown</code> 并删掉下面几行。当然如果你想保留原来的代码，以便以后研究，可以考虑把原来这几行代码注释掉（对于  yml 文件，就是在前面加 # ），被注释掉的代码对文件没有任何影响，除了能让你看得更直观之外。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<p>为了能够显示数学公式，我们需要添加 <a href="http://www.mathjax.org">MathJax</a> 支持，打开<code>source/_includes/custom/head.html</code> 文件，添加如下代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>source/_includes/custom/head.html </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">&lt;!-- MathJax --&gt;</span>
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/x-mathjax-config</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">  MathJax.Hub.Config({
    <span class="key">tex2jax</span>: {
      <span class="key">inlineMath</span>: [ [<span class="string"><span class="delimiter">'</span><span class="content">$</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">$</span><span class="delimiter">'</span></span>], [<span class="string"><span class="delimiter">&quot;</span><span class="char">\\</span><span class="content">(</span><span class="delimiter">&quot;</span></span>,<span class="string"><span class="delimiter">&quot;</span><span class="char">\\</span><span class="content">)</span><span class="delimiter">&quot;</span></span>] ],
      <span class="key">processEscapes</span>: <span class="predefined-constant">true</span>
    }
  });</span>
<span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/x-mathjax-config</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">    MathJax.Hub.Config({
      <span class="key">tex2jax</span>: {
        <span class="key">skipTags</span>: [<span class="string"><span class="delimiter">'</span><span class="content">script</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">noscript</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">style</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">textarea</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">pre</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">code</span><span class="delimiter">'</span></span>]
      }
    });</span>
<span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/x-mathjax-config</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">    MathJax.Hub.Queue(<span class="keyword">function</span>() {
        <span class="keyword">var</span> all = MathJax.Hub.getAllJax(), i;
        <span class="keyword">for</span>(i=<span class="integer">0</span>; i &amp;lt; all.length; i += <span class="integer">1</span>) {
            all[i].SourceElement().parentNode.className += <span class="string"><span class="delimiter">'</span><span class="content"> has-jax</span><span class="delimiter">'</span></span>;
        }
    });</span>
<span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/javascript</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="tag">&lt;/script&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>这样你就可以是所有 LaTeX 语法在网页中输入公式了，比如</p>

<script type="math/tex; mode=display">
f'\left( x\right) = \lim _{x\rightarrow 0}\dfrac {f\left( x+\Delta x\right) - f\left( x\right)}{\Delta x}
</script>

<p>上面这个公式的源代码为：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$$
f’\left( x\right) = \lim _{x\rightarrow 0}\dfrac {f\left( x+\Delta x\right) - f\left( x\right)}{\Delta x}
$$
</pre></div>
</div>
 </figure></notextile></div></p>

<p>每次完成更新都记得把原始文件重新放到 Github 上，还记得命令吧：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
git add .
git commit -m “备注内容”
git push origin source
</pre></div>
</div>
 </figure></notextile></div></p>

<p>至此，我们博客的基本配置告一段落，你可以开始更新你的博客了。当然也许你注意到还有一些瑕疵，比如很多地方还是英文显示，不着急，先把问题记下来，等我 Octopress 系列的下一篇文章。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>想到这一节，我把博客的副标题也改为了「Hailong Hao’s Laboratory」，这里不仅是我的博客，也是用来试错的地方。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>这我留给了 <a href="http://haohailong.net/">http://haohailong.net/</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>当然如果你现在只有这一篇文章，也只会显示这一篇。<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>你会发现，之前在代码中的说明文字都是注释掉的。<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建流程 – Github Pages]]></title>
    <link href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/"/>
    <updated>2014-04-28T06:33:33+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages</id>
    <content type="html"><![CDATA[<p class="info">本文介绍如何在 Github Pages 上搭建 Octopress 博客，主要针对 IT 外行人士。科普文章用词未必精确，行家里手请不要太在意。主要参考 <a href="http://octopress.org/">Octopress 官网</a>安装教程。<br />
对了，我用的是 Mac，Windows 我不熟，我只知道 IE 浏览器。</p>

<ul id="markdown-toc">
  <li><a href="#octopress--github-pages">1. 为什么是 Octopress &amp; Github Pages?</a></li>
  <li><a href="#section">2. 准备工作</a>    <ul>
      <li><a href="#git-2">2.1 安装 git </a></li>
      <li><a href="#ruby-3">2.2 安装 Ruby </a></li>
      <li><a href="#github-">2.3 注册 Github 账号</a></li>
      <li><a href="#section-1">2.4 域名指向（可选）</a></li>
    </ul>
  </li>
  <li><a href="#octopress">3. 本地安装 Octopress</a></li>
  <li><a href="#octopress--github-pages-1">4. 将 Octopress 部署到 Github Pages</a>    <ul>
      <li><a href="#repository">4.1 新建库 (Repository)</a></li>
      <li><a href="#octopress--github-pages-2">4.2 将本地部署的 Octopress 发布到 Github Pages</a></li>
      <li><a href="#section-2">4.3 使用自己的域名（可选）</a></li>
    </ul>
  </li>
  <li><a href="#section-3">5. 发布新贴</a></li>
</ul>

<h2 id="octopress--github-pages">1. 为什么是 Octopress &amp; Github Pages?</h2>

<p>在做任何事情之前最好先问个为什么，尽管很多情况下未必有答案，但这个做法绝对有好处。用 Octopress 搭建博客，并托管到 Github Pages，撇除<a href="http://s.olo.la/KIoY">一些个人因素</a>之外，我想还有以下几点原因：<!--more--></p>

<ol>
  <li>
    <p>免费且独立。把 Octopress 博客系统搭建到 Github Pages 虽是免费，但不失独立性，即便 Github 全站关闭，你也将有一份本地全站备份，随时可以重新恢复。不必受托管商之气，而且还免费，如果你愿意，甚至可以自行插入广告挣钱。</p>
  </li>
  <li>
    <p>版本控制。写文章，建网站，做软件都需要修改，但有时候改完了又会后悔，如果有时光机就好了，Git 就是你的时光机。当然如果你不想了解这些看上去很唬人的 IT 名词，只是想写博客的话，请在需要的时候再研究这条的内容。</p>
  </li>
  <li>
    <p>相对其他托管到 Github 上的博客程序，Octopress 更加成熟易上手。打个比方，Jekyll 可以说是毛坯房，Hexo 和 Octopress 算是简装修，但相比 Hexo，Octopress 有更多装修范例和更多熟练的装修工人，更容易获取帮助。当然如果你只想住精装修的房子，那不得不花点钱上 WordPress 了。</p>
  </li>
  <li>
    <p>使用 Markdown。Markdown 是现在最为流行的轻量级标记语言，也是已故的天才 Aaron Swartz 留给世人最好的礼物，窃以为每个在互联网上发布文章的人都该掌握。</p>
  </li>
  <li>
    <p>按照官方的说法，Octopress 是个「为黑客设计的博客框架<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」，这很酷，你不觉得吗？</p>
  </li>
</ol>

<p>如果你之前没有写过博客，打算开始搭建自己第一个博客的话，其实也不妨试试 Octopress，免费还能学到东西，何乐而不为？</p>

<h2 id="section">2. 准备工作</h2>

<p>既然是为黑客设计的博客框架，安装起来肯定没有像普通应用程序那么简单，需要一些准备工作，但请相信我，并不复杂。</p>

<h3 id="git-2">2.1 安装 git <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p>既然要使用 Github，那么肯定首先要安装 Git，这个很简单：</p>

<ol>
  <li>
    <p><a href="http://git-scm.com/">点击这里</a>到 Git 官方网站。</p>
  </li>
  <li>
    <p>找到下图所示的下载链接，按照提示下载并安装。</p>

    <p><img src="http://s.olo.la/6JZw.png"></p>
  </li>
</ol>

<h3 id="ruby-3">2.2 安装 Ruby <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h3>

<p>先说句题外话，其实我是从 Ruby 语言才知道有<a href="http://zh.wikipedia.org/wiki/誕生石">诞生石</a>这种说法的。安装 Ruby 稍稍有些复杂，不过你只要按照以下步骤一步一步来就好了：</p>

<ul>
  <li>安装 HomeBrew</li>
</ul>

<p><a href="http://brew.sh/index_zh-cn.html">HomeBrew</a> 是一个非常有用的软件包管理系统，你可以把它想象成一个稍微抽象一点的 Mac App Store. 正如我们用 Mac App Store 来安装其他软件一样，我们这一步安装 HomeBrew 的目的是为了安装别的软件 (Ruby) 。当然 Mac App Store 和 HomeBrew 本身也是软件。</p>

<p>安装 HomeBrew 非常简单，打开终端 (Terminal)，执行以下命令（所谓「执行」即「输入+回车」，下同）：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
ruby -e “$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)”
</pre></div>
</div>
 </figure></notextile></div></p>

<p>如果在执行上如命令的时候弹出需要安装 Xcode Command Line Tool 的提示，直接点击安装即可。</p>

<p>安装好之后最好先执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
brew doctor
</pre></div>
</div>
 </figure></notextile></div></p>

<p>此条命令用来诊断安装中出现的问题并提示修复方法，如果没有问题则会显示：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Your system is ready to brew.
</pre></div>
</div>
 </figure></notextile></div></p>

<p>如遇问题，则按照提示处理，如果不懂如何处理可以先试着执行后面的步骤，如果能成功，则没有太大问题，毕竟我们只是想写博客而已。当然，做任何事情之前，备份是必须的。</p>

<ul>
  <li>使用 RVM 安装 Ruby</li>
</ul>

<p>执行以下命令安装 RVM，最新的稳定版 Ruby 也会随之安装：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
curl -L https://get.rvm.io | bash -s stable –ruby
</pre></div>
</div>
 </figure></notextile></div></p>

<p>为避免出现问题，可执行以下命令安装 Ruby 2.0.0: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
rvm install 2.0.0
rvm use 2.0.0
rvm rubygems latest
</pre></div>
</div>
 </figure></notextile></div></p>

<p>可以执行 <code>ruby --version</code> 命令来查看现在使用的 Ruby 版本，确保正在使用的是 Ruby 2.0.0</p>

<h3 id="github-">2.3 注册 Github 账号</h3>

<p>这个没什么好说的，早晚需要，去 <a href="http://github.com">http://github.com</a> 注册吧。</p>

<h3 id="section-1">2.4 域名指向（可选）</h3>

<p>如果你有自己的域名可用，可以在这时就配置好，毕竟解析起来需要一段时间，不如在我们搭建博客的时候让它开始，这样我们搭建完成后，基本上就可以直接用自有域名访问了。</p>

<p>如果你用的是顶级域名，比如 shengmingzhiqing.com, 请创建两个 A 记录 (A Record) 分别指向 <code>192.30.252.153</code> 和 <code>192.30.252.154</code>.</p>

<p>如果你使用二级域名，比如 blog.shengmingzhiqing.com, 请将该域名的 CNAME 指向 <code>[your_username].github.io</code>, 把其中的 [your_username]换成你自己在 Github 上的用户名。</p>

<p>如果你暂时没有域名，这一步可以暂时不用管。</p>

<h2 id="octopress">3. 本地安装 Octopress</h2>

<p>终于进入正题了。有了前面的准备工作，安装 Octopress 显得非常简单：</p>

<p>首先，打开终端 (Terminal) 执行如下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>git clone git://github.com/imathis/octopress.git octopress
cd octopress</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>上面的代码中，第一行的作用是把 Octopress 克隆到本地磁盘，将会在你的本地<code>~/user/yourusername</code> 这个文件夹下生成一个名为 octopress 的文件夹。如果你不知道 yourusername 是什么，其实就是你每次打开终端时，$ 这个符号前面显示的那玩意。</p>

<p>第二行的作用是进入这个新建的 octopress 文件夹。这一步可能会碰到一个「是否要信任 .rvmrc file」的问题，输入 yes. </p>

<p>然后我们开始安装 Octopress 所必需的依赖项(dependencies)，执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
gem install bundler
bundle install
</pre></div>
</div>
 </figure></notextile></div></p>

<p>然后执行如下命令安装默认主题：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
rake install
</pre></div>
</div>
 </figure></notextile></div></p>

<p>本地安装完毕。顺便说一句，所谓 rake 就是 ruby make 的缩写。</p>

<p>这时你执行如下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
rake preview
</pre></div>
</div>
 </figure></notextile></div></p>

<p>然后在浏览器内输入 <code>http://localhost:4000/</code>，即可看到我们搭建完成的博客。也许并不好看，但很令人开心，不是么？</p>

<p class="warning">注意，以上各步中如果出现权限问题（关键词 permission），无法完成（关键词 abort）的话，请在各命令前加上 <code>sudo+空格</code>，如有提示，请输入电脑登录密码。</p>

<h2 id="octopress--github-pages-1">4. 将 Octopress 部署到 Github Pages</h2>

<h3 id="repository">4.1 新建库 (Repository)</h3>

<p>用刚刚注册的 Github 账号登录，然后在点击页面右上角的加号，在弹出菜单中点击 <code>New Repository</code>: 如图所示</p>

<p><img src="http://s.olo.la/9TgX.png"></p>

<p>然后会跳转到一个新建库 (Create new repository) 的页面，在<code>Repository name</code>一栏填 <code>[your_username].github.io</code>，[your_username] 是你 Github 上的用户名，请务必按照此格式填写，否则无法在 Github 上部署博客。然后点击 <code>Create repository</code> 按钮提交。</p>

<p>如果一切顺利会出现一个页面，有一个 SSH 地址，形如 <code>git@github.com:[your_username]/[your_username].github.io.git</code>，下一步会用到。</p>

<h3 id="octopress--github-pages-2">4.2 将本地部署的 Octopress 发布到 Github Pages</h3>

<p>打开终端 (Terminal)，执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
cd octopress
rake setup_github_pages
</pre></div>
</div>
 </figure></notextile></div> </p>

<p>然后会出现一个问句，请把 4.1 步生成的 SSH 地址粘贴到这里，然后回车继续。</p>

<p>执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>rake generate
rake deploy
</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>第一行命令用来生成页面，第二行命令用来部署页面，可按照字面意思理解。如果理解不了，可以暂且不管。任何一步如果出现失败提示，请使用 <code>sudo</code>。</p>

<p>如果上述内容完成，即可使用 http://[your_username].github.io/ 访问页面，将会出现一个和在本地预览时相同的页面。</p>

<p>然后，不要忘了把源文件全部发布到 <code>source</code> 分支下面，再一次可以看不懂<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>，执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
git add .
git commit -m “备注内容”
git push origin source
</pre></div>
</div>
 </figure></notextile></div></p>

<h3 id="section-2">4.3 使用自己的域名（可选）</h3>

<p>如果你有自己的域名，并且想指向这个新博客的话，请首先确保执行了 2.4 节中的内容。如果没有执行，可以随时执行。</p>

<p>然后执行下面的命令，注意把 <code>your-domain.com</code> 换成你自己的域名。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
echo ‘your-domain.com’ » source/CNAME
</pre></div>
</div>
 </figure></notextile></div></p>

<p>然后再次执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
rake generate
rake deploy
</pre></div>
</div>
 </figure></notextile></div></p>

<p>这样你就可以使用自己的域名了。域名解析需要一段时间，如果没有马上生效，请不要着急。如果长时间没有生效，请确保完整执行了 2.4 节和本节内容。</p>

<h2 id="section-3">5. 发布新贴</h2>

<p>博客搭建好了，我们可以开始我们的第一贴了。那么怎么发布新贴呢？如果你真的想像个黑客一样写博客，我们可以继续使用我们的终端 (Terminal) 和命令行，执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
cd octopress
rake new_post[“Post Title”]
</pre></div>
</div>
 </figure></notextile></div></p>

<p>把其中的 Post Title 替换为你想写的文章标题。然后会有一个名为 <code>yyyy-mm-dd-Post-Title.markdown</code> 的文件在 <code>octopress/source/_posts</code> 目录下生成，其中 yyyy-mm-dd 是你当时的日期。然后执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
cd source/_posts/
vim yyyy-mm-dd-Post-Title.markdown
</pre></div>
</div>
 </figure></notextile></div></p>

<p>即可用 vim 编辑器编辑的刚才的文章了，好吧我知道你作为这篇文章的读者并不是一个能熟练使用 vim 的人，那么请在命令行输入 <code>:q</code>退出这个编辑器。如果你不想假装是个黑客的话，其实发布文章并不需要这么麻烦。</p>

<p>我们直接打开 <code>octopress/source/_posts</code> 文件夹，找到刚才生成的文件，用你喜欢的 Markdown 编辑器（免费的我推荐 <a href="http://mouapp.com">Mou</a>，收费的我推荐 <a href="http://bywordapp.com">Byword</a>）或者文本编辑器打开，对文章内容进行编辑。</p>

<p>打开文件后，你会发现文章开头有这么一段信息:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>—&lt;br /&gt;
layout: post&lt;br /&gt;
title: “Post Title”&lt;br /&gt;
date: yyyy-mm-dd hh:mm:ss&lt;br /&gt;
comments: true&lt;br /&gt;
categories: “”  
—</pre></td>
</tr></table>
 </figure></notextile></div></p>

<p>这其实是这篇文章的元数据：<code>layout</code> 暂时不要理会；<code>title</code> 是这篇文章显示在最终网页上的标题；<code>date</code> 部分是详细的文件生成时间，如 <code>2014-04-28 03:35:00</code>；<code>comment</code> 部分表示是否允许评论，目前显示是允许，如果想关闭评论，请改为 <code>false</code>；<code>categories</code> 指这篇文章的分类目录，请在后面引号中输入，如果没有该目录，则会自动生成。请不要删除这段信息，在这段信息下面开始你的文章内容。</p>

<p>这件事情给我们的启发是，以后发布文章，其实并不需要使用终端命令行生成文件。可以直接将自己写好的文章放到这个文件夹下面，当然请按照 <code>yyyy-mm-dd-Post-Title.markdown</code> 这样的文件格式命名，同时记得在文章前面添加元数据信息。这种做法生成的文章与上面的方法无异。如果你觉得添加元数据信息过于麻烦，推荐一个非常好用的工具：<a href="https://smilesoftware.com/TextExpander/index.html">TextExpander</a>。</p>

<p>在文章写好之后，使用命令行执行（仔细观察命令，像不像 generate 和 deploy 的合体？）：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
rake gen_deploy
</pre></div>
</div>
 </figure></notextile></div></p>

<p>同样，如果在本节中，任何命令执行失败，没有取得想要结果，请在前面加 <code>sudo</code>。是时候说一说 <code>sudo</code> 命令了，这其实是 super do 的缩写，之所以用它是因为，一般而言 Mac 上最高权限的<code>root</code> 账户默认是关闭的。我们自己的账户哪怕是管理员也在一些地方没有权限操作，super do 其实就是越权操作的意思，因此也往往需要输入密码，一般而言短时间内不需要输入第二次。</p>

<p>这样你的第一篇日志就发布出来了，恭喜你正式开通了基于 Octopress 的独立博客。</p>

<p>当然你会发现似乎文章作者不是你，界面是英文显示，整体排版效果差强人意等等问题，不着急，我们会在接下来的文章中讲解如何配置和修改 Octopress 博客。</p>

<p>对于实用性知识，我的向来的态度是「精益学习」，先把最核心最当紧的问题解决了，其余问题发现一例解决一例，不断在干中学，不断版本迭代。后面讲到如何配置修改 Octopress 博客的文章就秉承这一原则，先将遇到了什么问题，然后将如何寻找解决方法。</p>

<p>顺便说一句，我可能算是第一个提出「精益学习」这个概念的人吧，这个想法来自「<a href="http://zh.wikipedia.org/wiki/精益创业">精益创业</a>」。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>A blogging framework for hackers.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>什么是 Git？<a href="http://zh.wikipedia.org/wiki/Git">点这里</a>，看完你能了解个大概，这基本上已经够了，但如果还需更多知识， 就看看 wikipedia 和 Git 官网。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>什么是 Ruby？<a href="http://zh.wikipedia.org/wiki/Ruby">点这里</a>，看完你能了解个大概，这基本上已经够了，但如果还需更多知识，就看看 wikipedia 和 <a href="https://www.ruby-lang.org/en/">Ruby 官网</a>。<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>如果想看懂，这里有个快速上手指南：<a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a><a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
