<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：Octopress | 生命之氢]]></title>
  <link href="http://shengmingzhiqing.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://shengmingzhiqing.com/"/>
  <updated>2014-04-29T21:34:01+02:00</updated>
  <id>http://shengmingzhiqing.com/</id>
  <author>
    <name><![CDATA[郝海龙]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (1)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-1.html/"/>
    <updated>2014-04-29T01:31:59+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-1</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">永远的第二步</a></li>
  <li><a href="#section-1">简要说明</a></li>
  <li><a href="#section-2">新主题安装</a></li>
  <li><a href="#section-3">基本配置</a>    <ul>
      <li><a href="#section-4">域名，网站标题，作者</a></li>
      <li><a href="#section-5">日期格式</a></li>
      <li><a href="#section-6">文章链接形式</a></li>
      <li><a href="#section-7">分类目录前缀</a></li>
      <li><a href="#section-8">「继续阅读」按钮</a></li>
      <li><a href="#markdown-">修改 Markdown 文件后缀</a></li>
      <li><a href="#markdown--1">修改默认 Markdown 解释器</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">永远的第二步</h2>

<p>通过「<a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">Octopress 搭建流程 – Github Pages</a>」，我们搭建好了自己的 Octopress 博客并发布了第一篇文章。</p>

<p>但这只是我们 Octopress 博客之旅的第一步，说白了，我们不过是把别人已经做好的程序成功的安装到了网上，并且试运行了一下。但博客终究是个讲究个性化的地方，个性化就意味着需要自己动手进行修改。我们的第二步就是对安装好的 Octopress 做个性化修改。<!--more--></p>

<p><a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">前面我们说过</a>，对于实用性的知识，我向来秉承「精益学习」的态度。对我来说，「如何对一个网站进行个性化修改」正是这类知识，所以我们这篇文章的标题叫做「Octopress 精益修改」。</p>

<p>我们会在使用博客系统的过程中不断发现问题，发现一例解决一例即可，如果一次性发现了很多个问题，可以做一个<a href="http://shengmingzhiqing.com/ebauche/octopress/task-list.html">任务列表</a>逐一解决。如果遇到暂时解决不了的问题，那么恭喜你，这是你学习的机会，不妨就花一段时间学学相关知识。</p>

<p>当然永远都会出现新的问题，我们的修改过程也就永远不会终止，所以我们的第二步是「永远的第二步」。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>为了行文简化，再说一点：本文中凡出现需要执行的命令，默认使用终端 (Terminal)。如不做特殊说明，请首先使用 <code>cd octopress</code> 命令进 <code>octopress</code> 文件夹，所出现的文件夹或者目录都以此目录为根目录。</p>

<h2 id="section-1">简要说明</h2>

<p>对于博客系统的个性化修改，一般来说分为如下几个方面：</p>

<ul>
  <li>新主题安装：Octopress 本身有很多<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方主题</a>可以直接安装使用。</li>
  <li>基本配置：主要指博客作者，时间显示方式，目录层级关系等等。这部分信息主要通过 <code>_config.yml</code> 这个配置文件来修改。</li>
  <li>自定义主题模板：主要指顶部导航栏显示内容，侧边栏显示内容等等。这部分内容主要通过 <code>/source/_includes/custom</code> 这个目录下的相关文件来修改。</li>
  <li>插件安装：安装第三方插件以实现相应效果，比如侧边栏显示 Twitter 时间线等等。 主要与 <code>/plugins</code> 这个目录有关。</li>
  <li>样式修改：字体，配色等通过样式表修改的属性。主要通过修改 <code>/sass/custom/_styles.scss</code> 来实现。</li>
</ul>

<p>一般的 Octopress 教程会按照上面的列表分别进行讲解，而我们的修改方式是针对具体问题进行的，同一个问题可能会涉及到以上多方面的修改。这种分类讲解模式可能并不是很方便。所以我会把一些后期基本上不用做太多修改的，类别属性比较明显的放在前面单独讲，之后就按照单个问题来讲解。</p>

<h2 id="section-2">新主题安装</h2>

<p>在你搭建博客的时候，Octopress 会为你安装默认的主题 Classic，但这个主题第一眼看上去很难说好看，所以可以考虑选择安装<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方主题</a>。</p>

<p>如果你能在上面的链接中找到满意的主题，按照主题的要求去安装部署即可。比如你喜欢 <a href="https://github.com/macjasp/cleanpress">CleanPress</a> 这款主题，你可执行以下命令：</p>

<p>{% coderay %}
cd octopress
git clone git://github.com/macjasp/cleanpress.git .themes/cleanpress
rake install[‘cleanpress’]
rake generate
{% endcoderay %}</p>

<p>我个人看过很多主题，但最终还是用了简洁素雅的默认主题。我并不需要太多的装饰<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，只要版面布局符合基本审美要求即可。另外，我也喜欢这个浓浓的黑客范儿。</p>

<p>当然默认主题也有很多令人不满意的地方，好在我们还可以修改，不着急，慢慢来。</p>

<h2 id="section-3">基本配置</h2>

<h3 id="section-4">域名，网站标题，作者</h3>

<p>当你打开搭建好的博客后，你会发现博客的标题是 My Octopress Blog，副标题是 A blogging framework for hackers.</p>

<p>当你把第一篇文章发布到博客的时候，你会发现文章底部显示 “posted by Your Name”，也就是说原本应该出现你名字的地方成了系统默认的两个英文单词 “Your Name”。</p>

<p>所有以上这些信息都可以通过基本配置文件 <code>_config.yml</code> 来修改。先在 <code>octopress</code> 文件夹下找到这个文件，用你喜欢的文本编辑器打开（我喜欢 TextMate 2），你会发现如下信息:</p>

<p>{% coderay lang:yaml _config.yml %}
url: http://yoursite.com  #这里改为你网站的域名
title: My Octopress Blog  #这里改为你想要的网站标题
subtitle: A blogging framework for hackers. #这里改为你的博客副标题
author: Your Name #这里改为博客作者的名字，也就是你的名字
simple_search: https://www.google.com/search #这时默认搜索引擎，可以先不管
description: #网站描述信息
{% endcoderay %}</p>

<p>按照我给出的 # 后面的提示信息做相应修改即可，请注意，诸如<code>url: </code>中的冒号必须是英文冒号，并且要符合英文标点符号使用规范：冒号后必须空格。</p>

<h3 id="section-5">日期格式</h3>

<p>我们暂且把 <code>_config.yml</code> 文件放到一边，再回头看博客主页，你会发现每条博客上面的日期和文章尾部的日期都是诸如 <code>Apr 28th 2014</code> 这样的格式。我们当然是想把它变成中文的「2014 年 4 月 28 日」这样的格式，那么再次回到 <code>_config.yml</code> 文件，顺着刚才那几行代码往下看，你会发现这样一行：</p>

<p>{% coderay lang:yaml _config.yml %}
date_format: “ordinal” #默认日期显示方式
{% endcoderay %}</p>

<p>请把其中的 <code>"ordinal"</code> 改为 <code>"%Y 年%-m 月%e 日"</code>，并保存。</p>

<h3 id="section-6">文章链接形式</h3>

<p>回到博客，点开你发表的文章，这是你看一下地址栏，发现网址（也就是这篇文章的链接）是类似这样的形式：</p>

<p>{% coderay %}
http://[your_domain_name]/blog/2014/04/28/Post-Title/
{% endcoderay %}</p>

<p>对我们个人博客而言，这种层级显得太多，我个人推荐如下两种地址生成方式：</p>

<p>{% coderay %}
http://[your_domain_name]/blog/20140428/Post-Title.html/
http://[your_domain_name]/blog/Post-Title.html/ # 这也是本博的生成方式
{% endcoderay %}</p>

<p>怎么实现呢？接着回到<code>_config.yml</code> 文件，往下看，找到：</p>

<p>{% coderay lang:yaml _config.yml %}
permalink: /blog/:year/:month/:day/:title/ #文章固定链接
{% endcoderay %}</p>

<p>按照如下方式修改（二者任选其一）并保存：</p>

<p>{% coderay lang:yaml _config.yml %}
permalink: /blog/:year:month:day/:title.html/ #实现第一种
permalink: /blog/:title.html/ #实现第二种
{% endcoderay %}</p>

<h3 id="section-7">分类目录前缀</h3>

<p>在你文章底部日期右边是该文章所属的分类，点击它，会显示该分类下所有的文章<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。但你发现该目录标题前有一个前缀 “Categories”，这当然没错，但我们希望它是汉语。</p>

<p>回到<code>_config.yml</code> 文件，添加下面一行代码并保存：</p>

<p>{% coderay lang:yaml _config.yml %}
category_title_prefix: “分类：” # 修改分类前缀
{% endcoderay %}</p>

<p>理论上可以添加到任何位置，但为了显示直观，建议加到 <code>category_dir: blog/categories</code> 下一行。</p>

<h3 id="section-8">「继续阅读」按钮</h3>

<p>如果你希望你的文章在首页显示摘要，点击类似「继续阅读」这样的按钮查看全文，可以在你的文章中插入 <code><!--more--></code>，这样在这个标记之前的内容会出现在首页。你可以试着在你的文章中插入这个标签，会发现首页会在这里出现一个<code>Read on &rarr;</code>这样的按钮，当然我们也希望他是汉语。</p>

<p>回到<code>_config.yml</code> 文件，找到这一行：</p>

<p>{% coderay lang:yaml _config.yml %}
excerpt_link: “Read on →”  # “Continue reading” link text at the bottom of excerpted articles
{% endcoderay %}</p>

<p>然后把引号中高亮现实的部分替换为你想要的文字，比如「阅读全文」，并保存。</p>

<p>修改到这一步，你肯定很想看看效果，现在执行如下命令，重新生成并部署页面：</p>

<p>{% coderay %}
rake generate
rake deploy
{% endcoderay %}</p>

<p>看看博客，我们想要的效果都已经实现了吧。</p>

<h3 id="markdown-">修改 Markdown 文件后缀</h3>

<p>Octopress 默认日志文件后缀是 .markdown，但现在大多数 Markdown 文件的后缀是 .md，推荐使用这种更为简洁的后缀。</p>

<p>用文本编辑器打开 rakefile 文件，找到如下两行代码：</p>

<p>{% coderay lang:ruby rakefile %}
new_post_ext    = “markdown”  # default new post file extension when using the new_post task
new_page_ext    = “markdown”  # default new page file extension when using the new_page task
{% endcoderay %}</p>

<p>改为：</p>

<p>{% coderay lang:ruby rakefile %}
new_post_ext    = “md”  # 默认新日志文件后缀
new_page_ext    = “md”  # 默认新页面文件后缀
{% endcoderay %}</p>

<p>第二行是默认新页面文件后缀，如果不明白新页面具体指什么，后面的文章中会有讲解。</p>

<h3 id="markdown--1">修改默认 Markdown 解释器</h3>

<p>Octopress 默认的 Markdown 解释器是 rdiscount，个人更喜欢 <a href="http://kramdown.gettalong.org/quickref.html">kramdown</a>，支持 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide">Multi Markdown</a> 语法和 LaTeX，对于理工科博客 LaTeX 必不可少，而且据说 kramdown 更快，也是 Github 推荐的 Markdown 解释器。</p>

<p>首先用文本编辑器打开 <code>Gemfile</code> 文件，在文件末尾添加一行：</p>

<p>{% coderay lang:ruby Gemfile %}
gem ‘kramdown’
{% endcoderay %}</p>

<p>然后在终端 (Terminal) 执行如下命令：</p>

<p>{% coderay %}
sudo bundle install
{% endcoderay %}</p>

<p>回到<code>_config.yml</code> 文件，找到：</p>

<p>{% coderay lang:yaml _config.yml %}
markdown: rdiscount
rdiscount:
  extensions:
    - autolink
    - footnotes
    - smart
{% endcoderay %}</p>

<p>把其中的 <code>markdown: rdiscount</code> 改为 <code>markdown: kramdown</code> 并删掉下面几行。当然如果你想保留原来的代码，以便以后研究，可以考虑把原来这几行代码注释掉（对于  yml 文件，就是在前面加 # ），被注释掉的代码对文件没有任何影响，除了能让你看得更直观之外。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<p>为了能够显示数学公式，我们需要添加 <a href="http://www.mathjax.org">MathJax</a> 支持，打开<code>source/_includes/custom/head.html</code> 文件，添加如下代码：</p>

<p>{% coderay lang:html source/_includes/custom/head.html %}
<!-- MathJax -->
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    }
  });
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      }
    });
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Queue(function() {
        var all = MathJax.Hub.getAllJax(), i;
        for(i=0; i &lt; all.length; i += 1) {
            all[i].SourceElement().parentNode.className += ' has-jax';
        }
    });
</script>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
{% endcoderay %}</p>

<p>这样你就可以是所有 LaTeX 语法在网页中输入公式了，比如</p>

<script type="math/tex; mode=display">
f'\left( x\right) = \lim _{x\rightarrow 0}\dfrac {f\left( x+\Delta x\right) - f\left( x\right)}{\Delta x}
</script>

<p>上面这个公式的源代码为：</p>

<p>{% coderay %}
$$
f’\left( x\right) = \lim _{x\rightarrow 0}\dfrac {f\left( x+\Delta x\right) - f\left( x\right)}{\Delta x}
$$
{% endcoderay %}</p>

<p>每次完成更新都记得把原始文件重新放到 Github 上，还记得命令吧：</p>

<p>{% coderay %}
git add .
git commit -m “备注内容”
git push origin source
{% endcoderay %}</p>

<p>至此，我们博客的基本配置告一段落，你可以开始更新你的博客了。当然也许你注意到还有一些瑕疵，比如很多地方还是英文显示，不着急，先把问题记下来，等我 Octopress 系列的下一篇文章。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>想到这一节，我把博客的副标题也改为了「Hailong Hao’s Laboratory」，这里不仅是我的博客，也是用来试错的地方。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>这我留给了 <a href="http://haohailong.net/">http://haohailong.net/</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>当然如果你现在只有这一篇文章，也只会显示这一篇。<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>你会发现，之前在代码中的说明文字都是注释掉的。<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建流程 – Github Pages]]></title>
    <link href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/"/>
    <updated>2014-04-28T06:33:33+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#octopress--github-pages">1. 为什么是 Octopress &amp; Github Pages?</a></li>
  <li><a href="#section">2. 准备工作</a>    <ul>
      <li><a href="#git-2">2.1 安装 git </a></li>
      <li><a href="#ruby-3">2.2 安装 Ruby </a></li>
      <li><a href="#github-">2.3 注册 Github 账号</a></li>
      <li><a href="#section-1">2.4 域名指向（可选）</a></li>
    </ul>
  </li>
  <li><a href="#octopress">3. 本地安装 Octopress</a></li>
  <li><a href="#octopress--github-pages-1">4. 将 Octopress 部署到 Github Pages</a>    <ul>
      <li><a href="#repository">4.1 新建库 (Repository)</a></li>
      <li><a href="#octopress--github-pages-2">4.2 将本地部署的 Octopress 发布到 Github Pages</a></li>
      <li><a href="#section-2">4.3 使用自己的域名（可选）</a></li>
    </ul>
  </li>
  <li><a href="#section-3">5. 发布新贴</a></li>
</ul>

<p class="info">本文介绍如何在 Github Pages 上搭建 Octopress 博客，主要针对 IT 外行人士。科普文章用词未必精确，行家里手请不要太在意。主要参考 <a href="http://octopress.org/">Octopress 官网</a>安装教程。<br />
对了，我用的是 Mac，Windows 我不熟，我只知道 IE 浏览器。</p>

<h2 id="octopress--github-pages">1. 为什么是 Octopress &amp; Github Pages?</h2>

<p>在做任何事情之前最好先问个为什么，尽管很多情况下未必有答案，但这个做法绝对有好处。用 Octopress 搭建博客，并托管到 Github Pages，撇除<a href="http://s.olo.la/KIoY">一些个人因素</a>之外，我想还有以下几点原因：<!--more--></p>

<ol>
  <li>
    <p>免费且独立。把 Octopress 博客系统搭建到 Github Pages 虽是免费，但不失独立性，即便 Github 全站关闭，你也将有一份本地全站备份，随时可以重新恢复。不必受托管商之气，而且还免费，如果你愿意，甚至可以自行插入广告挣钱。</p>
  </li>
  <li>
    <p>版本控制。写文章，建网站，做软件都需要修改，但有时候改完了又会后悔，如果有时光机就好了，Git 就是你的时光机。当然如果你不想了解这些看上去很唬人的 IT 名词，只是想写博客的话，请在需要的时候再研究这条的内容。</p>
  </li>
  <li>
    <p>相对其他托管到 Github 上的博客程序，Octopress 更加成熟易上手。打个比方，Jekyll 可以说是毛坯房，Hexo 和 Octopress 算是简装修，但相比 Hexo，Octopress 有更多装修范例和更多熟练的装修工人，更容易获取帮助。当然如果你只想住精装修的房子，那不得不花点钱上 WordPress 了。</p>
  </li>
  <li>
    <p>使用 Markdown。Markdown 是现在最为流行的轻量级标记语言，也是已故的天才 Aaron Swartz 留给世人最好的礼物，窃以为每个在互联网上发布文章的人都该掌握。</p>
  </li>
  <li>
    <p>按照官方的说法，Octopress 是个「为黑客设计的博客框架<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」，这很酷，你不觉得吗？</p>
  </li>
</ol>

<p>如果你之前没有写过博客，打算开始搭建自己第一个博客的话，其实也不妨试试 Octopress，免费还能学到东西，何乐而不为？</p>

<h2 id="section">2. 准备工作</h2>

<p>既然是为黑客设计的博客框架，安装起来肯定没有像普通应用程序那么简单，需要一些准备工作，但请相信我，并不复杂。</p>

<h3 id="git-2">2.1 安装 git <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p>既然要使用 Github，那么肯定首先要安装 Git，这个很简单：</p>

<ol>
  <li>
    <p><a href="http://git-scm.com/">点击这里</a>到 Git 官方网站。</p>
  </li>
  <li>
    <p>找到下图所示的下载链接，按照提示下载并安装。</p>

    <p>{% img http://s.olo.la/6JZw.png %}</p>
  </li>
</ol>

<h3 id="ruby-3">2.2 安装 Ruby <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h3>

<p>先说句题外话，其实我是从 Ruby 语言才知道有<a href="http://zh.wikipedia.org/wiki/誕生石">诞生石</a>这种说法的。安装 Ruby 稍稍有些复杂，不过你只要按照以下步骤一步一步来就好了：</p>

<ul>
  <li>安装 HomeBrew</li>
</ul>

<p><a href="http://brew.sh/index_zh-cn.html">HomeBrew</a> 是一个非常有用的软件包管理系统，你可以把它想象成一个稍微抽象一点的 Mac App Store. 正如我们用 Mac App Store 来安装其他软件一样，我们这一步安装 HomeBrew 的目的是为了安装别的软件 (Ruby) 。当然 Mac App Store 和 HomeBrew 本身也是软件。</p>

<p>安装 HomeBrew 非常简单，打开终端 (Terminal)，执行以下命令（所谓「执行」即「输入+回车」，下同）：</p>

<p>{% coderay %}
ruby -e “$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)”
{% endcoderay %}</p>

<p>如果在执行上如命令的时候弹出需要安装 Xcode Command Line Tool 的提示，直接点击安装即可。</p>

<p>安装好之后最好先执行以下命令：</p>

<p>{% coderay %}
brew doctor
{% endcoderay %}</p>

<p>此条命令用来诊断安装中出现的问题并提示修复方法，如果没有问题则会显示：</p>

<p>{% coderay %}
Your system is ready to brew.
{% endcoderay %}</p>

<p>如遇问题，则按照提示处理，如果不懂如何处理可以先试着执行后面的步骤，如果能成功，则没有太大问题，毕竟我们只是想写博客而已。当然，做任何事情之前，备份是必须的。</p>

<ul>
  <li>使用 RVM 安装 Ruby</li>
</ul>

<p>执行以下命令安装 RVM，最新的稳定版 Ruby 也会随之安装：</p>

<p>{% coderay %}
curl -L https://get.rvm.io | bash -s stable –ruby
{% endcoderay %}</p>

<p>为避免出现问题，可执行以下命令安装 Ruby 2.0.0: </p>

<p>{% coderay %}
rvm install 2.0.0
rvm use 2.0.0
rvm rubygems latest
{% endcoderay %}</p>

<p>可以执行 <code>ruby --version</code> 命令来查看现在使用的 Ruby 版本，确保正在使用的是 Ruby 2.0.0</p>

<h3 id="github-">2.3 注册 Github 账号</h3>

<p>这个没什么好说的，早晚需要，去 <a href="http://github.com">http://github.com</a> 注册吧。</p>

<h3 id="section-1">2.4 域名指向（可选）</h3>

<p>如果你有自己的域名可用，可以在这时就配置好，毕竟解析起来需要一段时间，不如在我们搭建博客的时候让它开始，这样我们搭建完成后，基本上就可以直接用自有域名访问了。</p>

<p>如果你用的是顶级域名，比如 shengmingzhiqing.com, 请创建两个 A 记录 (A Record) 分别指向 <code>192.30.252.153</code> 和 <code>192.30.252.154</code>.</p>

<p>如果你使用二级域名，比如 blog.shengmingzhiqing.com, 请将该域名的 CNAME 指向 <code>[your_username].github.io</code>, 把其中的 [your_username]换成你自己在 Github 上的用户名。</p>

<p>如果你暂时没有域名，这一步可以暂时不用管。</p>

<h2 id="octopress">3. 本地安装 Octopress</h2>

<p>终于进入正题了。有了前面的准备工作，安装 Octopress 显得非常简单：</p>

<p>首先，打开终端 (Terminal) 执行如下命令：</p>

<p>{% coderay linenos:true %}git clone git://github.com/imathis/octopress.git octopress
cd octopress{% endcoderay %}</p>

<p>上面的代码中，第一行的作用是把 Octopress 克隆到本地磁盘，将会在你的本地<code>~/user/yourusername</code> 这个文件夹下生成一个名为 octopress 的文件夹。如果你不知道 yourusername 是什么，其实就是你每次打开终端时，$ 这个符号前面显示的那玩意。</p>

<p>第二行的作用是进入这个新建的 octopress 文件夹。这一步可能会碰到一个「是否要信任 .rvmrc file」的问题，输入 yes. </p>

<p>然后我们开始安装 Octopress 所必需的依赖项(dependencies)，执行以下命令：</p>

<p>{% coderay %}
gem install bundler
bundle install
{% endcoderay %}</p>

<p>然后执行如下命令安装默认主题：</p>

<p>{% coderay %}
rake install
{% endcoderay %}</p>

<p>本地安装完毕。顺便说一句，所谓 rake 就是 ruby make 的缩写。</p>

<p>这时你执行如下命令：</p>

<p>{% coderay %}
rake preview
{% endcoderay %}</p>

<p>然后在浏览器内输入 <code>http://localhost:4000/</code>，即可看到我们搭建完成的博客。也许并不好看，但很令人开心，不是么？</p>

<p class="warning">注意，以上各步中如果出现权限问题（关键词 permission），无法完成（关键词 abort）的话，请在各命令前加上 <code>sudo+空格</code>，如有提示，请输入电脑登录密码。</p>

<h2 id="octopress--github-pages-1">4. 将 Octopress 部署到 Github Pages</h2>

<h3 id="repository">4.1 新建库 (Repository)</h3>

<p>用刚刚注册的 Github 账号登录，然后在点击页面右上角的加号，在弹出菜单中点击 <code>New Repository</code>: 如图所示</p>

<p>{% img http://s.olo.la/9TgX.png %}</p>

<p>然后会跳转到一个新建库 (Create new repository) 的页面，在<code>Repository name</code>一栏填 <code>[your_username].github.io</code>，[your_username] 是你 Github 上的用户名，请务必按照此格式填写，否则无法在 Github 上部署博客。然后点击 <code>Create repository</code> 按钮提交。</p>

<p>如果一切顺利会出现一个页面，有一个 SSH 地址，形如 <code>git@github.com:[your_username]/[your_username].github.io.git</code>，下一步会用到。</p>

<h3 id="octopress--github-pages-2">4.2 将本地部署的 Octopress 发布到 Github Pages</h3>

<p>打开终端 (Terminal)，执行以下命令：</p>

<p>{% coderay %}
cd octopress
rake setup_github_pages
{% endcoderay %} </p>

<p>然后会出现一个问句，请把 4.1 步生成的 SSH 地址粘贴到这里，然后回车继续。</p>

<p>执行以下命令：</p>

<p>{% coderay linenos:true %}
rake generate
rake deploy
{% endcoderay %}</p>

<p>第一行命令用来生成页面，第二行命令用来部署页面，可按照字面意思理解。如果理解不了，可以暂且不管。任何一步如果出现失败提示，请使用 <code>sudo</code>。</p>

<p>如果上述内容完成，即可使用 http://[your_username].github.io/ 访问页面，将会出现一个和在本地预览时相同的页面。</p>

<p>然后，不要忘了把源文件全部发布到 <code>source</code> 分支下面，再一次可以看不懂<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>，执行以下命令：</p>

<p>{% coderay %}
git add .
git commit -m “备注内容”
git push origin source
{% endcoderay %}</p>

<h3 id="section-2">4.3 使用自己的域名（可选）</h3>

<p>如果你有自己的域名，并且想指向这个新博客的话，请首先确保执行了 2.4 节中的内容。如果没有执行，可以随时执行。</p>

<p>然后执行下面的命令，注意把 <code>your-domain.com</code> 换成你自己的域名。</p>

<p>{% coderay %}
echo ‘your-domain.com’ » source/CNAME
{% endcoderay %}</p>

<p>然后再次执行以下命令：</p>

<p>{% coderay %}
rake generate
rake deploy
{% endcoderay %}</p>

<p>这样你就可以使用自己的域名了。域名解析需要一段时间，如果没有马上生效，请不要着急。如果长时间没有生效，请确保完整执行了 2.4 节和本节内容。</p>

<h2 id="section-3">5. 发布新贴</h2>

<p>博客搭建好了，我们可以开始我们的第一贴了。那么怎么发布新贴呢？如果你真的想像个黑客一样写博客，我们可以继续使用我们的终端 (Terminal) 和命令行，执行以下命令：</p>

<p>{% coderay %}
cd octopress
rake new_post[“Post Title”]
{% endcoderay %}</p>

<p>把其中的 Post Title 替换为你想写的文章标题。然后会有一个名为 <code>yyyy-mm-dd-Post-Title.markdown</code> 的文件在 <code>octopress/source/_posts</code> 目录下生成，其中 yyyy-mm-dd 是你当时的日期。然后执行以下命令：</p>

<p>{% coderay %}
cd source/_posts/
vim yyyy-mm-dd-Post-Title.markdown
{% endcoderay %}</p>

<p>即可用 vim 编辑器编辑的刚才的文章了，好吧我知道你作为这篇文章的读者并不是一个能熟练使用 vim 的人，那么请在命令行输入 <code>:q</code>退出这个编辑器。如果你不想假装是个黑客的话，其实发布文章并不需要这么麻烦。</p>

<p>我们直接打开 <code>octopress/source/_posts</code> 文件夹，找到刚才生成的文件，用你喜欢的 Markdown 编辑器（免费的我推荐 <a href="http://mouapp.com">Mou</a>，收费的我推荐 <a href="http://bywordapp.com">Byword</a>）或者文本编辑器打开，对文章内容进行编辑。</p>

<p>打开文件后，你会发现文章开头有这么一段信息:</p>

<p>{% coderay lang:markdown linenos:true %}—<br />
layout: post<br />
title: “Post Title”<br />
date: yyyy-mm-dd hh:mm:ss<br />
comments: true<br />
categories: “”  
—{% endcoderay %}</p>

<p>注，为避免代码显示异常，我在第一行和第七行前面分别加了一个<code>Tab</code>。</p>

<p>这其实是这篇文章的元数据：<code>layout</code> 暂时不要理会；<code>title</code> 是这篇文章显示在最终网页上的标题；<code>date</code> 部分是详细的文件生成时间，如 <code>2014-04-28 03:35:00</code>；<code>comment</code> 部分表示是否允许评论，目前显示是允许，如果想关闭评论，请改为 <code>false</code>；<code>categories</code> 指这篇文章的分类目录，请在后面引号中输入，如果没有该目录，则会自动生成。请不要删除这段信息，在这段信息下面开始你的文章内容。</p>

<p>这件事情给我们的启发是，以后发布文章，其实并不需要使用终端命令行生成文件。可以直接将自己写好的文章放到这个文件夹下面，当然请按照 <code>yyyy-mm-dd-Post-Title.markdown</code> 这样的文件格式命名，同时记得在文章前面添加元数据信息。这种做法生成的文章与上面的方法无异。如果你觉得添加元数据信息过于麻烦，推荐一个非常好用的工具：<a href="https://smilesoftware.com/TextExpander/index.html">TextExpander</a>。</p>

<p>在文章写好之后，使用命令行执行（仔细观察命令，像不像 generate 和 deploy 的合体？）：</p>

<p>{% coderay %}
rake gen_deploy
{% endcoderay %}</p>

<p>同样，如果在本节中，任何命令执行失败，没有取得想要结果，请在前面加 <code>sudo</code>。是时候说一说 <code>sudo</code> 命令了，这其实是 super do 的缩写，之所以用它是因为，一般而言 Mac 上最高权限的<code>root</code> 账户默认是关闭的。我们自己的账户哪怕是管理员也在一些地方没有权限操作，super do 其实就是越权操作的意思，因此也往往需要输入密码，一般而言短时间内不需要输入第二次。</p>

<p>这样你的第一篇日志就发布出来了，恭喜你正式开通了基于 Octopress 的独立博客。</p>

<p>当然你会发现似乎文章作者不是你，界面是英文显示，整体排版效果差强人意等等问题，不着急，我们会在接下来的文章中讲解如何配置和修改 Octopress 博客。</p>

<p>对于实用性知识，我的向来的态度是「精益学习」，先把最核心最当紧的问题解决了，其余问题发现一例解决一例，不断在干中学，不断版本迭代。后面讲到如何配置修改 Octopress 博客的文章就秉承这一原则，先将遇到了什么问题，然后将如何寻找解决方法。</p>

<p>顺便说一句，我可能算是第一个提出「精益学习」这个概念的人吧，这个想法来自「<a href="http://zh.wikipedia.org/wiki/精益创业">精益创业</a>」。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>A blogging framework for hackers.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>什么是 Git？<a href="http://zh.wikipedia.org/wiki/Git">点这里</a>，看完你能了解个大概，这基本上已经够了，但如果还需更多知识， 就看看 wikipedia 和 Git 官网。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>什么是 Ruby？<a href="http://zh.wikipedia.org/wiki/Ruby">点这里</a>，看完你能了解个大概，这基本上已经够了，但如果还需更多知识，就看看 wikipedia 和 <a href="https://www.ruby-lang.org/en/">Ruby 官网</a>。<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>如果想看懂，这里有个快速上手指南：<a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a><a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 每个人都该为自己打造专属的写作环境]]></title>
    <link href="http://shengmingzhiqing.com/blog/everybody-should-build-his-own-writing-space.html/"/>
    <updated>2014-04-27T00:00:00+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/everybody-should-build-his-own-writing-space</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">我的博客史</a></li>
  <li><a href="#section-1">每个人都该为自己打造专属的写作环境</a></li>
  <li><a href="#wordpress--octopress">WordPress &amp; Octopress</a></li>
  <li><a href="#octopress-">关于 Octopress 搭建</a></li>
</ul>

<h2 id="section">我的博客史</h2>

<p>每次搭建新博客都想把自己写博客的历史回顾一遍，这次索性来个彻底回顾，直接从最早接触互联网说起吧。</p>

<p>如果没有记错，2000 年在家乡的一个网吧第一次接触互联网。当我试着把从杂志上抄来的瓦斯科达伽马足球俱乐部的官方首页输入 IE 地址栏时，我并不相信五分钟后竟然能将页面显示出来。<!--more--><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>这次体验可谓惊艳，我做梦也没有想到我竟然可以和远在南美的刚刚从世俱杯上得到的一个球队名字建立起某种联系，从此便一发不可收拾，爱上了互联网。后来一段时间里，IE 浏览器几乎成了我上网的代名词，最早的聊天都是在网易聊天室开始的。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>即使在反恐精英最为流行的时候，我也不忘放下游戏浏览一下网页，因为在当时的我看来局域网根本不算网，来网吧上局域网简直是暴殄天物，哪怕是玩游戏。</p>

<p>如果没有记错的话，初中我就在搭建个人的论坛，个人网站，甚至想过利用免费空间搭建一个江湖游戏系统——这样我就可以给自己设置最高属性。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>高中的时候自己搭建过完整的论坛，只不过没有服务器，后来只好去做学校论坛的超级版主，同时还在一个当时比较知名的论坛上当过分版版主。后来听说了博客，在当时的我看来，这玩意太小儿科了：所有人只要注册账号就可以开通，完全没有技术含量，于是就没有太关注。心里想的是，我要做就做个人网站。直到 2006 年高中毕业，我发现无论是建个人网站也好，建其他什么东西也罢，是时候开始了。于是我开始搜索网上可以免费建站的空间，结果非常令人失望。那是个互联网公司不知道该怎么办的年代，拿免费邮箱来说，开始普遍都给 50 MB，到后来最慷慨的网易才给 25 MB，没记错的话新浪是 5 MB，微软 hotmail 是 2 MB。邮箱尚且如此，哪里能找到免费的建站空间呢？<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>于是回过头来看博客，发现其实未尝不是一种良好的选择，于是就在当时最流行的新浪微博上注册了一个免费账号。写了不到两年，看到了罗永浩对新浪博客的一些看法，深表认同，于是决定离开。不过新的博客网站并不好找，先后尝试了好几家，最终留在了<a href="http://www.blogbus.com/">博客大巴</a>。</p>

<p>博客大巴的体验非常棒，如果你对界面有什么不满意，可以自行做各种修改，只要你稍微懂一点 html （和 CSS?），甚至只要懂一点搜索，基本上都能改出你要的效果。后来越用越喜欢，购买了他们的会员服务，并绑定了顶级域名。为此我还收到了博客大巴寄来的礼物。总的来说，这是我最喜欢的一家博客托管商。</p>

<p>可突然有一天，我在博客大巴的博客在未接到任何通知的情况下，被锁定了 20 多篇文章，并在事后也没有接到任何解释，哪怕是群发的官样文章的通知。当然这不怪他们，冤有头债有主，前方左转你也知道是什么。但这种感觉我非常不爽，于是在这种半被动的情况下，开始了我的独立博客之旅。</p>

<p>当时最流行的博客系统就是现在也最流行的 WordPress，于是我在淘宝上买了海外虚拟主机，用最傻瓜的方式搭建起了现在的个人博客「<a href="http://haohailong.net/">郝海龙</a>」。</p>

<h2 id="section-1">每个人都该为自己打造专属的写作环境</h2>

<p>WordPress 是一款功能强大的博客系统<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>，本身就有各种插件，如果你再懂一点 html 和 CSS 知识的话，几乎没有实现不了的功能。就页面显示效果而言，WordPress 有各种主题资源，几乎可以把你的博客做成任何你想要的风格。</p>

<p>但一直以来，我的博客页面显得非常凌乱。前后在主题上花了 200 美元，这个问题依然没有得到良好的解决。一开始认为主要原因是外国主题水土不服，后来发现很多外国主题在别人的博客上显示非常不错，但一放到自己的博客上就变得差强人意。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>左思右想对比来对比去，不知道问题出在哪里。</p>

<p>前一段时间给 52Podcast.com 搭建新的 WordPress 博客，作为一个外行的「技术总监」，必须现学现卖。在网上浏览资料的时候，发现了阳志平先生的博客「<a href="http://www.yangzhiping.com">阳志平的网志</a>」。他博客的一个重要主题就是理想的写作环境。对于他的观点，可能不同人有不同的看法。但我至少能看出，他心目中理想的写作环境至少是他目前摸索出来的，对他自己来说最佳的写作环境。虽然我写作类型与阳先生不同，但他这些文章让我有很大启发，我突然明白：<strong>每个人都该为自己打造专属的写作环境</strong>。</p>

<p>就我个人而言，有一部分文章类型是与阳先生一致的，比如一些关于计算机或者是经济学的文章：这些文章可能会用到公式，代码等非自然语言内容。对于这些文章而言，Markdown + R (或者 LaTeX) 可能就是最合适的写作环境，而其他一些比如剧本、诗歌之类的问题，可能就与 LaTeX 之类的排版系统关系不大，我应该做的是针对自己写作类型，为自己量身定制一套写作方式和写作环境。想到这一节不禁喟叹自己反应为何如此之慢，这样的事情并不是没有人做过，比如知名写作软件 <a href="http://www.literatureandlatte.com/scrivener.php">Scrivener</a> 的作者。</p>

<p>同时，我也想明白了博客显示效果差的重要原因：文章类型太杂。诗歌和理工科类文章本身对形式要求就很高，形式本身也是内容的一部分，这两类文章放在一起总是冲突不断：无奈，我博客上这两类文章居多。于是我觉得应该把这两类文章独立显示，当我想明白这一节，又发现其实很多博主已经在这么做了，比如<a href="http://blog.farmostwood.net">木遥</a>，只能再一次感慨自己的后知后觉。</p>

<p>要实现不同类型文章独立显示，一个理念上最简单直接的办法就是，再搭建一个新的博客专门显示其中一类文章。当然，实际操作起来，可能在原博客上把文章分开更简单。但我还是选择了再搭建一个新站，主要有以下几个原因：</p>

<ol>
  <li>虽然不是科班出身，但从小对 IT 感兴趣，如果有机会练练手自然不愿意放过。</li>
  <li>一直对 <a href="http://git-scm.com/">Git</a> 和 <a href="https://github.com/">Github</a> 很感兴趣，想通过这个 Github Pages 上搭建的新博客开始自己的 Github 之旅。</li>
  <li>受阳志平先生影响，觉得 Github Pages 非常适合用来写偏向理工科的博客。</li>
</ol>

<p>搭建新站的过程一波三折：一开始，我想直接使用 Jekyll 来搭建博客，最终碍于没有好看的博客主题，选择放弃。后来又试了很多人推荐的轻量级博客系统 Hexo，结果发现这货仅有的模板都太偏文艺，这与我搭建一个理工类博客的初衷不符。最后还是选择了一开始就知道的，最为大众的 Octopress。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p>老实说，Octopress 好看的模板也不多，不过好在大部分模板都比较适合理工科写作，同时如果你有一颗不安分的心，很多功能都可以自行定制。</p>

<p>经过大约一个礼拜的搭建和修改，终于出现了现在你们看到的「<a href="http://shengmingzhiqing.com/">生命之氢</a>」这个新博客。以后偏向理工科的内容我会发布在这里，同时将陆续迁移 WordPress 博客上所有偏向理工科的内容到这个博客，原博客将继续保持更新：斗胆说一句，人文和科技本身就是我的两面。</p>

<h2 id="wordpress--octopress">WordPress &amp; Octopress</h2>

<p>作为一个同时使用 WordPress 和 Octopress 的人不比较一下这两个系统，似乎有点说不过去。不过我还是不想比较，我想同时推荐这两种博客系统，这也是我不用 vs. 而用 &amp; 的原因。</p>

<p>首先，并不是说 WordPress 不适合理工类文章。事实上有很多程序员都在用 WordPress，对于公式显示现在也有官方的 LaTeX 插件。</p>

<p>其次，Octopress 也完全可以用作普通的博客。虽然没有 WordPress 那么多插件，但只要你有一点点 IT 知识，甚至常识（比如搜索），就能实现很多好到出乎意料的功能。</p>

<p>如果你像我一样，想同时用两个博客更新不同类型的内容的话，我还是建议把偏向理工类的文章放到 Octopress，毕竟 Octopress 的 Slogan 是「像黑客一样写博客」。</p>

<p>二者选其一的话，没有 IT 知识的，建议选 WordPress，有 IT 知识的建议选 Octopress。当然如果你不想支付服务器费用，并愿意自己学习 IT 知识，那么 Octopress 仍然是首选。</p>

<h2 id="octopress-">关于 Octopress 搭建</h2>

<p>在 Octopress 搭建过程中，除了<a href="http://octopress.org/">官网</a>的教程之外，还参考了很多网友撰写的教程，同时发现了<a href="http://shengmingzhiqing.com/ebauche/jekyll-octopress-blogs.html">一些潜伏在 Octopress/Jekyll 上的博客</a>。</p>

<p>在看这些博客和教程的过程中，有一件事一直想不明白：为什么几乎每一个搭建 Octopress 的博主都想会写一个搭建和配置教程？</p>

<p>前些天复活节假期结束后，我捡起 Octopress 来一看，发现自己对于如何搭建，如何配置全都忘了。我想到也许某些教程不过是自己的备忘罢了。</p>

<p>在做一些事情的时候不一定要明白其所以然，但一定要做好记录，否则当你有能力并有精力了解的时候又得重新做一遍。</p>

<p>最近搭建博客的过程让我再一次明白工作日志的作用，那么这算是第一篇，接下来的日志中我要开始撰写我的 Octopress 搭建教程了。所有关于 Octopress 的文章，我都会放在 <a href="http://shengmingzhiqing.com/blog/categories/octopress/">Octopress</a> 分类下。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>对于 56K Modem 的年代，5 分钟能加载一个远在南美的网站已经算是非常不错的速度了。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>第二次上网就找了个网络女友，其实这事更惊艳。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>不知道今天的新生代网友是否还知道什么是江湖，其实就是一种基于文字聊天的互联网游戏。<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>当时其实还没有意识到，免费的东西又诸多弊病，尤其是像个人网站这种东西万万不可过分依赖免费系统。<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>甚至可以说是内容管理系统，中小型网站直接使用 WordPress 搭建都不会有太大问题。<a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p>这词没用错，就该是「差强人意」的本义。<a href="#fnref:6" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:7">
      <p>准确地说，是在 Github 圈子里最为大众。<a href="#fnref:7" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
