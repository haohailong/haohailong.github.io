<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[生命之氢]]></title>
  <link href="http://shengmingzhiqing.com/atom.xml" rel="self"/>
  <link href="http://shengmingzhiqing.com/"/>
  <updated>2014-05-04T09:12:55+02:00</updated>
  <id>http://shengmingzhiqing.com/</id>
  <author>
    <name><![CDATA[郝海龙]]></name>
    <email><![CDATA[haohailong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (2)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-2.html/"/>
    <updated>2014-05-04T05:41:14+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-2</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">1. 页面相关设置</a>    <ul>
      <li><a href="#section-1">1.1 新建页面</a></li>
    </ul>
  </li>
  <li><a href="#section-2">1.2 添加公益 404 页面</a></li>
  <li><a href="#section-3">1.3 添加页面和其他链接至导航栏</a></li>
  <li><a href="#section-4">2. 主题汉化</a>    <ul>
      <li><a href="#section-5">2.1 汉化导航栏</a></li>
      <li><a href="#section-6">2.2 汉化移动设备导航栏</a></li>
      <li><a href="#section-7">2.3 汉化归档页面</a></li>
      <li><a href="#section-8">2.4 汉化侧边栏</a></li>
      <li><a href="#section-9">2.5 汉化其他部分</a></li>
    </ul>
  </li>
  <li><a href="#section-10">3. 网站底部</a></li>
  <li><a href="#section-11">4. 添加侧边栏</a></li>
  <li><a href="#section-12">5. 添加评论系统</a></li>
</ul>

<p>通过前面的教程，我们成功搭建起了自己的 Octopress 博客，并对博客框架做了基本配置。这已经可以算是一个真正意义上的个人博客了：1. 确实可以在互联网上看到；2. 文章有自己的署名；3. 甚至可以撰写有公式的科技文章。</p>

<p>但我们对于网站的个性化修改并没有结束：首先，网站整体显得很粗糙，很多必要的信息，比如作者简介，并没有呈现；其次，虽然我们对基本配置中涉及到的部分做了有限的汉化，但也正因为我们做了部分汉化，其余的英文部分显得更加不伦不类。针对这些问题，本文将继续我们「精益修改」之路。<!--more--></p>

<p>在正式进入主题之前，先给大家一个小技巧：我们可以先在终端执行命令 <code>sudo rake preview</code>，然后使用 <code>http://localhost:4000/</code> 这个网址对我们的网站进行预览。然后我们再修改相关属性，在修改过程中，只要刷新页面就可以看到实时效果，等效果没有问题了，我们再执行 <code>sudo rake generate</code> 和 <code>sudo rake deploy</code> 发布到网络上。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>当然，最后还要记得使用 git 命令把修改后的源文件传到 Github 上。</p>

<h2 id="section">1. 页面相关设置</h2>

<h3 id="section-1">1.1 新建页面</h3>

<p>对于一个博客来说，仅仅有按时间发布的文章或日志是不够的，我们还需要在上面放一些其他页面。对于 Octopress 来说，系统默认只有两个页面，一个是 Blog 页面，上面按照时间顺序显示着我们发布的日志，另一个是 Archives (归档) 页面，也是我们的文章列表，只是用一种更为简洁的方式呈现，只有标题，时间，和分类描述。</p>

<p>但仅有这两个页面对很多人来说并不够，我们需要更多，比如在我的博客中，还有一个「<a href="http://shengmingzhiqing.com/article-series/">系列文章</a>」页面，里面放的是我成系列的文章，更加方便读者阅读，也方便自己查阅。那么像这样一个页面该如何生成呢？很简单，执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
sudo rake new_page[your-title]
</pre></div>
</div>
 </figure></notextile></div>

<p>然后你会发现，在你 <code>source</code>  文件夹下会出现一个名为 <code>your-title</code> 的文件夹，里面会有一个名为 index.md 的文件。还记得我们在「<a href="http://shengmingzhiqing.com/blog/octopress-lean-modification-1.html/#markdown-">精益修改 (1)</a>」中修改过 rakefile 里的 Markdown 文件的 后缀，其中有一行是 <code>new_page_ext</code>，这里改动的正式新页面的后缀。</p>

<p>在你重新部署后，这个文件将会生成一个名为<code>index.html</code> 的文件。可以用以下链接来访问这个页面：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain]/your-title/
</pre></div>
</div>
 </figure></notextile></div>

<p>当然如果你现在访问的话，页面的标题将会是 “your title”，而内容是空白，这简直太合理了，因为我们真的就什么都没写。</p>

<p>那么该怎么修改页面的内容呢？不用我说你也知道，只要修改那个 <code>your-title</code> 文件夹下的 index.md 文件即可，具体方法和修改文章一样，在此我不再赘述。</p>

<p>当然有时候我们并不想让每个页面都生成一个新的文件夹，那么你可以考虑执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
sudo rake new_page[your-title/mylove.html]
</pre></div>
</div>
 </figure></notextile></div>

<p>这样你将在 <code>your-title</code> 文件夹下生成一个 mylove.html 的文件，部署后即可用以下地址访问：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain]/your-title/mylove.html
</pre></div>
</div>
 </figure></notextile></div>

<p>当你打开这些新页面文件的时候，你会发现和新文章类似的元数据：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>---
layout: page
title: &quot;your-title&quot;
date: 
comments: true
sharing: true
footer: true
---</pre></td>
</tr></table>
 </figure></notextile></div>

<p>如果你想让页面显示作者，可以在中间加一行 <code>author: </code> 后面接作者名字即可。顺便说一说第一行的 <code>layout: </code> 属性，指的是这个页面用什么样的布局来显示。比如这里是页面布局，之前我们发的文章是 post 布局。具体什么布局是什么样子，通过 <code>source/_layout</code> 这个文件夹下的文件来定义。如果你有一点点模仿能力，你可以根据里面已有的文件，设计出自己的布局。</p>

<p>和生成新文章一样，你可以自己在相应的文件夹下新建 Markdown 文件来生成相应的页面，并不是一定要用命令行的方式实现。当然，记得要给文件添加上面的元数据。</p>

<h2 id="section-2">1.2 添加公益 404 页面</h2>

<p>对于一个网站来说，有一个页面我们很少会注意到，那就是这个网站的 404 页面——当网站找不到用户访问的页面（通常是不存在）时的替代页面。</p>

<p>这个页面对我们来说并不重要，但却是经常被访问到的页面之一。很多聪明人就想到了这一点：我们可以用它来做公益。你可以试着访问以下我的 404 页面：<a href="http://shengmingzhiqing.com/404">http://shengmingzhiqing.com/404</a>，你会发现一条寻人的公益广告。那么这是如何实现的呢？</p>

<p>首先在 <code>source</code> 文件夹下新建一个 404.md 页面文件，然后到 <a href="http://notfound.org/">http://notfound.org/</a> 这里复制粘贴相应的代码即可。</p>

<p>当然如果你更愿意用中文的产品，可以考虑益云的公益 404 项目，我的<a href="http://haohailong.net/">另一个博客</a>用的就是这个方案。不过益云生成的页面并不是响应式设计<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，所以手机浏览效果比较差。</p>

<h2 id="section-3">1.3 添加页面和其他链接至导航栏</h2>

<p>我们现在知道了新页面的生成方式，知道了页面生成后的链接，你可以通过这个链接来访问，但你博客的读者却并不知道这个页面在哪里，因此我们需要给他一个快速找到这个页面的方式，毕竟我们不能把所有的页面都当成 404 页面。</p>

<p>你可以直接把链接放到文章中，和你插入别的超链接的方式没有任何区别。但很多时候我们会把一些重要页面的链接放在导航栏：</p>

<p>首先，请打开<code>source/_includes/custom/navigation.html</code> 这个文件，你会看到：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>source/_includes/custom/navigation.html </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span class="tag">&lt;ul</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">main-navigation</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
  <span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Blog<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
  <span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/blog/archives</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>Archives<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;/ul&gt;</span></pre></td>
</tr></table>
 </figure></notextile></div>

<p>这里就是导航栏里所有链接的列表，你只需要依样画葫芦即可完成页面添加。比如你想把刚刚生成的 your-title 页面和 mylove 页面添加到导航栏中，你可以在第三行下面再加如下两行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>source/_includes/custom/navigation.html </span></figcaption>
 <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>  <span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/your-title/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>your-title<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
  <span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ root_url }}/your-title/mylove.html</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>mylove<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span></pre></td>
</tr></table>
 </figure></notextile></div>

<p>当然，我们也可以顺手汉化系统默认的两个页面，只要你把上面的 <code>Blog</code> 和 <code>Archives</code> 分别修改成你想要的信息，比如「首页」和「文章列表」，即可像本博客这样显示。</p>

<p>你也可以在这里添加站外链接，只需要把 <code>a href</code> 后面引号中的部分改为相应的网站链接即可。</p>

<p>有一点需要说明，这里出现的 <code>{{ root_url }}</code> 是你网站的根目录，一般而言就是你的主域名。比如对于我这个博客来说，只要这个链接在站内：<code>{{ root_url }}/page.html</code> 和 <code>http://shengmingzhiqing.com/page.html</code> 是一个意思。前者给出的是 page.html 相对于根目录的路径，后者给出的是在 <code>shengmingzhiqing.com</code> 这个目录下的路径。简单来说，前者是页面的相对路径，后者是页面的绝对路径。</p>

<p>一般而言，站内连接的使用原则是，能使用相对路径就不要使用绝对路径。 因为域名一旦变更，相对路径继续有效，绝对路径将依然指向原域名下的页面，这本来就不是我们的本本意，而如果原来的域名废弃了，链接将直接失效。最为直接的影响是，如果我们在一个指向页面的超链接中使用了绝对路径，我们本地预览页面中的链接与已经部署到网络上的页面链接将指向相同的内容，这样我们就无法通过这个已经设好的超链接来追踪页面的实时效果。</p>

<p>在本文后面的部分以及后面的文章中，我将使用 <code>{{ root_url }}</code> 来代替你网站的根目录（域名）。</p>

<h2 id="section-4">2. 主题汉化</h2>

<p>之前在设置各种属性的时候，我们已经顺手汉化了一些内容，本节将继续其余的汉化工作。之所以到现在才系统性地对主题进行汉化，是因为通过前面的设置和修改，与博客相关的基本内容都已经呈现在了我们面前，这样我们可以一次性把所有的需要汉化的内容都做好。</p>

<h3 id="section-5">2.1 汉化导航栏</h3>

<p>在给导航栏添加页面连接时，我们已经完成了左侧链接部分的汉化，现在剩下的是导航栏右侧的搜索框和 RSS 订阅链接。这部分内容在 <code>source/_includes/navigation.html</code> 文件中，注意文件路径，与刚才我们修改的 navigation.html 文件不是一个文件。</p>

<p class="warning">在这里顺便说一句，通常只主张修改 <code>custom</code> 目录下的内容，因为这部分内容会覆盖掉主题默认的内容，这样可以在不影响原主题代码的情况下，完成我们想要的效果，同时保证了即使我们自己写的代码有问题，系统也有一个默认的代码可以执行。当然对于我们的汉化工作来说，这样不会有太大影响。</p>

<p>打开之后找到如下两行代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;li&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ site.subscribe_rss }}</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">subscribe-rss</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">subscribe via RSS</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>RSS<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/li&gt;</span>
  …
<span class="tag">&lt;input</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">search</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">q</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">results</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">0</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">placeholder</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Search</span><span class="delimiter">&quot;</span></span><span class="tag">/&gt;</span></pre></div>
</div>
 </figure></notextile></div>

<p>把其中的 “subscribe via RSS” 和 “Search” (“pacehoder=” 后面那个) 分别换成「订阅 RSS」和「搜索」即可。</p>

<h3 id="section-6">2.2 汉化移动设备导航栏</h3>

<p>Octopress 默认采用了响应式设计，也就是说会根据不同的浏览器和浏览工具自动调节页面显示效果。当你用非常窄的工具（比如手机）浏览时，导航栏会缩为一个下拉菜单，默认内容是 navigation…，要修改这个内容，请打开 <code>source/javascripts/octopress.js</code> 文件，把第四行的 navigation 改为「网站导航」即可。</p>

<h3 id="section-7">2.3 汉化归档页面</h3>

<p>汉化完导航栏之后，我们打开归档页面 (http://{{ root_url }}/blog/archives)，你会发现这个页面上的日期和分类 (Posted in) 还是用英文显示的。要汉化这个内容，我们应该找到相应的页面文件。</p>

<p>不妨根据我们刚才新建页面时对目录的理解，推测一下它在哪个目录。没错，它应该是在 <code>source/blog/archives</code> 目录下的 <code>index.html</code> 文件。但我们打开这个文件之后，发现并没有日期和分类这两项，不过不要着急，仔细观察，你会发现页面的主体内容部分被如下一句代码所代替：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>{% include archive_post.html %}</pre></div>
</div>
 </figure></notextile></div>

<p>也就是说，真正出现文字的地方应该在 <code>archive_post.html</code> 这个文件中。那么哪里去找这个文件呢？你当然可以用搜索功能，但在这里，为了更好的了解目录结构，不妨再推测一下。<code>archive_post.html</code> 前面有个 <code>include</code>，通常用这个命令包含的网页，都在 <code>source/_include</code> 这个目录下。打开这个目录，你果然找到了 <code>archive_post.html</code> ，打开之后会找到如下两行代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;time</span> <span class="attribute-name">datetime</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">{{ post.date | datetime | date_to_xmlschema }}</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">pubdate</span><span class="tag">&gt;</span>{{ post.date | date: &quot;<span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">month</span><span class="delimiter">'</span></span><span class="tag">&gt;</span>%b<span class="tag">&lt;/span&gt;</span> <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">day</span><span class="delimiter">'</span></span><span class="tag">&gt;</span>%d<span class="tag">&lt;/span&gt;</span> <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">'</span><span class="content">year</span><span class="delimiter">'</span></span><span class="tag">&gt;</span>%Y<span class="tag">&lt;/span&gt;</span>&quot;}}<span class="tag">&lt;/time&gt;</span>
…
<span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">categories</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>posted in {{ post.categories | category_links }}<span class="tag">&lt;/span&gt;</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>分别做如下替换：”%b” →「%m 月」；”%d” →「%d 日」；”posted in” →「分类：」。</p>

<h3 id="section-8">2.4 汉化侧边栏</h3>

<p>归档页汉化完之后，朝右看你会发现侧边栏有个 Recent posts，你当然明白是什么意思，但你更希望这个标题是汉语。</p>

<p>Octopress 所有侧边栏页面都在 <code>source/_includes/asides</code>文件夹下，在这里你找到 <code>recent_posts.html</code> 这个文件。将其中的 <code>Recent posts</code> 改为 <code>最新文章</code> 即可。</p>

<p>如果以后添加了其他的侧边栏，也通过同样的方式来汉化。</p>

<h3 id="section-9">2.5 汉化其他部分</h3>

<p>当你完成上面三步的时候，整个网站汉化工作基本上已经完成了，只是以后你可能会在添加其他内容，这是可能又需要重复一些汉化工作。那么该如何进行呢？</p>

<p>对于系统或主题已有的一些组件：</p>

<ol>
  <li>
    <p>如果要汉化页面，那么按照页面生成的规范找到页面源文件修改即可；</p>
  </li>
  <li>
    <p>如果出现 include 这样的语句，后面的文件一般会出现在 <code>source/_include</code> 目录下，当然也包括这个目录下的子目录，比如 <code>source/_include/custom</code> 目录；</p>
  </li>
  <li>
    <p>如果要汉化侧边栏，一般去 <code>source/_include/asides</code> 目录寻找相应文件；</p>
  </li>
  <li>
    <p>如果上述方式都无法找到文件，请在 <code>source</code> 文件夹下针对关键字搜索。</p>
  </li>
</ol>

<p>如果是新安装的插件：</p>

<ol>
  <li>
    <p>首先在新添加的文件中查找；</p>
  </li>
  <li>
    <p>如果上述方式都无法找到文件，请在 <code>source</code> 文件夹下针对关键字搜索。</p>
  </li>
</ol>

<p>以上的方法几乎可以解决所有和页面内容有关的问题，而不仅仅是汉化问题。</p>

<h2 id="section-10">3. 网站底部</h2>

<p>一般来说网站底部会有一些网站的描述信息，比如版权声明，网站主题，网站使用的系统等等，要修改这部分内容，直接打开 <code>source/_includes/custom/foot.html</code>修改相应部分即可。</p>

<h2 id="section-11">4. 添加侧边栏</h2>

<p>我们刚刚说过，所有的侧边栏页面都在 <code>source/_include/asides</code> 目录下，我们可以把我们想要的侧边栏工具放到这里。系统自带了一些侧边栏小工具，比如我们刚刚已经看到的 Recent posts。</p>

<p>如果我们想让系统自带的这些侧边栏工具显示出来的话，需要在 _config.yml 文件下作相应的设置。比如你想添加 pinboard 的小工具，在 _config.yml 中找到如下代码做相应修改即可：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># Pinboard</span>
<span class="key">pinboard_user</span>: <span class="comment">#在这里添加你的 pinboard 用户名</span>
<span class="key">pinboard_count</span>: <span class="string"><span class="content">3</span></span> <span class="comment">#这里的数字是默认现实的 pinboard 书签数量，可以任意修改</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>还有一行代码需要注意：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="key">default_asides</span>: <span class="string"><span class="content">[asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span></span>
</pre></div>
</div>
 </figure></notextile></div>

<p>这行代码中，后面给出的页面文件，都是默认显示在侧边栏的小工具，只要你进行了类似上面对 Pinboard 工具的设置，就会出现在侧边栏上。前后顺序代表了出现在侧边栏上的上下顺序，你可以根据需要做相应的修改。</p>

<p>如果你自己要添加新的侧边栏工具，也需要把文件目录加到这个列表中。</p>

<p>一般而言自行添加的侧边栏工具建议放到 <code>source/_include/custom/asides</code> 这个目录下。你会看到这个目录下主题默认已经有了 <code>about.html</code>，你可以直接修改此文件（包括汉化）来生成「关于」侧边栏。生成完之后，需要把 <code>custom/asides/about.html</code> 添加到上面的列表中，注意这个列表中的路径都是想对于 <code>source/_include/</code> 目录的路径。</p>

<h2 id="section-12">5. 添加评论系统</h2>

<p>到目前为止，我们都忽略了一个博客系统非常重要的组成部分，就是与读者的互动。这需要我们加入一个评论系统。Octopress 默认支持 Disqus 评论系统，你需要先到 disqus.com 注册一个账号。然后在 _config.yml 中找到：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="comment"># Disqus Comments</span>
<span class="key">disqus_short_name</span>: 
<span class="key">disqus_show_comment_count</span>: <span class="string"><span class="content">false </span></span></pre></div>
</div>
 </figure></notextile></div>

<p>填入相关信息即可。</p>

<p>很多人会说 Disqus 评论系统在中国水土不服，如果你也是这样的观点，网上也有许多安装「多说」和「友言」评论系统的教程可供参考。对于我个人而言，我更愿意用 Disqus，毕竟这个博客是我的一个实验室，我愿意尝试原来的博客不一样的东西。</p>

<p>目前 Disqus 的提示文字并不支持简体中文，鉴于这一情况，我推荐你使用英文或者繁体中文作为评论框的提示语言。根据 Disqus 官方的一些说明，将会在不久的将来支持简体中文，到时候再切换也不迟。</p>

<p>你可能会惊讶于能在我的博客上看到简体中文的 Disqus 评论框，其实是这样的，Disqus 的旧版是支持简体中文的，新版的简体中文翻译工作正在进行，但他们并没有把简体中文的选项在系统中彻底抹去，可以通过审查元素的方式把这个选项调出来。但毕竟翻译没有完成，可能会在夹杂一些英文在系统当中，所以除非你像我一样想折腾一下，否则并不建议使用。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>这个技巧对主题和样式的修改有效，但对于一些插件，实现效果可能需要重新生成页面，并重新部署。不过总的来说这个预览功能非常实用。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>不要被这个唬人的术语吓住，其实就是原来的自适应设计的新名字。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 精益修改 (1)]]></title>
    <link href="http://shengmingzhiqing.com/blog/octopress-lean-modification-1.html/"/>
    <updated>2014-04-29T01:31:59+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/octopress-lean-modification-1</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">1. 永远的第二步</a></li>
  <li><a href="#section-1">2. 简要说明</a></li>
  <li><a href="#section-2">3. 新主题安装</a></li>
  <li><a href="#section-3">4. 基本配置</a>    <ul>
      <li><a href="#section-4">4.1 域名，网站标题，作者</a></li>
      <li><a href="#section-5">4.2 日期格式</a></li>
      <li><a href="#section-6">4.3 文章链接形式</a></li>
      <li><a href="#section-7">4.4 分类目录前缀</a></li>
      <li><a href="#section-8">4.5「继续阅读」按钮</a></li>
      <li><a href="#markdown-">4.6 修改 Markdown 文件后缀</a></li>
      <li><a href="#markdown--1">4.7 修改默认 Markdown 解释器</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">1. 永远的第二步</h2>

<p>通过「<a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">Octopress 搭建流程 – Github Pages</a>」，我们搭建好了自己的 Octopress 博客并发布了第一篇文章。</p>

<p>但这只是我们 Octopress 博客之旅的第一步，说白了，我们不过是把别人已经做好的程序成功的安装到了网上，并且试运行了一下。但博客终究是个讲究个性化的地方，个性化就意味着需要自己动手进行修改。我们的第二步就是对安装好的 Octopress 做个性化修改。<!--more--></p>

<p><a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">前面我们说过</a>，对于实用性的知识，我向来秉承「精益学习」的态度。对我来说，「如何对一个网站进行个性化修改」正是这类知识，所以我们这篇文章的标题叫做「Octopress 精益修改」。</p>

<p>我们会在使用博客系统的过程中不断发现问题，发现一例解决一例即可，如果一次性发现了很多个问题，可以做一个<a href="http://shengmingzhiqing.com/ebauche/octopress/task-list.html">任务列表</a>逐一解决。如果遇到暂时解决不了的问题，那么恭喜你，这是你学习的机会，不妨就花一段时间学学相关知识。</p>

<p>当然永远都会出现新的问题，我们的修改过程也就永远不会终止，所以我们的第二步是「永远的第二步」。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>为了行文简化，再说一点：本文中凡出现需要执行的命令，默认使用终端 (Terminal)。如不做特殊说明，请首先使用 <code>cd octopress</code> 命令进 <code>octopress</code> 文件夹，所出现的文件夹或者目录都以此目录为根目录。</p>

<h2 id="section-1">2. 简要说明</h2>

<p>对于博客系统的个性化修改，一般来说分为如下几个方面：</p>

<ul>
  <li>新主题安装：Octopress 本身有很多<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方主题</a>可以直接安装使用。</li>
  <li>基本配置：主要指博客作者，时间显示方式，目录层级关系等等。这部分信息主要通过 <code>_config.yml</code> 这个配置文件来修改。</li>
  <li>自定义主题模板：主要指顶部导航栏显示内容，侧边栏显示内容等等。这部分内容主要通过 <code>/source/_includes/custom</code> 这个目录下的相关文件来修改。</li>
  <li>插件安装：安装第三方插件以实现相应效果，比如侧边栏显示 Twitter 时间线等等。 主要与 <code>/plugins</code> 这个目录有关。</li>
  <li>样式修改：字体，配色等通过样式表修改的属性。主要通过修改 <code>/sass/custom/_styles.scss</code> 来实现。</li>
</ul>

<p>一般的 Octopress 教程会按照上面的列表分别进行讲解，而我们的修改方式是针对具体问题进行的，同一个问题可能会涉及到以上多方面的修改。这种分类讲解模式可能并不是很方便。所以我会把一些后期基本上不用做太多修改的，类别属性比较明显的放在前面单独讲，之后就按照单个问题来讲解。</p>

<h2 id="section-2">3. 新主题安装</h2>

<p>在你搭建博客的时候，Octopress 会为你安装默认的主题 Classic，但这个主题第一眼看上去很难说好看，所以可以考虑选择安装<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方主题</a>。</p>

<p>如果你能在上面的链接中找到满意的主题，按照主题的要求去安装部署即可。比如你喜欢 <a href="https://github.com/macjasp/cleanpress">CleanPress</a> 这款主题，你可执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
cd octopress
git clone git://github.com/macjasp/cleanpress.git .themes/cleanpress
rake install['cleanpress']
rake generate
</pre></div>
</div>
 </figure></notextile></div>

<p>我个人看过很多主题，但最终还是用了简洁素雅的默认主题。我并不需要太多的装饰<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，只要版面布局符合基本审美要求即可。另外，我也喜欢这个浓浓的黑客范儿。</p>

<p>当然默认主题也有很多令人不满意的地方，好在我们还可以修改，不着急，慢慢来。</p>

<h2 id="section-3">4. 基本配置</h2>

<h3 id="section-4">4.1 域名，网站标题，作者</h3>

<p>当你打开搭建好的博客后，你会发现博客的标题是 My Octopress Blog，副标题是 A blogging framework for hackers.</p>

<p>当你把第一篇文章发布到博客的时候，你会发现文章底部显示 “posted by Your Name”，也就是说原本应该出现你名字的地方成了系统默认的两个英文单词 “Your Name”。</p>

<p>所有以上这些信息都可以通过基本配置文件 <code>_config.yml</code> 来修改。先在 <code>octopress</code> 文件夹下找到这个文件，用你喜欢的文本编辑器打开（我喜欢 TextMate 2），你会发现如下信息:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">url</span>: <span class="string"><span class="content">http://yoursite.com</span></span>  <span class="comment">#这里改为你网站的域名</span>
<span class="key">title</span>: <span class="string"><span class="content">My Octopress Blog</span></span>  <span class="comment">#这里改为你想要的网站标题</span>
<span class="key">subtitle</span>: <span class="string"><span class="content">A blogging framework for hackers.</span></span> <span class="comment">#这里改为你的博客副标题</span>
<span class="key">author</span>: <span class="string"><span class="content">Your Name</span></span> <span class="comment">#这里改为博客作者的名字，也就是你的名字</span>
<span class="key">simple_search</span>: <span class="string"><span class="content">https://www.google.com/search</span></span> <span class="comment">#这是默认搜索引擎，可以先不管</span>
<span class="key">description</span>: <span class="comment">#网站描述信息</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>按照我给出的 # 后面的提示信息做相应修改即可，请注意，诸如<code>url: </code>中的冒号必须是英文冒号，并且要符合英文标点符号使用规范：冒号后必须空格。</p>

<h3 id="section-5">4.2 日期格式</h3>

<p>我们暂且把 <code>_config.yml</code> 文件放到一边，再回头看博客主页，你会发现每条博客上面的日期和文章尾部的日期都是诸如 <code>Apr 28th 2014</code> 这样的格式。我们当然是想把它变成中文的「2014 年 4 月 28 日」这样的格式，那么再次回到 <code>_config.yml</code> 文件，顺着刚才那几行代码往下看，你会发现这样一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">date_format</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ordinal</span><span class="delimiter">&quot;</span></span> <span class="comment">#默认日期显示方式</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>请把其中的 <code>"ordinal"</code> 改为 <code>"%Y 年%-m 月%-d 日"</code>，并保存。</p>

<h3 id="section-6">4.3 文章链接形式</h3>

<p>回到博客，点开你发表的文章，这是你看一下地址栏，发现网址（也就是这篇文章的链接）是类似这样的形式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain_name]/blog/2014/04/28/Post-Title/
</pre></div>
</div>
 </figure></notextile></div>

<p>对我们个人博客而言，这种层级显得太多，我个人推荐如下两种地址生成方式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
http://[your_domain_name]/blog/20140428/Post-Title.html/
http://[your_domain_name]/blog/Post-Title.html/ # 这也是本博的生成方式
</pre></div>
</div>
 </figure></notextile></div>

<p>怎么实现呢？接着回到<code>_config.yml</code> 文件，往下看，找到：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">permalink</span>: <span class="string"><span class="content">/blog/:year/:month/:day/:title/</span></span> <span class="comment">#文章固定链接</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>按照如下方式修改（二者任选其一）并保存：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">permalink</span>: <span class="string"><span class="content">/blog/:year:month:day/:title.html/</span></span> <span class="comment">#实现第一种</span>
<span class="key">permalink</span>: <span class="string"><span class="content">/blog/:title.html/</span></span> <span class="comment">#实现第二种</span>
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="section-7">4.4 分类目录前缀</h3>

<p>在你文章底部日期右边是该文章所属的分类，点击它，会显示该分类下所有的文章<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。但你发现该目录标题前有一个前缀 “Categories”，这当然没错，但我们希望它是汉语。</p>

<p>回到<code>_config.yml</code> 文件，添加下面一行代码并保存：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">category_title_prefix</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">分类：</span><span class="delimiter">&quot;</span></span> <span class="comment"># 修改分类前缀</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>理论上可以添加到任何位置，但为了显示直观，建议加到 <code>category_dir: blog/categories</code> 下一行。</p>

<h3 id="section-8">4.5「继续阅读」按钮</h3>

<p>如果你希望你的文章在首页显示摘要，点击类似「继续阅读」这样的按钮查看全文，可以在你的文章中插入 <code><!--more--></code>，这样在这个标记之前的内容会出现在首页。你可以试着在你的文章中插入这个标签，会发现首页会在这里出现一个<code>Read on &rarr;</code>这样的按钮，当然我们也希望他是汉语。</p>

<p>回到<code>_config.yml</code> 文件，找到这一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">excerpt_link</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Read on &amp;rarr;</span><span class="delimiter">&quot;</span></span>  <span class="comment"># &quot;Continue reading&quot; link text at the bottom of excerpted articles</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>然后把引号中高亮显示的部分替换为你想要的文字，比如「阅读全文」，并保存。</p>

<p>修改到这一步，你肯定很想看看效果，现在执行如下命令，重新生成并部署页面：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
rake generate
rake deploy
</pre></div>
</div>
 </figure></notextile></div>

<p>看看博客，我们想要的效果都已经实现了吧。</p>

<h3 id="markdown-">4.6 修改 Markdown 文件后缀</h3>

<p>Octopress 默认日志文件后缀是 .markdown，但现在大多数 Markdown 文件的后缀是 .md，推荐使用这种更为简洁的后缀。</p>

<p>用文本编辑器打开 rakefile 文件，找到如下两行代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>rakefile </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
new_post_ext    = <span class="string"><span class="delimiter">&quot;</span><span class="content">markdown</span><span class="delimiter">&quot;</span></span>  <span class="comment"># default new post file extension when using the new_post task</span>
new_page_ext    = <span class="string"><span class="delimiter">&quot;</span><span class="content">markdown</span><span class="delimiter">&quot;</span></span>  <span class="comment"># default new page file extension when using the new_page task</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>改为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>rakefile </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
new_post_ext    = <span class="string"><span class="delimiter">&quot;</span><span class="content">md</span><span class="delimiter">&quot;</span></span>  <span class="comment"># 默认新日志文件后缀</span>
new_page_ext    = <span class="string"><span class="delimiter">&quot;</span><span class="content">md</span><span class="delimiter">&quot;</span></span>  <span class="comment"># 默认新页面文件后缀</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>第二行是默认新页面文件后缀，如果不明白新页面具体指什么，后面的文章中会有讲解。</p>

<h3 id="markdown--1">4.7 修改默认 Markdown 解释器</h3>

<p>Octopress 默认的 Markdown 解释器是 rdiscount，个人更喜欢 <a href="http://kramdown.gettalong.org/quickref.html">kramdown</a>，支持 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide">Multi Markdown</a> 语法和 LaTeX，对于理工科博客 LaTeX 必不可少，而且据说 kramdown 更快，也是 Github 推荐的 Markdown 解释器。</p>

<p>首先用文本编辑器打开 <code>Gemfile</code> 文件，在文件末尾添加一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Gemfile </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
gem <span class="string"><span class="delimiter">'</span><span class="content">kramdown</span><span class="delimiter">'</span></span>
</pre></div>
</div>
 </figure></notextile></div>

<p>然后在终端 (Terminal) 执行如下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
sudo bundle install
</pre></div>
</div>
 </figure></notextile></div>

<p>回到<code>_config.yml</code> 文件，找到：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>_config.yml </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="key">markdown</span>: <span class="string"><span class="content">rdiscount</span></span>
<span class="key">rdiscount</span>:
  <span class="key">extensions</span>:
    - <span class="string"><span class="content">autolink</span></span>
    - <span class="string"><span class="content">footnotes</span></span>
    - <span class="string"><span class="content">smart</span></span>
</pre></div>
</div>
 </figure></notextile></div>

<p>把其中的 <code>markdown: rdiscount</code> 改为 <code>markdown: kramdown</code> 并删掉下面几行。当然如果你想保留原来的代码，以便以后研究，可以考虑把原来这几行代码注释掉（对于  yml 文件，就是在前面加 # ），被注释掉的代码对文件没有任何影响，除了能让你看得更直观之外。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<p>为了能够显示数学公式，我们需要添加 <a href="http://www.mathjax.org">MathJax</a> 支持，打开<code>source/_includes/custom/head.html</code> 文件，添加如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>source/_includes/custom/head.html </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="comment">&lt;!-- MathJax --&gt;</span>
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/x-mathjax-config</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">  MathJax.Hub.Config({
    <span class="key">tex2jax</span>: {
      <span class="key">inlineMath</span>: [ [<span class="string"><span class="delimiter">'</span><span class="content">$</span><span class="delimiter">'</span></span>,<span class="string"><span class="delimiter">'</span><span class="content">$</span><span class="delimiter">'</span></span>], [<span class="string"><span class="delimiter">&quot;</span><span class="char">\\</span><span class="content">(</span><span class="delimiter">&quot;</span></span>,<span class="string"><span class="delimiter">&quot;</span><span class="char">\\</span><span class="content">)</span><span class="delimiter">&quot;</span></span>] ],
      <span class="key">processEscapes</span>: <span class="predefined-constant">true</span>
    }
  });</span>
<span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/x-mathjax-config</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">    MathJax.Hub.Config({
      <span class="key">tex2jax</span>: {
        <span class="key">skipTags</span>: [<span class="string"><span class="delimiter">'</span><span class="content">script</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">noscript</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">style</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">textarea</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">pre</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">code</span><span class="delimiter">'</span></span>]
      }
    });</span>
<span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/x-mathjax-config</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="inline">    MathJax.Hub.Queue(<span class="keyword">function</span>() {
        <span class="keyword">var</span> all = MathJax.Hub.getAllJax(), i;
        <span class="keyword">for</span>(i=<span class="integer">0</span>; i &lt; all.length; i += <span class="integer">1</span>) {
            all[i].SourceElement().parentNode.className += <span class="string"><span class="delimiter">'</span><span class="content"> has-jax</span><span class="delimiter">'</span></span>;
        }
    });</span>
<span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/javascript</span><span class="delimiter">&quot;</span></span>
   <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="tag">&lt;/script&gt;</span>
</pre></div>
</div>
 </figure></notextile></div>

<p>这样你就可以是所有 LaTeX 语法在网页中输入公式了，比如</p>

<script type="math/tex; mode=display">
f'\left( x\right) = \lim _{x\rightarrow 0}\dfrac {f\left( x+\Delta x\right) - f\left( x\right)}{\Delta x}
</script>

<p>上面这个公式的源代码为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
$$
f'\left( x\right) = \lim _{x\rightarrow 0}\dfrac {f\left( x+\Delta x\right) - f\left( x\right)}{\Delta x}
$$
</pre></div>
</div>
 </figure></notextile></div>

<p>每次完成更新都记得把原始文件重新放到 Github 上，还记得命令吧：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
git add .
git commit -m &quot;备注内容&quot;
git push origin source
</pre></div>
</div>
 </figure></notextile></div>

<p>至此，我们博客的基本配置告一段落，你可以开始更新你的博客了。当然也许你注意到还有一些瑕疵，比如很多地方还是英文显示，不着急，先把问题记下来，等我 Octopress 系列的下一篇文章。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>想到这一节，我把博客的副标题也改为了「Hailong Hao’s Laboratory」，这里不仅是我的博客，也是用来试错的地方。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>这我留给了 <a href="http://haohailong.net/">http://haohailong.net/</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>当然如果你现在只有这一篇文章，也只会显示这一篇。<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>你会发现，之前在代码中的说明文字都是注释掉的。<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建流程 – Github Pages]]></title>
    <link href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/"/>
    <updated>2014-04-28T06:33:33+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages</id>
    <content type="html"><![CDATA[<p class="info">本文介绍如何在 Github Pages 上搭建 Octopress 博客，主要针对 IT 外行人士。科普文章用词未必精确，行家里手请不要太在意。主要参考 <a href="http://octopress.org/">Octopress 官网</a>安装教程。<br />
对了，我用的是 Mac，Windows 我不熟，我只知道 IE 浏览器。</p>

<ul id="markdown-toc">
  <li><a href="#octopress--github-pages">1. 为什么是 Octopress &amp; Github Pages?</a></li>
  <li><a href="#section">2. 准备工作</a>    <ul>
      <li><a href="#git-2">2.1 安装 git </a></li>
      <li><a href="#ruby-3">2.2 安装 Ruby </a></li>
      <li><a href="#github-">2.3 注册 Github 账号</a></li>
      <li><a href="#section-1">2.4 域名指向（可选）</a></li>
    </ul>
  </li>
  <li><a href="#octopress">3. 本地安装 Octopress</a></li>
  <li><a href="#octopress--github-pages-1">4. 将 Octopress 部署到 Github Pages</a>    <ul>
      <li><a href="#repository">4.1 新建库 (Repository)</a></li>
      <li><a href="#octopress--github-pages-2">4.2 将本地部署的 Octopress 发布到 Github Pages</a></li>
      <li><a href="#section-2">4.3 使用自己的域名（可选）</a></li>
    </ul>
  </li>
  <li><a href="#section-3">5. 发布新贴</a></li>
</ul>

<h2 id="octopress--github-pages">1. 为什么是 Octopress &amp; Github Pages?</h2>

<p>在做任何事情之前最好先问个为什么，尽管很多情况下未必有答案，但这个做法绝对有好处。用 Octopress 搭建博客，并托管到 Github Pages，撇除<a href="http://s.olo.la/KIoY">一些个人因素</a>之外，我想还有以下几点原因：<!--more--></p>

<ol>
  <li>
    <p>免费且独立。把 Octopress 博客系统搭建到 Github Pages 虽是免费，但不失独立性，即便 Github 全站关闭，你也将有一份本地全站备份，随时可以重新恢复。不必受托管商之气，而且还免费，如果你愿意，甚至可以自行插入广告挣钱。</p>
  </li>
  <li>
    <p>版本控制。写文章，建网站，做软件都需要修改，但有时候改完了又会后悔，如果有时光机就好了，Git 就是你的时光机。当然如果你不想了解这些看上去很唬人的 IT 名词，只是想写博客的话，请在需要的时候再研究这条的内容。</p>
  </li>
  <li>
    <p>相对其他托管到 Github 上的博客程序，Octopress 更加成熟易上手。打个比方，Jekyll 可以说是毛坯房，Hexo 和 Octopress 算是简装修，但相比 Hexo，Octopress 有更多装修范例和更多熟练的装修工人，更容易获取帮助。当然如果你只想住精装修的房子，那不得不花点钱上 WordPress 了。</p>
  </li>
  <li>
    <p>使用 Markdown。Markdown 是现在最为流行的轻量级标记语言，也是已故的天才 Aaron Swartz 留给世人最好的礼物，窃以为每个在互联网上发布文章的人都该掌握。</p>
  </li>
  <li>
    <p>按照官方的说法，Octopress 是个「为黑客设计的博客框架<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」，这很酷，你不觉得吗？</p>
  </li>
</ol>

<p>如果你之前没有写过博客，打算开始搭建自己第一个博客的话，其实也不妨试试 Octopress，免费还能学到东西，何乐而不为？</p>

<h2 id="section">2. 准备工作</h2>

<p>既然是为黑客设计的博客框架，安装起来肯定没有像普通应用程序那么简单，需要一些准备工作，但请相信我，并不复杂。</p>

<h3 id="git-2">2.1 安装 git <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p>既然要使用 Github，那么肯定首先要安装 Git，这个很简单：</p>

<ol>
  <li>
    <p><a href="http://git-scm.com/">点击这里</a>到 Git 官方网站。</p>
  </li>
  <li>
    <p>找到下图所示的下载链接，按照提示下载并安装。</p>

    <p><img src="http://s.olo.la/6JZw.png" /></p>
  </li>
</ol>

<h3 id="ruby-3">2.2 安装 Ruby <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h3>

<p>先说句题外话，其实我是从 Ruby 语言才知道有<a href="http://zh.wikipedia.org/wiki/誕生石">诞生石</a>这种说法的。安装 Ruby 稍稍有些复杂，不过你只要按照以下步骤一步一步来就好了：</p>

<ul>
  <li>安装 HomeBrew</li>
</ul>

<p><a href="http://brew.sh/index_zh-cn.html">HomeBrew</a> 是一个非常有用的软件包管理系统，你可以把它想象成一个稍微抽象一点的 Mac App Store. 正如我们用 Mac App Store 来安装其他软件一样，我们这一步安装 HomeBrew 的目的是为了安装别的软件 (Ruby) 。当然 Mac App Store 和 HomeBrew 本身也是软件。</p>

<p>安装 HomeBrew 非常简单，打开终端 (Terminal)，执行以下命令（所谓「执行」即「输入+回车」，下同）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;
</pre></div>
</div>
 </figure></notextile></div>

<p>如果在执行上如命令的时候弹出需要安装 Xcode Command Line Tool 的提示，直接点击安装即可。</p>

<p>安装好之后最好先执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
brew doctor
</pre></div>
</div>
 </figure></notextile></div>

<p>此条命令用来诊断安装中出现的问题并提示修复方法，如果没有问题则会显示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
Your system is ready to brew.
</pre></div>
</div>
 </figure></notextile></div>

<p>如遇问题，则按照提示处理，如果不懂如何处理可以先试着执行后面的步骤，如果能成功，则没有太大问题，毕竟我们只是想写博客而已。当然，做任何事情之前，备份是必须的。</p>

<ul>
  <li>使用 RVM 安装 Ruby</li>
</ul>

<p>执行以下命令安装 RVM，最新的稳定版 Ruby 也会随之安装：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
curl -L https://get.rvm.io | bash -s stable --ruby
</pre></div>
</div>
 </figure></notextile></div>

<p>为避免出现问题，可执行以下命令安装 Ruby 2.0.0: </p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
rvm install 2.0.0
rvm use 2.0.0
rvm rubygems latest
</pre></div>
</div>
 </figure></notextile></div>

<p>可以执行 <code>ruby --version</code> 命令来查看现在使用的 Ruby 版本，确保正在使用的是 Ruby 2.0.0</p>

<h3 id="github-">2.3 注册 Github 账号</h3>

<p>这个没什么好说的，早晚需要，去 <a href="http://github.com">http://github.com</a> 注册吧。</p>

<h3 id="section-1">2.4 域名指向（可选）</h3>

<p>如果你有自己的域名可用，可以在这时就配置好，毕竟解析起来需要一段时间，不如在我们搭建博客的时候让它开始，这样我们搭建完成后，基本上就可以直接用自有域名访问了。</p>

<p>如果你用的是顶级域名，比如 shengmingzhiqing.com, 请创建两个 A 记录 (A Record) 分别指向 <code>192.30.252.153</code> 和 <code>192.30.252.154</code>.</p>

<p>如果你使用二级域名，比如 blog.shengmingzhiqing.com, 请将该域名的 CNAME 指向 <code>[your_username].github.io</code>, 把其中的 [your_username]换成你自己在 Github 上的用户名。</p>

<p>如果你暂时没有域名，这一步可以暂时不用管。</p>

<h2 id="octopress">3. 本地安装 Octopress</h2>

<p>终于进入正题了。有了前面的准备工作，安装 Octopress 显得非常简单：</p>

<p>首先，打开终端 (Terminal) 执行如下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>git clone git://github.com/imathis/octopress.git octopress
cd octopress</pre></td>
</tr></table>
 </figure></notextile></div>

<p>上面的代码中，第一行的作用是把 Octopress 克隆到本地磁盘，将会在你的本地<code>~/user/yourusername</code> 这个文件夹下生成一个名为 octopress 的文件夹。如果你不知道 yourusername 是什么，其实就是你每次打开终端时，$ 这个符号前面显示的那玩意。</p>

<p>第二行的作用是进入这个新建的 octopress 文件夹。这一步可能会碰到一个「是否要信任 .rvmrc file」的问题，输入 yes. </p>

<p>然后我们开始安装 Octopress 所必需的依赖项(dependencies)，执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
gem install bundler
bundle install
</pre></div>
</div>
 </figure></notextile></div>

<p>然后执行如下命令安装默认主题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
rake install
</pre></div>
</div>
 </figure></notextile></div>

<p>本地安装完毕。顺便说一句，所谓 rake 就是 ruby make 的缩写。</p>

<p>这时你执行如下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
rake preview
</pre></div>
</div>
 </figure></notextile></div>

<p>然后在浏览器内输入 <code>http://localhost:4000/</code>，即可看到我们搭建完成的博客。也许并不好看，但很令人开心，不是么？</p>

<p class="warning">注意，以上各步中如果出现权限问题（关键词 permission），无法完成（关键词 abort）的话，请在各命令前加上 <code>sudo+空格</code>，如有提示，请输入电脑登录密码。</p>

<h2 id="octopress--github-pages-1">4. 将 Octopress 部署到 Github Pages</h2>

<h3 id="repository">4.1 新建库 (Repository)</h3>

<p>用刚刚注册的 Github 账号登录，然后在点击页面右上角的加号，在弹出菜单中点击 <code>New Repository</code>: 如图所示</p>

<p><img src="http://s.olo.la/9TgX.png" /></p>

<p>然后会跳转到一个新建库 (Create new repository) 的页面，在<code>Repository name</code>一栏填 <code>[your_username].github.io</code>，[your_username] 是你 Github 上的用户名，请务必按照此格式填写，否则无法在 Github 上部署博客。然后点击 <code>Create repository</code> 按钮提交。</p>

<p>如果一切顺利会出现一个页面，有一个 SSH 地址，形如 <code>git@github.com:[your_username]/[your_username].github.io.git</code>，下一步会用到。</p>

<h3 id="octopress--github-pages-2">4.2 将本地部署的 Octopress 发布到 Github Pages</h3>

<p>打开终端 (Terminal)，执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
cd octopress
rake setup_github_pages
</pre></div>
</div>
 </figure></notextile></div>

<p>然后会出现一个问句，请把 4.1 步生成的 SSH 地址粘贴到这里，然后回车继续。</p>

<p>执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>rake generate
rake deploy
</pre></td>
</tr></table>
 </figure></notextile></div>

<p>第一行命令用来生成页面，第二行命令用来部署页面，可按照字面意思理解。如果理解不了，可以暂且不管。任何一步如果出现失败提示，请使用 <code>sudo</code>。</p>

<p>如果上述内容完成，即可使用 http://[your_username].github.io/ 访问页面，将会出现一个和在本地预览时相同的页面。</p>

<p>然后，不要忘了把源文件全部发布到 <code>source</code> 分支下面，再一次可以看不懂<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>，执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
git add .
git commit -m &quot;备注内容&quot;
git push origin source
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="section-2">4.3 使用自己的域名（可选）</h3>

<p>如果你有自己的域名，并且想指向这个新博客的话，请首先确保执行了 2.4 节中的内容。如果没有执行，可以随时执行。</p>

<p>然后执行下面的命令，注意把 <code>your-domain.com</code> 换成你自己的域名。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
echo 'your-domain.com' &gt;&gt; source/CNAME
</pre></div>
</div>
 </figure></notextile></div>

<p>然后再次执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
rake generate
rake deploy
</pre></div>
</div>
 </figure></notextile></div>

<p>这样你就可以使用自己的域名了。域名解析需要一段时间，如果没有马上生效，请不要着急。如果长时间没有生效，请确保完整执行了 2.4 节和本节内容。</p>

<h2 id="section-3">5. 发布新贴</h2>

<p>博客搭建好了，我们可以开始我们的第一贴了。那么怎么发布新贴呢？如果你真的想像个黑客一样写博客，我们可以继续使用我们的终端 (Terminal) 和命令行，执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
cd octopress
rake new_post[&quot;Post Title&quot;]
</pre></div>
</div>
 </figure></notextile></div>

<p>把其中的 Post Title 替换为你想写的文章标题。然后会有一个名为 <code>yyyy-mm-dd-Post-Title.markdown</code> 的文件在 <code>octopress/source/_posts</code> 目录下生成，其中 yyyy-mm-dd 是你当时的日期。然后执行以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
cd source/_posts/
vim yyyy-mm-dd-Post-Title.markdown
</pre></div>
</div>
 </figure></notextile></div>

<p>即可用 vim 编辑器编辑的刚才的文章了，好吧我知道你作为这篇文章的读者并不是一个能熟练使用 vim 的人，那么请在命令行输入 <code>:q</code>退出这个编辑器。如果你不想假装是个黑客的话，其实发布文章并不需要这么麻烦。</p>

<p>我们直接打开 <code>octopress/source/_posts</code> 文件夹，找到刚才生成的文件，用你喜欢的 Markdown 编辑器（免费的我推荐 <a href="http://mouapp.com">Mou</a>，收费的我推荐 <a href="http://bywordapp.com">Byword</a>）或者文本编辑器打开，对文章内容进行编辑。</p>

<p>打开文件后，你会发现文章开头有这么一段信息:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre>---  
layout: post  
title: &quot;Post Title&quot;  
date: yyyy-mm-dd hh:mm:ss  
comments: true  
categories: &quot;&quot;  
---</pre></td>
</tr></table>
 </figure></notextile></div>

<p>这其实是这篇文章的元数据：<code>layout</code> 暂时不要理会；<code>title</code> 是这篇文章显示在最终网页上的标题；<code>date</code> 部分是详细的文件生成时间，如 <code>2014-04-28 03:35:00</code>；<code>comment</code> 部分表示是否允许评论，目前显示是允许，如果想关闭评论，请改为 <code>false</code>；<code>categories</code> 指这篇文章的分类目录，请在后面引号中输入，如果没有该目录，则会自动生成。请不要删除这段信息，在这段信息下面开始你的文章内容。</p>

<p>这件事情给我们的启发是，以后发布文章，其实并不需要使用终端命令行生成文件。可以直接将自己写好的文章放到这个文件夹下面，当然请按照 <code>yyyy-mm-dd-Post-Title.markdown</code> 这样的文件格式命名，同时记得在文章前面添加元数据信息。这种做法生成的文章与上面的方法无异。如果你觉得添加元数据信息过于麻烦，推荐一个非常好用的工具：<a href="https://smilesoftware.com/TextExpander/index.html">TextExpander</a>。</p>

<p>在文章写好之后，使用命令行执行（仔细观察命令，像不像 generate 和 deploy 的合体？）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
rake gen_deploy
</pre></div>
</div>
 </figure></notextile></div>

<p>同样，如果在本节中，任何命令执行失败，没有取得想要结果，请在前面加 <code>sudo</code>。是时候说一说 <code>sudo</code> 命令了，这其实是 super do 的缩写，之所以用它是因为，一般而言 Mac 上最高权限的<code>root</code> 账户默认是关闭的。我们自己的账户哪怕是管理员也在一些地方没有权限操作，super do 其实就是越权操作的意思，因此也往往需要输入密码，一般而言短时间内不需要输入第二次。</p>

<p>这样你的第一篇日志就发布出来了，恭喜你正式开通了基于 Octopress 的独立博客。</p>

<p>当然你会发现似乎文章作者不是你，界面是英文显示，整体排版效果差强人意等等问题，不着急，我们会在接下来的文章中讲解如何配置和修改 Octopress 博客。</p>

<p>对于实用性知识，我的向来的态度是「精益学习」，先把最核心最当紧的问题解决了，其余问题发现一例解决一例，不断在干中学，不断版本迭代。后面讲到如何配置修改 Octopress 博客的文章就秉承这一原则，先将遇到了什么问题，然后将如何寻找解决方法。</p>

<p>顺便说一句，我可能算是第一个提出「精益学习」这个概念的人吧，这个想法来自「<a href="http://zh.wikipedia.org/wiki/精益创业">精益创业</a>」。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>A blogging framework for hackers.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>什么是 Git？<a href="http://zh.wikipedia.org/wiki/Git">点这里</a>，看完你能了解个大概，这基本上已经够了，但如果还需更多知识， 就看看 wikipedia 和 Git 官网。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>什么是 Ruby？<a href="http://zh.wikipedia.org/wiki/Ruby">点这里</a>，看完你能了解个大概，这基本上已经够了，但如果还需更多知识，就看看 wikipedia 和 <a href="https://www.ruby-lang.org/en/">Ruby 官网</a>。<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>如果想看懂，这里有个快速上手指南：<a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a><a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 每个人都该为自己打造专属的写作环境]]></title>
    <link href="http://shengmingzhiqing.com/blog/everybody-should-build-his-own-writing-space.html/"/>
    <updated>2014-04-27T00:00:00+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/everybody-should-build-his-own-writing-space</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">我的博客史</a></li>
  <li><a href="#section-1">每个人都该为自己打造专属的写作环境</a></li>
  <li><a href="#wordpress--octopress">WordPress &amp; Octopress</a></li>
  <li><a href="#octopress-">关于 Octopress 搭建</a></li>
</ul>

<h2 id="section">我的博客史</h2>

<p>每次搭建新博客都想把自己写博客的历史回顾一遍，这次索性来个彻底回顾，直接从最早接触互联网说起吧。</p>

<p>如果没有记错，2000 年在家乡的一个网吧第一次接触互联网。当我试着把从杂志上抄来的瓦斯科达伽马足球俱乐部的官方首页输入 IE 地址栏时，我并不相信五分钟后竟然能将页面显示出来。<!--more--><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>这次体验可谓惊艳，我做梦也没有想到我竟然可以和远在南美的刚刚从世俱杯上得到的一个球队名字建立起某种联系，从此便一发不可收拾，爱上了互联网。后来一段时间里，IE 浏览器几乎成了我上网的代名词，最早的聊天都是在网易聊天室开始的。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>即使在反恐精英最为流行的时候，我也不忘放下游戏浏览一下网页，因为在当时的我看来局域网根本不算网，来网吧上局域网简直是暴殄天物，哪怕是玩游戏。</p>

<p>如果没有记错的话，初中我就在搭建个人的论坛，个人网站，甚至想过利用免费空间搭建一个江湖游戏系统——这样我就可以给自己设置最高属性。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>高中的时候自己搭建过完整的论坛，只不过没有服务器，后来只好去做学校论坛的超级版主，同时还在一个当时比较知名的论坛上当过分版版主。后来听说了博客，在当时的我看来，这玩意太小儿科了：所有人只要注册账号就可以开通，完全没有技术含量，于是就没有太关注。心里想的是，我要做就做个人网站。直到 2006 年高中毕业，我发现无论是建个人网站也好，建其他什么东西也罢，是时候开始了。于是我开始搜索网上可以免费建站的空间，结果非常令人失望。那是个互联网公司不知道该怎么办的年代，拿免费邮箱来说，开始普遍都给 50 MB，到后来最慷慨的网易才给 25 MB，没记错的话新浪是 5 MB，微软 hotmail 是 2 MB。邮箱尚且如此，哪里能找到免费的建站空间呢？<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>于是回过头来看博客，发现其实未尝不是一种良好的选择，于是就在当时最流行的新浪微博上注册了一个免费账号。写了不到两年，看到了罗永浩对新浪博客的一些看法，深表认同，于是决定离开。不过新的博客网站并不好找，先后尝试了好几家，最终留在了<a href="http://www.blogbus.com/">博客大巴</a>。</p>

<p>博客大巴的体验非常棒，如果你对界面有什么不满意，可以自行做各种修改，只要你稍微懂一点 html （和 CSS?），甚至只要懂一点搜索，基本上都能改出你要的效果。后来越用越喜欢，购买了他们的会员服务，并绑定了顶级域名。为此我还收到了博客大巴寄来的礼物。总的来说，这是我最喜欢的一家博客托管商。</p>

<p>可突然有一天，我在博客大巴的博客在未接到任何通知的情况下，被锁定了 20 多篇文章，并在事后也没有接到任何解释，哪怕是群发的官样文章的通知。当然这不怪他们，冤有头债有主，前方左转你也知道是什么。但这种感觉我非常不爽，于是在这种半被动的情况下，开始了我的独立博客之旅。</p>

<p>当时最流行的博客系统就是现在也最流行的 WordPress，于是我在淘宝上买了海外虚拟主机，用最傻瓜的方式搭建起了现在的个人博客「<a href="http://haohailong.net/">郝海龙</a>」。</p>

<h2 id="section-1">每个人都该为自己打造专属的写作环境</h2>

<p>WordPress 是一款功能强大的博客系统<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>，本身就有各种插件，如果你再懂一点 html 和 CSS 知识的话，几乎没有实现不了的功能。就页面显示效果而言，WordPress 有各种主题资源，几乎可以把你的博客做成任何你想要的风格。</p>

<p>但一直以来，我的博客页面显得非常凌乱。前后在主题上花了 200 美元，这个问题依然没有得到良好的解决。一开始认为主要原因是外国主题水土不服，后来发现很多外国主题在别人的博客上显示非常不错，但一放到自己的博客上就变得差强人意。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>左思右想对比来对比去，不知道问题出在哪里。</p>

<p>前一段时间给 52Podcast.com 搭建新的 WordPress 博客，作为一个外行的「技术总监」，必须现学现卖。在网上浏览资料的时候，发现了阳志平先生的博客「<a href="http://www.yangzhiping.com">阳志平的网志</a>」。他博客的一个重要主题就是理想的写作环境。对于他的观点，可能不同人有不同的看法。但我至少能看出，他心目中理想的写作环境至少是他目前摸索出来的，对他自己来说最佳的写作环境。虽然我写作类型与阳先生不同，但他这些文章让我有很大启发，我突然明白：<strong>每个人都该为自己打造专属的写作环境</strong>。</p>

<p>就我个人而言，有一部分文章类型是与阳先生一致的，比如一些关于计算机或者是经济学的文章：这些文章可能会用到公式，代码等非自然语言内容。对于这些文章而言，Markdown + R (或者 LaTeX) 可能就是最合适的写作环境，而其他一些比如剧本、诗歌之类的问题，可能就与 LaTeX 之类的排版系统关系不大，我应该做的是针对自己写作类型，为自己量身定制一套写作方式和写作环境。想到这一节不禁喟叹自己反应为何如此之慢，这样的事情并不是没有人做过，比如知名写作软件 <a href="http://www.literatureandlatte.com/scrivener.php">Scrivener</a> 的作者。</p>

<p>同时，我也想明白了博客显示效果差的重要原因：文章类型太杂。诗歌和理工科类文章本身对形式要求就很高，形式本身也是内容的一部分，这两类文章放在一起总是冲突不断：无奈，我博客上这两类文章居多。于是我觉得应该把这两类文章独立显示，当我想明白这一节，又发现其实很多博主已经在这么做了，比如<a href="http://blog.farmostwood.net">木遥</a>，只能再一次感慨自己的后知后觉。</p>

<p>要实现不同类型文章独立显示，一个理念上最简单直接的办法就是，再搭建一个新的博客专门显示其中一类文章。当然，实际操作起来，可能在原博客上把文章分开更简单。但我还是选择了再搭建一个新站，主要有以下几个原因：</p>

<ol>
  <li>
    <p>虽然不是科班出身，但从小对 IT 感兴趣，如果有机会练练手自然不愿意放过。</p>
  </li>
  <li>
    <p>一直对 <a href="http://git-scm.com/">Git</a> 和 <a href="https://github.com/">Github</a> 很感兴趣，想通过这个 Github Pages 上搭建的新博客开始自己的 Github 之旅。</p>
  </li>
  <li>
    <p>受阳志平先生影响，觉得 Github Pages 非常适合用来写偏向理工科的博客。</p>
  </li>
</ol>

<p>搭建新站的过程一波三折：一开始，我想直接使用 Jekyll 来搭建博客，最终碍于没有好看的博客主题，选择放弃。后来又试了很多人推荐的轻量级博客系统 Hexo，结果发现这货仅有的模板都太偏文艺，这与我搭建一个理工类博客的初衷不符。最后还是选择了一开始就知道的，最为大众的 Octopress。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p>老实说，Octopress 好看的模板也不多，不过好在大部分模板都比较适合理工科写作，同时如果你有一颗不安分的心，很多功能都可以自行定制。</p>

<p>经过大约一个礼拜的搭建和修改，终于出现了现在你们看到的「<a href="http://shengmingzhiqing.com/">生命之氢</a>」这个新博客。以后偏向理工科的内容我会发布在这里，同时将陆续迁移 WordPress 博客上所有偏向理工科的内容到这个博客，原博客将继续保持更新：斗胆说一句，人文和科技本身就是我的两面。</p>

<h2 id="wordpress--octopress">WordPress &amp; Octopress</h2>

<p>作为一个同时使用 WordPress 和 Octopress 的人不比较一下这两个系统，似乎有点说不过去。不过我还是不想比较，我想同时推荐这两种博客系统，这也是我不用 vs. 而用 &amp; 的原因。</p>

<p>首先，并不是说 WordPress 不适合理工类文章。事实上有很多程序员都在用 WordPress，对于公式显示现在也有官方的 LaTeX 插件。</p>

<p>其次，Octopress 也完全可以用作普通的博客。虽然没有 WordPress 那么多插件，但只要你有一点点 IT 知识，甚至常识（比如搜索），就能实现很多好到出乎意料的功能。</p>

<p>如果你像我一样，想同时用两个博客更新不同类型的内容的话，我还是建议把偏向理工类的文章放到 Octopress，毕竟 Octopress 的 Slogan 是「像黑客一样写博客」。</p>

<p>二者选其一的话，没有 IT 知识的，建议选 WordPress，有 IT 知识的建议选 Octopress。当然如果你不想支付服务器费用，并愿意自己学习 IT 知识，那么 Octopress 仍然是首选。</p>

<h2 id="octopress-">关于 Octopress 搭建</h2>

<p>在 Octopress 搭建过程中，除了<a href="http://octopress.org/">官网</a>的教程之外，还参考了很多网友撰写的教程，同时发现了<a href="http://shengmingzhiqing.com/ebauche/jekyll-octopress-blogs.html">一些潜伏在 Octopress/Jekyll 上的博客</a>。</p>

<p>在看这些博客和教程的过程中，有一件事一直想不明白：为什么几乎每一个搭建 Octopress 的博主都想会写一个搭建和配置教程？</p>

<p>前些天复活节假期结束后，我捡起 Octopress 来一看，发现自己对于如何搭建，如何配置全都忘了。我想到也许某些教程不过是自己的备忘罢了。</p>

<p>在做一些事情的时候不一定要明白其所以然，但一定要做好记录，否则当你有能力并有精力了解的时候又得重新做一遍。</p>

<p>最近搭建博客的过程让我再一次明白工作日志的作用，那么这算是第一篇，接下来的日志中我要开始撰写我的 Octopress 搭建教程了。所有关于 Octopress 的文章，我都会放在 <a href="http://shengmingzhiqing.com/blog/categories/octopress/">Octopress</a> 分类下。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>对于 56K Modem 的年代，5 分钟能加载一个远在南美的网站已经算是非常不错的速度了。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>第二次上网就找了个网络女友，其实这事更惊艳。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>不知道今天的新生代网友是否还知道什么是江湖，其实就是一种基于文字聊天的互联网游戏。<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>当时其实还没有意识到，免费的东西又诸多弊病，尤其是像个人网站这种东西万万不可过分依赖免费系统。<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>甚至可以说是内容管理系统，中小型网站直接使用 WordPress 搭建都不会有太大问题。<a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p>这词没用错，就该是「差强人意」的本义。<a href="#fnref:6" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:7">
      <p>准确地说，是在 Github 圈子里最为大众。<a href="#fnref:7" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[比特币问答录]]></title>
    <link href="http://shengmingzhiqing.com/blog/Bitcoin-QnA.html/"/>
    <updated>2014-04-23T00:57:00+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/Bitcoin-QnA</id>
    <content type="html"><![CDATA[<p class="info">本文作者参与比特币经济活动的主要目的是实践自己的理想，所有关于比特币的看法都基于这个前提，不作为投资和投机建议。警告：伴随高收益的永远是高风险。 </p>

<ul id="markdown-toc">
  <li><a href="#section">1. 为什么如此热衷比特币？</a></li>
  <li><a href="#section-1">2. 如果没有政府担保，凭什么相信这种货币？</a></li>
  <li><a href="#section-2">3. 既然你觉得政府不靠谱，你的意思是该把所有前都换成比特币？</a></li>
  <li><a href="#section-3">4. 那比特币到底是一种用什么担保的货币呢？</a></li>
  <li><a href="#section-4">5. 那如果背后的信用体系崩塌了，岂不就变成一堆无用的二进制数字了？</a></li>
  <li><a href="#section-5">6. 你是否觉得比特币在未来某一天会消亡？</a></li>
  <li><a href="#section-6">7. 照你这么说，比特币会威胁到政府的货币发行权，难道政府不会出台措施封禁掉比特币么？</a></li>
  <li><a href="#section-7">8. 如果大家都用比特币了，政府的税收怎么解决啊？（一个法国人问我的问题）</a></li>
  <li><a href="#section-8">9. 有人说比特币交易市场有「庞氏骗局」的某些特征，你怎么看？</a></li>
  <li><a href="#section-9">10. 现在大家对比特币的狂热怎么看着像 17 世纪荷兰的郁金香花球泡沫呢？</a></li>
  <li><a href="#section-10">11. 挖矿是什么意思？</a></li>
  <li><a href="#section-11">12. 为什么挖矿越来越难？</a></li>
  <li><a href="#section-12">13. 什么是矿机？</a></li>
  <li><a href="#section-13">14. 如果有人用公家电脑挖矿，岂不是空手套白狼？</a></li>
  <li><a href="#section-14">15. 既然有这种空手套白狼的机会，是不是说明比特币本身有漏洞呢？</a></li>
  <li><a href="#section-15">16. 既然挖矿难度越来越大，先挖矿的人可以获得更多比特币，这岂非对后进入者不公平？</a></li>
  <li><a href="#section-16">17. 可是三年前我不知道比特币这个东西啊，也不知道它会这么值钱，我怎么知道要去挖矿？</a></li>
  <li><a href="#qq-">18. QQ 提供了交流的平台，我没有一天不在用，创造了大量的价值，比特币怎么能比？</a></li>
  <li><a href="#section-17">19. 挖矿耗费了大量的电力和计算机运算能力，不是浪费资源吗？</a></li>
  <li><a href="#section-18">20. 为什么说比特币的发行方式更公平？</a></li>
  <li><a href="#q-">21. 比特币与 Q 币有什么区别？</a></li>
  <li><a href="#section-19">22. 比特币狂热怎么看着有点像传销？</a></li>
  <li><a href="#section-20">23. 如何说服楼下卖冰棍的大妈接受比特币支付呢？</a></li>
  <li><a href="#section-21">24. 卖矿机的人为什么自己不挖矿呢？</a></li>
  <li><a href="#section-22">25. 中本聪骰子靠不靠谱？</a></li>
  <li><a href="#section-23">26. 有人说比特币就是电子黄金，你怎么看？</a></li>
  <li><a href="#section-24">27. 那么比特币究竟哪里和黄金不一样？</a></li>
  <li><a href="#section-25">28. 你说比特币易于分割，那么最小能分割到什么程度？</a></li>
  <li><a href="#section-26">29. 比特币交易需要大量算力来确认交易，因此有了所谓的挖矿，可是到 2140 年以后，比特币总量不会再增多了，还有人愿意用自己的算力为别人确认交易吗？</a></li>
  <li><a href="#section-27">30. 手续费那么少，会有人愿意去为手续费而挖矿吗？</a></li>
</ul>

<h2 id="section">1. 为什么如此热衷比特币？</h2>

<p>因为他是一种最接近我理想中货币形式的货币：不依靠任何政府或者中央银行机构，完全按照一套固定的生成规则发行。尽管它在我看来可能还有一些缺陷，但我更愿意把它看成是一种自由货币的发端，从这个意义上讲，我把整个比特币经济圈都当成是一场社会实验。实验当然存在失败的可能性，可人类社会也是在不断的试错中发展的。但为了自己的理想做实验是一件幸福的事情，我已经为实验失败做了充足的准备。我的所有关于比特币的看法都是基于这个前提的，所以请不要把我这个系列的文章当作投资建议。非要听投资建议的话，我想说，高风险高收益。比特币的市值几千倍的涨，对应前面那句话，想想风险有多高。<!--more--></p>

<h2 id="section-1">2. 如果没有政府担保，凭什么相信这种货币？</h2>

<p>一个理性的人应该对任何事情都持怀疑态度，一个有人情味的理性的人至少对骗过他的人要持怀疑态度。所以说在问这个问题之前，建议翻翻历史，看看当权者骗过我们多少次呢？我想比你十个前女友加起来都多。对于我来说，宁愿相信一个看得明白的规则，也不愿相信一个曾经几次三番骗过我的人的承诺。</p>

<p>当然你可以说为了爱，我不在乎她骗我多少次。塞浦路斯那些和你一样想法的人眼睁睁的看着自己手里的钞票变成了银行的股票，而且还是被套牢的股票，这就是爱的代价。</p>

<h2 id="section-2">3. 既然你觉得政府不靠谱，你的意思是该把所有前都换成比特币？</h2>

<p>这个，我再说一遍，「一个理性的人应该对任何事情都持怀疑态度，一个有人情味的理性的人至少对骗过他的人要持怀疑态度。」你应该在很多地方听到过这样一句话：「不要把所有的鸡蛋全放在一个篮子里。」比特币完全可以成为你放鸡蛋的一个篮子。当然，如果你真的想把自己所有的鸡蛋全砸在一个篮子里以博取高收益的话，也是你个人的自由选择，而且确实有人这么做，看看瑞典海盗党的创始人 Rickard Falkvinge 就知道了。</p>

<h2 id="section-3">4. 那比特币到底是一种用什么担保的货币呢？</h2>

<p>如果说非要有担保的话，就是用信用担保的货币。有人愿意接受这种货币，那么你就能用这种货币来买东西。</p>

<h2 id="section-4">5. 那如果背后的信用体系崩塌了，岂不就变成一堆无用的二进制数字了？</h2>

<p>说得好，津巴布韦的货币已经接近一堆白纸和数字了。</p>

<h2 id="section-5">6. 你是否觉得比特币在未来某一天会消亡？</h2>

<p>肯定会有这么一天，但我觉得不太可能是因为信用崩塌。我觉得愿意接受它的人的群体一旦形成规模，就很难倒退回去，毕竟没有什么机构在那里疯狂印比特币让你手里的资产贬值。我更愿意相信比特币消亡的那一天是另一种更好的货币取代比特币的那一天。不过还是那句话，既然是社会实验，就存在实验失败的可能性。</p>

<h2 id="section-6">7. 照你这么说，比特币会威胁到政府的货币发行权，难道政府不会出台措施封禁掉比特币么？</h2>

<p>比特币是一种基于 P2P 技术的货币，政府要关停一个基于 P2P 技术的东西的难度和封禁全网差不多，所以哪怕真的有一天比特币威胁到了政府对金融的控制，政府也要权衡封禁这种虚拟货币的代价。何况，要撼动政府货币发行权没有想象的那么容易。</p>

<h2 id="section-7">8. 如果大家都用比特币了，政府的税收怎么解决啊？（一个法国人问我的问题）</h2>

<p>我觉得吧，别替政府瞎操心了，政府想收你钱有的是办法，还是先关心一下自己的养老金能否取出来比较靠谱。</p>

<h2 id="section-8">9. 有人说比特币交易市场有「庞氏骗局」的某些特征，你怎么看？</h2>

<p>你只是说有「某些特征」，那我承认，其实绝大多数投资都有「<a href="http://s.olo.la/LajZ">庞氏骗局</a>」的某些特征：你都要交钱给别人，别人都会承诺给你回报，权益可交易，都存在低买高卖的情况……不是吗？但你要说这就是「庞氏骗局」，建议先查查「庞氏骗局」的定义，相信我，虽然这个术语很唬人，但定义你肯定能看明白。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> </p>

<h2 id="section-9">10. 现在大家对比特币的狂热怎么看着像 17 世纪荷兰的郁金香花球泡沫呢？</h2>

<p>其实和上一个问题一样，很多东西都有相似的地方。一些人很狂热的做事情，无论具体在做什么，看他们的样子都差不多。但是类比的时候除了要关注相同的地方，更要看看不同的地方，比如郁金香花球会腐败变质（就像我上一段爱情一样），但基于信用的二进制数字却天长地久。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<h2 id="section-10">11. 挖矿是什么意思？</h2>

<p>挖矿就是比特币发行新货币的方式。简单来说，比特币交易的 P2P 网络上每一台电脑都在做交易确认，其中涉及到了大量的运算，如果你能率先计算出来并广播出去，就可以凭空获得一些比特币，这个过程有一点像你在金矿里挖出金子的感觉，因此称之为挖矿。</p>

<h2 id="section-11">12. 为什么挖矿越来越难？</h2>

<p>挖矿难的原因主要有两方面：1）从长期来看，比特币的创始人为了解决传统货币为人所诟病的通货膨胀问题，把比特币的生成速率以及未来总量都写死在算法当中了。比特币生成的速率越来越慢，并且是时间的函数，与参与挖矿的机器数量以及总计算能力无关。目前的生成速率是大约每十分钟 25 个比特币。2）短期来看，即使生成速率不变，由于参与挖矿的人原来越多，分到每个人手上的比特币自然也会变少。</p>

<h2 id="section-12">13. 什么是矿机？</h2>

<p>专门用来挖比特币的计算机。如前面所说，由于投入到挖矿的计算机越来越多，即使单位时间产生的比特币数量固定，分到每个人手上的比特币也变得越来越少，而具体分给每个人的份额取决于你在挖矿过程中所贡献的算力的百分比。普通的电脑的 CPU 以及显卡 GPU 的计算速度在挖矿中已经很难获得收益，因此有人专门为挖矿设计了芯片，并基于这种芯片组装了专门用来挖矿的机器，也就是矿机。这种矿机的计算速度可以达到原来 CPU 和 GPU 的数倍甚至数十倍。</p>

<h2 id="section-13">14. 如果有人用公家电脑挖矿，岂不是空手套白狼？</h2>

<p>这确实算是空手套白狼，公家电脑自己不用买，电费也不用自己出，如果能挖出比特币，收益全是自己的。之前也确实有人这么干过，不过如前面所说现在 CPU 和 GPU 基本上挖不出什么东西来了。</p>

<h2 id="section-14">15. 既然有这种空手套白狼的机会，是不是说明比特币本身有漏洞呢？</h2>

<p>这只能说是公家的监管有漏洞，与比特币本身无关。好比淘金热的时候，你可以用政府的挖掘机去给自己挖金子，这也算是空手套白狼。事实上各行各业都存在空手套白狼的情况，这并不能说明相关产品本身有漏洞。</p>

<h2 id="section-15">16. 既然挖矿难度越来越大，先挖矿的人可以获得更多比特币，这岂非对后进入者不公平？</h2>

<p>就持有比特币的数量以及比特币资产的市值而言，先挖矿的人确实获得了更多的收益。但任何一个新兴行业似乎都有这样的现象存在，腾讯首先进入了即时通讯领域，利用 QQ 赚取了大量的利润，现在要仿造一个类似 QQ 的软件太简单了，可以你却无法取得和腾讯一样的收益，这似乎也不怎么公平。其实，货币本身的功能就没有维持社会公平这一项。</p>

<p>当然谈到公平，必须要明确两个概念：结果平等和机会平等。先行者可以获得更多的收益，从结果而言，看上去并不平等；但从机会上讲，任何人都可以在那个时候挖矿，没有人阻止过你。比特币就结果而言确实不公平（事实上，在现实生活中，没有任何一直分配机制可以做到结果平等），但是所有人都有平等进入这个领域的机会。而且先行者有很大的风险，看看马化腾创业的心路历程，回顾一下那段历史你就知道当时倒掉多少家即时通讯工具，伴随高收益总是着高风险。如果比特币没有像今天这样受到人们的认可的话，早期比特币矿工的投入就全部浪费了，即便是今天这样的风险依然存在。</p>

<h2 id="section-16">17. 可是三年前我不知道比特币这个东西啊，也不知道它会这么值钱，我怎么知道要去挖矿？</h2>

<p>这个问题分两方面来看：首先，别人利用你不知道的一些信息赚取了比你更多的钱，这是这个社会的常态。最典型的例子是，咨询机构和培训班，就是利用这种信息不对称挣钱的。其次，没有人可以预知未来，如果你今天能知道三天后的股市行情，无论涨与跌，你都有办法挣钱。</p>

<h2 id="qq-">18. QQ 提供了交流的平台，我没有一天不在用，创造了大量的价值，比特币怎么能比？</h2>

<p>比特币正受到越来越多人的认可，即使是现在比特币也可以用来购买很多商品，支付各种款项，同时它也可以算是目前结算（尤其是大宗结算）最为方便的货币。这些难道不能算是价值么？你没有一天不聊 QQ，我想你就是今天不买东西，明天也会买的吧。</p>

<h2 id="section-17">19. 挖矿耗费了大量的电力和计算机运算能力，不是浪费资源吗？</h2>

<p>先扯一句别的，用专门的机器挖金矿，锻造成形，切割成块也耗费了大量的资源；同样，砍树，化成纸浆，添加各种辅料，制成特种纸张，印刷并添加各种防伪标识也耗费了大量的资源。比起这些来，比特币所耗费的资源要少的多。更重要的是，要把耗费的资源与产生的价值相比较，如果耗费的资源能够产生更大的价值，那么我想这种资源消耗就是值得的。比特币挖矿过程有如下价值：1）解决了结算过程需要的大量计算的问题；2）就挖矿者个人而言，可以获得一些有支付价值的货币；3）就整个比特币流通网而言，保证了一种相对公平相对透明的货币发行方式，可以对未来货币的总量做更为理性的预期——毕竟没有某个中央发行机构开动印刷机就可以神不知鬼不觉得从你口袋里掏钱。</p>

<h2 id="section-18">20. 为什么说比特币的发行方式更公平？</h2>

<p>比特币的产生是在全网均匀分布的，也就是说你参与了挖矿，就参与了货币的发行，而你行的那部分就落在了你自己的手里。而且发行的速率和规则都是透明的，即使不挖矿的人也可以对市场上的比特币数量有一个更好的预期。</p>

<h2 id="q-">21. 比特币与 Q 币有什么区别？</h2>

<p>虽然比特币与 Q 币目前都被称为「虚拟货币」，但这两种东西有本质的不同。</p>

<p>首先，腾讯公司掌握着 Q 币的发行权，理论上腾讯想发行多少 Q 币就可以发行多少 Q 币；而比特币的发行权不属于任何一个组织，而是由全网生成的，其生成速率和总量也被写死在算法中，从根本上遏止了通货膨胀。这也就是为什么比特币的出现是一次金融革命，而 Q 币的出现并没有引起太多关注的原因。</p>

<p>其次，Q 币只能用来购买腾讯公司内部发行的一些产品，而比特币的价值已经获得了很多人的认可，甚至全球最大的比特币交易市场 Mt.Gox 已经获得美国财政部金融犯罪执法网络处颁发的货币服务事务许可，至少说明比特币的「货币」属性已经受到了美国的官方的认可。一种可以与法币自由兑换的货币，理论上可以买到任何任何法币能够买到的东西。</p>

<p>最后，最重要的一点是，我更喜欢比特币。</p>

<h2 id="section-19">22. 比特币狂热怎么看着有点像传销？</h2>

<p>把对比特币的狂热说成是传销，是目前我见过的对比特币最无厘头的指控。简单来说，比特币最大的创新在于去中心化，而各类非法传销组织的核心架构都是一个中心化极其明显的金字塔型的结构。稍微了解一下这两种东西，相信不会把二者混淆在一起，如果想了解更多，可以<a href="http://shengmingzhiqing.com/blog/why-bitcoin-is-not-a-pyramid-scheme.html/">点击这里</a>查看我专门针对这一问题撰写的文章。</p>

<h2 id="section-20">23. 如何说服楼下卖冰棍的大妈接受比特币支付呢？</h2>

<p>一种货币的流通性是逐渐建立起来的，比特币虽然已经可以算作是一种货币，但它还是一种成长中的货币。等到比特币得到更多人的认可时，大妈也会知道这玩意有价值，可以用来买东西，这时她自然就愿意接受了。</p>

<p>更重要的是比特币现在是一种类似外汇的金融资产，你拿美元在中国买冰棍，大妈也会觉得兑换不方便，可能也不愿意接受，那怎么办？很简单，把美元换成人民币。自然，你也可以把比特币换成人民币去购买冰棍和煎饼菓子。货币的价值并不是只能用购买冰棍来体现，古人喝杯茶也不会动不动就掏一锭金子出来。</p>

<h2 id="section-21">24. 卖矿机的人为什么自己不挖矿呢？</h2>

<p>旧金山淘金热的时候也有卖铁锹和挖掘机的。每个人擅长的东西不同，对风险的偏好程度不同，对一件东西的价值判断不同，正是有这样的不同才促成的各种各样的交易。我想你不会问一个厨子为什么不去缝衣服。</p>

<h2 id="section-22">25. 中本聪骰子靠不靠谱？<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h2>

<p>我不知道你说的靠谱具体指什么？如果说指赢钱的话，那么我必须说十赌九输。尽管赌场获胜概率只比玩家高一点点，但这一点点足以使赌场赚翻，请相信概率论。如果你说的靠谱指无暗箱操作（现实生活中大多数赌场都有暗箱操作），那么中本聪骰子可以说是最靠谱的赌博游戏了。但终归是赌博游戏，别指望通过赌博来赚钱。</p>

<h2 id="section-23">26. 有人说比特币就是电子黄金，你怎么看？</h2>

<p>在我看来，把比特币比作黄金是目前为止最为接近的一种比喻。二者都没有担保方，总量都是固定的（至少相对固定），难以伪造（比特币几乎不可伪造），易于分割（事实上比特币更易于分割）。当然，既然是比喻，二者肯定不可能完全相同，因此也不能把适用于黄金的理论直接套在比特币上。</p>

<h2 id="section-24">27. 那么比特币究竟哪里和黄金不一样？</h2>

<p>首先，比特币是一组二进制数字，黄金具有实物形态（尽管其实物形态已经越来越不重要了）；其次，黄金本身作为金属有其实用价值（尽管大部分人购买黄金不是冲着这部分价值去的），而比特币显然不能锻造金属制品，不能打造首饰；第三，比特币交易更加方便。个人觉得一个比较恰当的说法是，比特币类似于黄金靠信用支撑的那部分价值单独提取出来而形成的一种货币。</p>

<h2 id="section-25">28. 你说比特币易于分割，那么最小能分割到什么程度？</h2>

<p>目前比特币的最小单位是「聪（satoshi）」（1 聪=0.00000001BTC）。如果有需要的话，还可以考虑引进更小的单位，数字是可以无限分割的。当然，就目前看来没什么必要，聪这个单位已经足够小了。</p>

<h2 id="section-26">29. 比特币交易需要大量算力来确认交易，因此有了所谓的挖矿，可是到 2140 年以后，比特币总量不会再增多了，还有人愿意用自己的算力为别人确认交易吗？</h2>

<p>其实挖矿所得除了增发的货币之外，还有一部分是交易手续费。事实上现在小额交易的话也会产生一部分手续费，这部分手续费都给了「矿工」。等到货币不再增发之时，你帮别人确认交易依然可以赚取手续费。</p>

<h2 id="section-27">30. 手续费那么少，会有人愿意去为手续费而挖矿吗？</h2>

<p>多与少取决于市场供求关系，当没有人愿意挖矿时，你去挖了，手续费就都是你的，这时你就不会嫌少了。</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>扩展阅读：<a href="http://shengmingzhiqing.com/blog/Is-Bicoin-a-Ponzi-scheme.html/">比特币是庞氏骗局吗？</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>扩展阅读：<a href="http://s.olo.la/oGcx">郁金香花球狂热</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>中本聪骰子是一种比特币赌博游戏，本文成文的时候中本聪骰子还没有私有化。<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一份 LaTeX 作业心得]]></title>
    <link href="http://shengmingzhiqing.com/blog/Gain-from-LaTeX-homeowork-1.html/"/>
    <updated>2013-11-24T03:03:00+01:00</updated>
    <id>http://shengmingzhiqing.com/blog/Gain-from-LaTeX-homeowork-1</id>
    <content type="html"><![CDATA[<p>由于工作原因，很多文档需要用 LaTeX 写作。去年曾经花三天时间阅读了 LaTeX 经典文档 <a href="http://mirror.ox.ac.uk/sites/ctan.org/info/lshort/english/lshort.pdf" target="_blank" title="The (Not So) Short Introduction to LaTeX2e"><em>The (Not So) Short Introduction to LaTeX2e</em></a>，但毕竟不是天天用它写文章，一些功能特性很快就忘了。</p>

<p>到了真正写论文的时候，我的同事 Alina 和导师 Cristina 都推荐我用 <a href="http://www.lyx.org" target="_blank" title="Lyx">Lyx</a>。我必须承认这个「所见即所得」的 LaTeX 编辑器功能很强大，可以满足你学术写作的大部分需求——如果不是全部的话。但是，不得不说 Lyx 有些功能的实现需要在版面美观方面做出一定让步。这让我这个细节强迫症痛苦不已。
<!--more--></p>

<p>于是，我决定转回 WYSIWYM <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>模式的 LaTeX，重新学习 LaTeX 也就成了必然，这一次我用的教材是 <a href="http://www.amazon.com/Guide-LaTeX-Edition-Helmut-Kopka-ebook/dp/B00256Z3G8/ref=tmm_kin_title_0?ie=UTF8&amp;qid=1385070416&amp;sr=8-1" target="_blank"><em>Guide to LaTeX</em></a>。为了避免再次忘掉，除了完成书上的练习之外，我决定给自己布置作业，以便可以应对真实的排版情况。</p>

<p>今天（其实已经是昨天了）我刚刚完成第一份作业——<a href="http://haohailong.net/archives/gre-sentence-completion-tutorial-8-1.vie" target="_blank">重排「《GRE 填空教程》英汉对照 8.1 版」</a>（感兴趣的朋友可以点击链接看一下我的作业做得怎么样）。完成这份作业总共花了我整整两天时间，每天几乎都是从早做到晚。一般而言，精疲力竭之后总会有不少收获，这次也不例外。一些心得摘录在此：</p>

<ol>
  <li>
    <p>再次明白了作业的重要性。很多事情不做，永远不可能知道是怎么回事：做这份作业之前，我以为我可以花半天时间搞定所有的事情，可是真正做的时候意外却接二连三的发生。</p>
  </li>
  <li>
    <p>遇到问题不要轻易放弃，即使解决不了，解决问题的过程也可能带来意外收获。这次为了解决一个批处理的问题，写了两个 AppleScript 脚本程序，最终问题靠别的方法解决的，但因此看了两本 AppleScript 教程，对 AppleScript 有了更深的了解。</p>
  </li>
  <li>
    <p>就 LaTeX 排版而言，如果一直正常的文档突然出现排版 (Typeset) 错误，而且在你撤销上一步的情况下无法恢复，很有可能是你上一步操作修改了其他相关文件所致，可以尝试删掉除去 TeX 文件之外的所有文件重试，必要时可以用源代码新建文档重试。</p>
  </li>
  <li>
    <p>用其他文字处理软件排版的中文文档，如果你想用 LaTeX 重新排版需要注意（可以当做检查列表）：</p>

    <blockquote>
      <ol>
        <li>
          <p>之前指定的文字样式全部消失（加粗、斜体、下划线），需要用 LaTeX 命令重写。重点要注意一些图书或者文章的名称，英文中没有书名号，需要用斜体来标出图书或文章的名称。</p>
        </li>
        <li>
          <p>英文的引号需要重新检查。在 LaTeX 中，用两个`（重音符号）产生左侧双引号，用两个’（直立引 号）产生右侧双引号，不能直接用键盘上的双引号代替，否则前后都会变成难看的直立引号。</p>
        </li>
        <li>
          <p>特殊字符，比如法语中的 é，LaTeX 有专门的输入方法。不过在 XeLaTeX 排版系统中，似乎直接输入 é 有时也可以正常显示，但为了保险起见还是老老实实输入 LaTeX 代码吧，事实上我就碰到过直接输入报错的情况。不过可以考虑安装相应的宏包，比如 <strong>Package:</strong> inputenc。</p>
        </li>
        <li>
          <p>撇号。无论是英文中表示缩写和所有格的 apostrophe 还是数学中的 prime 都有可能产生风格不统一的情况，需要仔细检查。</p>
        </li>
      </ol>
    </blockquote>
  </li>
  <li>
    <p>如果出现宏包冲突的情况，可以尝试其他类似功能的宏包。毕竟 LaTeX 算是个开源项目，贡献的人不少，很多宏包都能提供相同或类似的功能。比如，我在使用 <strong>Package:</strong> titletoc 的时候与 <strong>Package:</strong> hyperref 冲突了，后来我改用 <strong>Package:</strong> tocloft 解决了问题。</p>
  </li>
  <li>
    <p>用 LaTeX 排版中文文档比英文文档痛苦多了。如果你在国内读大学，学术论文主要用中文来写作，还是用 Word 或者 Pages 去排版好了。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>
  </li>
  <li>
    <p>在排版过程中犯了个错误。我把 chapter 命令的 name 改成了 Exercise，因为我排的文档由 76 个练习组成；然后我让目录显示 chapter 的 caption，这样在目录中就可以看到 Exercise 1 一直到 Exercise 76。但由于没有给章节录入标题，导致在文档结构图上，练习 1 到练习 76 都是一片空白。事实上，点击空白处也可以跳到相关章节，但用着很不爽。针对这个问题，不知道各位读者有没有比较简便的解决办法。</p>
  </li>
  <li>
    <p>Nespresso 胶囊还是原厂出的最好喝。其中个人最喜欢（排名不分先后，我没有收雀巢赞助费）：Dharkan, Roma, Fortissio Lungo, Ristretto, Decaffeinato Intenso.</p>
  </li>
</ol>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>WYSIWYM: What you see is what you mean.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>毕竟国内经常让提交 Word 版。我碰到过某些老师电脑里甚至没有 PDF 阅读器。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[比特币是庞氏骗局吗？]]></title>
    <link href="http://shengmingzhiqing.com/blog/Is-Bicoin-a-Ponzi-scheme.html/"/>
    <updated>2013-07-08T00:00:00+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/Is-Bicoin-a-Ponzi-scheme</id>
    <content type="html"><![CDATA[<p>不是。</p>

<p>自比特币大涨以来，身边不断有人和我说，在他看来，比特币就是一种庞氏骗局。这时，我会深情地望着他的眼睛，装作专注地听他把话说完，然后轻轻地问他一个问题：</p>

<blockquote>
  <p>告诉我，庞氏骗局的定义什么？</p>
</blockquote>

<p>几乎所有的人都答不上来。很多人都有一种能力，能把自己不懂的事情讲得头头是道，完全不知道是什么的概念拿起来就用。这时如果你双手托着下巴，然后自下而上地仰望，他可能还真以为自己是这方面的专家了呢。
<!--more--></p>

<p>我无意讽刺我的朋友们，他们有这种印象无非也是大众媒体惹的祸。当我问他们为什么会把比特币和庞氏骗局扯到一起时，他们说很多媒体都是这么报道。但我想说，如果你在不明白庞氏骗局是什么的时候，有人告诉你某个东西是庞氏骗局，然后你就相信了；那么当有人告诉你一个相反的结论时，你也应该义无返顾地相信。对于这类人来说，这篇文章只放最前面两个字就够了。</p>

<p>现在觉得有什么地方不对了吧？可是如果我这篇文章开头不是斩钉截铁的说「不是」两个字，而是用一种暧昧的模糊的朦胧的调调向你讲述一个故事，并且也不告诉你「庞氏骗局」的定义，最后得出一个「不是」的结论，我相信就会有很多人支持我的结论，而且会有相当一部分人是之前觉得比特币是庞氏骗局的人。</p>

<p>这种情况在生活中并不罕见。不少人可能还记得，2007 年北京电视台报道「纸箱馅包子」的新闻，报道当时很多人相信了。可是不多久之后，同样一家电视台出来澄清，说这是假新闻，结果大家又相信了。我们是一个习惯于标准答案的民族，从小我们就在背诵考题答案，如果我们能一字不差的把它抄写在卷子上，考试就可以拿满分，而在中小学阶段，我们的大部分「成就」似乎就是靠考试分数体现的。因此我们不习惯质疑，相信有很多人也和我一样，由于在中小学质疑老师而付出过惨重的代价。于是当有一个貌似权威的机构貌似权威的人向你陈述一个他所谓的事实，或者表达一个她自己的观点时，我们的第一反应是不假思索的接受，甚至接受了截然相反的东西而浑然不自知：从来就没有救世主（《国际歌》）vs.他是人民大救星（《东方红》）；摸着石头过河 vs.始终代表最广大人民的根本利益；任何事情都有两面性 vs.伟大光荣正确……</p>

<p>我们也是个不习惯「超纲知识」的民族，很长一段时间我们判断要不要学习某些知识的标准就是「考不考」。所以当互联网上绝大多数指控比特币为「庞氏骗局」的文章连「庞氏骗局」的定义都没给的时候，很少有人会 google 一下「庞氏骗局」的定义：</p>

<blockquote>
  <p>庞氏骗局是指用新进入投资者的资金，为早期投资者支付收益。庞氏骗局的发起者通常都向新投资者承诺高收益、低风险。在很多庞氏骗局中，骗子努力地诱导新投资者进入，以便向早期的投资人支付收益，并用于自身的消费，而这些钱很少进行真实的投资。</p>

  <p>——美国证监会（转引自欧洲央行的 Virtual Currency Schemes，参考维基百科「比特币」词条中的汉语翻译。）</p>
</blockquote>

<p>相信用不了两分钟你就能看完这个定义，不用我说你也能看出比特币与庞氏骗局的不同：</p>

<p>首先，比特币从设计之初就是去中心化的，这种去中心化的理念是被写死在算法中的。比特币的设计者中本聪在整个网络中的地位与其他任何参与者并无不同，没有任何一个个人或者机构掌握着用户的资金然后消失不见。</p>

<p>第二，投资人群体不断扩大是庞氏骗局发起人获利的重要渠道。而没有谁可以仅从比特币使用人群的扩大这一现象中直接获利。</p>

<p>第三，无论是比特币设计者还是比特币领域的资深人士，从来没有向谁保证过「低风险，高收益」，反倒是经常劝一些人不要盲目跟风，高收益总是伴随着高风险。</p>

<p>可能有人会说，前一段时间比特币价格长到 200 多美元，现在跌到 70 美元左右，应该有很强的泡沫，这不也是庞氏骗局的一个特点吗？没错，这的确是庞氏骗局的一个特点，但这也是所有金融产品甚至所有投资品的特点。股市没有泡沫吗？外汇市场没有泡沫吗？期货市场没有泡沫吗？打包的次级债金融产品没有泡沫吗？……何况，金融产品是否有泡沫并不是仅仅能从价格波动看出来的。</p>

<p>最后，我还想说，目前全球最大的比特币交易市场 Mt.Gox 已于 6 月 28 日获得 FinCEN（美国财政部金融犯罪执法网络处）颁发的货币服务事务（MSB）许可，这一事实至少说明比特币的「货币」属性已经得到了美国的官方认可，我觉得他们不至于不知道什么是庞氏骗局。当然，比特币作为一种货币，就可以用来融资，需要警惕的是未来有人在比特币领域进行「庞氏骗局」式的集资，而在交易市场买卖比特币这种货币资产则与「庞氏骗局」八竿子打不着。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么比特币经济圈不是传销组织？]]></title>
    <link href="http://shengmingzhiqing.com/blog/why-bitcoin-is-not-a-pyramid-scheme.html/"/>
    <updated>2013-07-03T00:00:00+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/why-bitcoin-is-not-a-pyramid-scheme</id>
    <content type="html"><![CDATA[<p>在接到这个题目的约稿之前，打死我也想不到会有人把「比特币」和「传销」扯在一起。把比特币经济圈说成是传销组织，是目前我见过的对比特币最无厘头的指控。但真要回答这个问题，却也不是一件容易的事情，这恰恰是因为比特币和传销相差太大。牛和羊不一样，这应该算是大家的共识。但如果有人觉得这俩是一种生物，并要你证明他们不一样，要证明牛不是一种特殊的羊，羊也不是刷了白漆的牛，就不是给他看看照片就能完事的。毕竟，牛和样在外型上有很多相似的地方，仅从外形要「证明」这件事情似乎真的有难度。而你如果把牛和羊的 DNA 比对结果拿出来给他看，他又会说太艰深了，看不懂。你说这是科学实验证据，他又会说，人家什么都不懂，如果你们这帮科学家联手骗我怎么办？
<!--more--></p>

<p>前面这一段话是一剂预防针，因为在「传销」没有变成大范围的指控之前，回应这样的指控，多有「此地无银三百两」的感觉。好比我在网上看过不少钓鱼网站，一旦和他们接头，他们做得最多的一件事情就是证明自己的是合法的。如果一个把类比作为唯一学习手段的人，看到这样一篇文章，心中的逻辑永远是：又没说你，怎么就跑出来自证清白？可见真的有问题。这样一来，我就好比一个被关进精神病院的正常人，越是嚷嚷「我不是疯子」，就越像是真的得了精神病。</p>

<p>闲言说了不少，马上进入正题。在讲比特币经济圈也传销组织的区别之前，必须先界定一下本文中「传销」的定义。在中国，「传销」这个词的定义极其模糊，主要是因为这个词本身是外来词，翻译自英文的 “Direct Selling”。这种销售方式本身没有问题，简单来讲，就是厂家雇佣你直接销售产品，根据你的销售业绩给你奖励。由于这种销售方式不需要承担额外的店面费用，如果业绩好，通常也能获得比店面销售更多的回报，欧美有很多家公司都依赖于这种方式销售产品，比如著名的雅芳，玫琳凯等。”Direct Selling” 这种销售方式本身是一种很好的省去中间环节的销售手段，也不存在违法的问题，在港台地区就被翻译成「传销」。在内地，「传销」本身也是这个意思，但是却因为很多人假这种销售方式之名进行诈骗，这个词的含义也随之变质。事实上，前文说的 “Direct Selling” 这种销售方式在大陆也是合法的，但为了让大家与传销诈骗行为区别开来，官方译为「直销」。尽管无论是合法的直销还是非法传销都与比特币扯不上关系，但今天我们重点谈的是比特币与非法传销之间的区别，从现在开始，文中所涉及的「传销」均指非法传销，港台那种合法的「传销」行为在后文全部用「直销」代替。</p>

<p>传销有很多种类型，但万变不离其宗，其核心架构是一个金字塔型的结构。传销组织的头目假借「厂家直销」「连锁经营」等名义拉一些人入伙，通常还以高额返利高额回报为诱饵，以收取会员会费（或其他种种费用）的名义骗取钱财并让会员发展下线，整个组织靠不断发展的下线交来的钱运转，最终致富的人是金字塔顶端的传销头目，位于金字塔中下端的人轻则赔掉入场费，重则倾家荡产血本无归。</p>

<p>而比特币从根上就与传销完全不同，甚至可以说完全相反。比特币非但没有一个金字塔结构，甚至不存在一个中心节点。比特币的设计者设计这种新的虚拟货币的初衷就是要构建一种去中心化的货币，这个原理是被写死在算法里的，要想改变这一点除非你掌握比特币全网一半以上的算力，而这在事实上是不可能的。也就是说参与比特币交易的人，地位都是对等的，不存在谁是老大，谁是谁的上线，谁是谁的下线的问题。今天我把比特币卖给你，不意味着我就是你的上线；明天我用比特币买了你一块蛋糕，我也成不了你的下线。总之，这是一个风险共担的市场。</p>

<p>可能有人会说，最早进入这个市场的人可以轻松的获得大量的比特币，他们把比特币价格炒作起来，然后卖掉，就可以获得大量收益，看着好像就是传销组织头目。面对这样的疑问，我必须承认，两种完全不同的东西经常也是可以找到相同的特点的——牛和羊都有两只眼睛四条腿，甚至不需要太多想象力都可以想到「一只青蛙一张嘴」了。最早进入这个市场的人确实可以轻松获得大量的货币，但并不是靠诈骗，目前为止比特币的所有核心细节比如发行方式、交易确认方式、避免双重支付的方式都是公开的，而且这一切是被锁死在算法当中的，随着比特币网络的扩大，在事实上，没有任何一个人可以拥有能够改变这些算法的计算能力。最早进入这个市场的人获得货币靠的是先行者的优势，比如旧金山淘金热的时候，先挖矿的人肯定可以获得更多的黄金。</p>

<p>先行者能够获得更多收益不是传销的特点，是所有市场的规律。更进一步的说，如果最先进入这个市场的人没有超额利润的话，他是不会选择进入这个市场的。举个简单的例子，马化腾利用首先进入了国内的即时通讯领域，利用 QQ 赚取了大量的利润，现在他的股票市值对一些人来说算是天文数字，我们显然不能说他是传销组织头目。马化腾抛售手里一部分股票，你去接手了，你也不会变成他的下线。从另一方面，先行者获益高也是有道理的。首先，他能够识别出这个市场，说明他掌握了你所不掌握的信息，利用信息不对称挣钱是这个社会主流的挣钱方式。想想为什么你会去报培训班，为什么有人愿意买你们公司的产品，而不是自己造？其次，先行者承受着更大的风险，看看 QQ 同期倒掉多少家即使通讯软件公司，你也就明白了。比特币的先行者利用自己的电脑算力和电力维持着早期脆弱的网络，如果比特币没有像今天这般受到大家认可，这些算力和电力就白白浪费了。</p>

<p>我知道我面临的下一个问题是：QQ 解决了远距离即时交流的问题，我几乎天天都在用，比特币有什么价值？的确，看起来比特币就是一组二进制数字，似乎没什么价值，但有人愿意接受它卖给你东西，就是它最大的使用价值。事实上，任何货币如果没有人愿意接受它的话，马上也会变得一文不值，任何货币价值的维系靠得都是人们的认可。比特币市场更像是一个汇市或者是黄金市场，你用钱去买美元或黄金，其原因无非也是美元和黄金有支付能力。那么如果有一天大家不认可比特币了，它不就失去支付能力了吗？如果你的假设成立，那么确实是，而且对于任何货币都存在这个问题。但是比特币相比于其他货币有自己的优势：1）发行不依赖于中央银行，并且总量一定，极大程度避免了通货膨胀的风险；2）目前的加密算法保证了不存在伪钞的风险；3）便于携带，易于分割……基于以上这些特点，一旦获得相当多数人的认可，很难有任何冲击让大家对此货币失去信心。可是如果未来某一天它的加密算法被攻破了，是不是就有问题了？不否认有可能有这么一天，但比特币的加密算法安全级别要高过目前网上最为流行的 RSA 加密算法——在电商领域尤其流行，如果比特币的加密机制被攻破，那么你首先要担心的是你的网上银行账户和你留在各大网购网站上的信用卡信息。</p>

<p>说到这里，你能感觉到把比特币比作传销，把比特币经济圈比作传销窝点完全是一种仅凭表象的不恰当类比了吧？最后我想说的是，在对一件事物深入了解之前，最好不要用类比这种论证方式，甚至一些逻辑学家认为，类比不能算是论证，只能算是一种修辞手法。仅凭几个特点就认为牛是一种特殊的羊的话，最终你会觉得所有的动物都是狸猫变的（典故来自东野圭吾《超级狸猫理论》）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写给大家看的公钥加密算法原理]]></title>
    <link href="http://shengmingzhiqing.com/blog/public-key-cryptography-for-dummies.html/"/>
    <updated>2013-07-02T00:00:00+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/public-key-cryptography-for-dummies</id>
    <content type="html"><![CDATA[<p>相信很多朋友和我一样，都有传递情书的经历。在我中小学那个还没有陌陌的时代，写纸条应该算是与女同学建立感情的最佳手段——至少是之一。</p>

<p>既然是传递纸条就难免会假他人之手，尤其是在上课这种不方便走动，班主任又有意把长得有夫妻相的男女生分在不同角落的情况下。是以这种原始的通讯手段虽然能使大名鼎鼎而或臭名昭著的「棱镜」计划丧失用武之地，但却躲不过最原始的监控手段——直接打开看。中国人好奇心最大的地方莫过于别人的私生活，可以想象纸条上不可能有什么秘密存在，肉麻的情话最终往往会成为大家的笑柄。如何才能有效传递情书，但又不让情书的信息在传递过程中泄露出去就成了困扰我很长时间的问题。
<!--more--></p>

<p>我想到的第一种方法是，用密码的形式写情书。每五位数字代表一个字，前三位数字代表该字在新华字典的页码，后两位数字代表该字在这一页的第几个。新华字典是当时学生必备，只要事先约定好，我们就可以用这种方式沟通。但这一听就是一种找抽的方式。我的第一封密文情书大约一百个字，写了一节课还没写完。更糟糕的是，小姑娘收到情书之后，又花了两节课时间破译，等破译完之后，你的情书内容已经不重要了：一个精疲力尽的人往往会丧失各种欲望。好在她觉得这种加密方式很好玩，并没有觉得心烦，但我却再也不敢尝试第二次了：女人心烦往往连理由都不需要，我就别硬塞一些理由给她了。</p>

<p>第一种方法宣告不可行之后，我想到了一种更原始的方式。我找个可以锁上的小木盒，把情书放在木盒子里传递。这个方式可以称之为找抽方式之二。完美的解决的加密的问题，同时也通过一个在课堂上传递的盒子告诉了老师，你们俩之间有亲密关系。老师是一种比猫还多疑的动物，又不像猫一样温顺，踢一脚就乖乖卧在角落里思考人生——正相反，挨踢的往往是你。</p>

<p>不过这种新型找抽方式让我想到一种类似的解决方案。当时市面上刚好出现一种带密码锁的笔记本，我们只要预先沟通好密码，完全可以在这个笔记本上传递消息，同时这个笔记本还能成为我们俩爱情的见证。可惜年幼无知的我上当受骗了，买回来没多久我就发现这个密码锁只能算是一个装饰。它的加密装置是上下两组 a 到 z 字母，所谓密码就是特定两个位置的组合，也就是说最多试二十六次就可以把密码试出来。顺便提一句，这种把密码所有可能性挨个试过去的破解密码方式叫做暴力破解法。这种方式是最笨最原始的破解密码方式，但理论上可以破解任何密码。就这个只有二十六组可能性的密码而言，用纯手工的方式，暴力破解连一分钟都用不了。想想我初中那个爱在学生不在的时候搜查学生抽屉的班主任是精通概率论的数学老师，我就吓出一身冷汗。</p>

<p>刚被骗的人往往会比较聪明，所以我一下子想到这其实并不是加密方式的问题，而是选错了密码锁的问题。于是我拿出当时仅有的一点积蓄，买了一个四位数字加密的密码锁，替换了原来的锁。如前面所说，暴力破解当然是有可能的，但帮忙传递情书的人不太可能在短短几分钟内把密码试出来，毕竟你帮别人传递东西，不好意思把这东西拿在手上试一两个小时。若破译密码的时间超过某一个我们认可的有效时间，我们就说这种密码是「实际上」无解的。从这个意义上讲，「爱你爱到死」和「爱你一万年」可以认为是一个意思，尽管事实上人的寿命和一万年是两个不同的时间段。举个其他例子，战场上用密码加密了明天的作战计划，但要破译这份密码需要三天时间，这时这个密码就可以认为是实际上无解的。因为三天后这个作战计划早已经不是秘密了。我们加密一个东西，一般来说，只需要这个密码实际上无解即可。</p>

<p>就这样我用一种相对较简单的方式加密了我们的传递情书过程，同时也在事实上避免了暴力破解密码的可能性。但有时候破解密码根本不需要暴力。当时几乎所有的密码锁都有一个特性，无论开还是锁，都需要先把密码对到正确的位置上。这样我的同桌只要一不小心扫一眼我锁笔记本时候的密码状态，然后再一不小心给其他同学一讲，密码立刻又形同虚设。这时，我不免会想，有没有一种新的方式能够解决掉这个问题？</p>

<p>一个理论上的解决方案是，我上锁的时候用一组密码（密码 A），对方开锁的时候用另一组密码（密码 B）。密码 A 只负责上锁，密码 B 只负责开锁。这样的话，即使密码 A 被所有人都知道了，也只能望洋兴叹。尽管我当时没有找到这样的密码锁卖，但是这样的加密解密方法在生活中已经无处不在了。如果你留意的话，你会发现这种新的加密解密方法与前面提到的所有的方法都有一个显著的不同：前面提到的所有方法， 你一旦了解了加密规则，也就知道了解密规则， 加密解密都需要一个共同的密码，这样的加密方式我们称之为「对称加密算法」；而最后提到的这种方法，加密和解密要使用两套不同的规则，即使加密规则（密码 A）被所有人知道了，如果不知道解密规则（密码 B），也对破译密码无可奈何，这种方式我们称之为「非对称加密算法」。我们假设甲乙两人之间利用这种「非对称加密算法」传递信息，这种算法的原理可以表述为：</p>

<blockquote>
  <p>甲有两把密钥（可以想象为例子中的密码），我们称之为公钥（密码 A）和私钥（密码 B）。公钥是公开传递的，所有人都可以或者至少有机会获得；而私钥是保密的，只有甲一个人知道。</p>

  <p>乙从甲处得到公钥，并利用公钥对所传递信息加密。</p>

  <p>甲得到乙加密的信息后，利用私钥解密以获取原始信息。</p>
</blockquote>

<p>由于加密使用的是公钥，所以「非对称加密算法」又称「公钥加密算法」。这种算法可以说是远距离传输私密信息的基石，在互联网（尤其是电子商务）上得到了广泛的应用，几乎任何需要传递保密信息的领域都少不它的身影。可以说只要你上过网，几乎就一定接触过这种算法。目前最流行的公钥加密算法是「RSA 加密演算法」，大名鼎鼎的 google 数字证书以及 Gmail 等服务用的就是这种加密演算法。而比特币的加密机制基于「椭圆曲线加密算法」，相比 RSA，同等大小的密钥可以提供更高的安全级别。也就是说，如果你信任 google 的加密系统，那么对于比特币的加密机制也大可放心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day One]]></title>
    <link href="http://shengmingzhiqing.com/blog/Day-One.html/"/>
    <updated>2012-12-15T20:03:00+01:00</updated>
    <id>http://shengmingzhiqing.com/blog/Day-One</id>
    <content type="html"><![CDATA[<p>小学二年级的时候，老师开始强迫我们写日记。就我个人而言，懂事之前被强迫做的事情，绝大多数后来都放弃了。即使重新拣起来，也基本上要等到懂事之后过很长时间，并且认真考虑过这件事情的价值之后，比如<a href="http://haohailong.net/archives/294">记笔记</a>。</p>

<p>写日记的习惯却断断续续的坚持下来了，我想这主要是因为我的父亲也有写日记的习惯，教育小孩，永远是「言传不如身教」。但这篇文章我想说的正是这断断续续中断的部分。
<!--more--></p>

<p>说来有点好笑，我停止写日记往往不是因为不想去写日记的内容，更多地是因为日记的形式。每篇日记开头我们都需要写日期、天气甚至地点。而正是这些东西让我不胜其烦。我享受写作的过程，但却讨厌做这种重复工作。最初的几次放弃，都是因为当我想随手写点东西的时候，不得不先克制一下冲动，写一下年月日星期几。基本上当你写完「七月七日晴」的时候就没什么心情写「突然下起了大雪」了。当然，当年没有认真思考过这个问题，只是觉得不爽就放弃了。</p>

<p>初中有一年，我拿到一本台历，每天下面的空白大约可以写一百多字。于是我就开始试着在台历上写日记，这是我第一次足足写满一年日记。但是我没有第二年的台历，于是我又改用普通的本子去写日记，心想，一年都坚持下来了，这差不多算是个习惯了，肯定能坚持下去的，没想到大约一个礼拜之后，我就放弃了。</p>

<p>这次放弃之后，我又无数次的开始，无数次的放弃，不过一直也没搞清楚为什么我那一年能坚持下来，以后却再也坚持不下来了。直到我上大学的时候，一个偶尔的机会，我得到了一本效率手册，突然觉得这东西写日记不错，这个东西造就了我第二次长达一年的坚持。这本效率手册比日历还好的一点是，不仅有日期，连基本的天气符号都有，你只需要随手一勾就可以。从那以后，我基本上每年都买一本效率手册做日记本，虽然期间还是放弃了几次，但没有以往频繁，持续的时间也很短。而且不记日记最多的原因是忘了带日记本。</p>

<p>今年早些时候，我在 Mac App Store 里面发现了一款好评如潮的日记应用——Day One，这款应用最终解决了先前导致我不愿意记日记的所有问题。你只管写日记的内容，剩下的事情都由软件自动来完成。日期自不用说，它还会自动定位插入地点，根据地点插入当天气象情况。自从开始用这款应用以来，我的日记再也没有中断过。当然现在还没到一年，但我觉得基本上这辈子我都可以坚持写下去了。因为这软件不仅有 Mac 版，还有 iPad，iPhone 版，只要你不忘带手机，你就可以写日记。</p>

<p>同时，因为这个日记软件的出现，我想到了更多的可能性。我觉得未来的日记软件应该可以直接同步你豆瓣上看过什么电影，听过什么歌的记录，同步你在 Foursquare 上的签到状态。这样你每一天的生活都可以记录成一个故事，想想都令人兴奋。</p>

<p>我喜欢苹果，正是因为有着无数这样可以改善你生活的应用。Mac, iPad, iPhone 都不是智能机器人，但是帮你做到你小时候觉得智能机器人才能做到的很多事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summary on Chapter 1 of Microeconomic Theory]]></title>
    <link href="http://shengmingzhiqing.com/blog/Summary-on-Chapter-1-of-Microeconomic-Theory.html/"/>
    <updated>2012-10-21T14:03:00+02:00</updated>
    <id>http://shengmingzhiqing.com/blog/Summary-on-Chapter-1-of-Microeconomic-Theory</id>
    <content type="html"><![CDATA[<p><img src="http://s.olo.la/u3Ww.png" alt="C1 of Microeconomic Theory (Knowledge Structure)" /></p>

<p>刚刚考完微观经济学导论（Introduction to Economics），不如趁热打铁对知识做个梳理。我们用的是经典的微观经济学教材马斯科勒的《微观经济理论》，这是我做的第一章的知识结构图。另，OmniGraffle 太好用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么「Enter 键」要被翻译为「回车键」？]]></title>
    <link href="http://shengmingzhiqing.com/blog/why-enter-key-is-huiche-in-chinese.html/"/>
    <updated>2012-02-19T15:19:00+01:00</updated>
    <id>http://shengmingzhiqing.com/blog/why-enter-key-is-huiche-in-chinese</id>
    <content type="html"><![CDATA[<p><img src="http://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1168/pc-enter.png" /></p>

<p>自己刚开始使用电脑的时候，英文基础薄弱，只知道在键盘上有一个 “↵+Enter” 的一个键被称为「回车键」，这个键的作用是在写作的时候换行，在做其他事情的时候当做「输入」或者「确认」。至于 “enter” 这个单词与汉语「回车」有什么关系，一直也没有认真思考过。
<!--more--></p>

<p>一些电脑初学者也曾问我为什么 “enter” 被翻译成「回车」，由于觉得这个问题并不是很重要，我总是含糊其辞的说这是个计算机术语，或者告诉他「也许和换行回到一行的开头有关系」。虽说后来我知道这个猜测八九不离十，但事实上我一直对自己这个推测没有太大信心。</p>

<p>直到去年买了一台苹果电脑 (MacBook Pro)，才发现在我们熟悉的回车键上印着另一个英文名称 “Return” 。一个更加明显的答案出现了，其实「回车」并不是 “Enter” 的翻译，而是 “return” 的翻译。这个 return 其实指的是 “↵+Enter” 中箭头的意思，换言之，Enter 并不是“↵”的一个解释，严格讲 “enter” 和“↵”是这个键的两种不同的名称，也即两个不同的用途。</p>

<p>那为什么这个键要被翻译为「回车」，而不是 enter 的意思「输入」或者「进入」呢？毕竟我们在日常使用的时候，这个键 Enter 的作用使用的更广泛一些，而 Return 的作用貌似只有在打字的时候能用到。</p>

<p>其实这就是和打字有关。现代电脑键盘是从过去的打字机上继承过来的。在过去的机械打字机上有个部件叫「字车」，每打一个字符，字车前进一格，打完一行后，我们需要让字车回到起始位置，而 “Return” 键最早就是这个作用，因此被翻译为「回车」。尽管后来回车键的作用已经不止倒回字车那么简单，但这个译名一直被保留下来。</p>

<p>不过有句话我还是忍不住想说，既然现在回车键在英文中更多的是 Enter 的作用，在英文中也被称作 Enter 键，在汉语中把这个名称也译过来又何妨？对于电脑老手这可能是无所谓的事情，但这样可以减少新手不少困惑。即便这个键的译名不改，我想作为一个负责任的计算机老师，应该告诉学生这个键的由来并简单介绍 一下 Enter 这个英文单词的含义，这样新手至少不会为「为什么经常做完一个事情就要敲一下回车键？」这样的问题而摸不着头脑了。不幸的是，我所见过的所有计算机老师没有一个给我讲过 enter 的含义。</p>

<p><span class="caption-wrapper"><img class="caption" src="http://km.support.apple.com/library/APPLE/APPLECARE_ALLGEOS/HT1220/return.png" width="" height="" title="Enter Key on Mac" /><span class="caption-text">Enter Key on Mac</span></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 的「剪切」快捷键]]></title>
    <link href="http://shengmingzhiqing.com/blog/cut-shortcut-on-mac.html/"/>
    <updated>2012-02-06T14:53:00+01:00</updated>
    <id>http://shengmingzhiqing.com/blog/cut-shortcut-on-mac</id>
    <content type="html"><![CDATA[<p>对于大部分 Windows 用户来说，最熟悉的一组快捷键莫过于 Ctrl+X, Ctrl+C, Ctrl+V 了，分别对应与剪贴板相关的三个功能：剪切、复制和粘贴。在 Mac 下 Ctrl 键的大部分功能被 Command 键取代，所以在 Mac 下 Command+X, Command+C, Command+V 也分别是剪切、拷贝<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>和粘贴。但是 Mac 下的 Command+X 的剪切功能却只对于编辑文本有效，也就是说，如果你想通过 Command+X 是无法把文件剪切到剪贴板的。这也是 Mac 系统经常被 Windows 用户诟病的一点。一直以来，Mac 下要实现直接移动文件，无非以下几个方法：</p>

<ol>
  <li>复制，粘贴，删除源文件。</li>
  <li>购买软件实现这一功能。</li>
  <li>利用 terminal (终端)编写脚本实现。</li>
  <li>利用拖曳来实现。</li>
</ol>

<p>前三个功能多少会增加一点麻烦，第四个功能虽然简单<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，但是对于刚从 windows 转过来的用户多少还是有点不方便，即便对于 Mac 铁杆用户，多一种选择当然也是好事。今天突然发现，其实 Lion 系统已经悄悄包含了文件剪切的快捷键，只是操作方式与 win 略有不同，具体如下：</p>

<p>选定源文件，按 Command+C 快捷键拷贝到剪贴板，转到目标文件夹，按 Command+V 可将源文件复制到目标文件夹，而按 Command+Option+V 即可将源文件移动到目标文件夹，这相当于实现了 windows 下的剪切功能。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>与 Win 下复制功能相同，Mac 下复制对应另一种功能。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Mac 相比 Windows 的优势之一就是拖曳功能非常强大。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我们的生活会需要电子书]]></title>
    <link href="http://shengmingzhiqing.com/blog/Our-life-needs-ebooks.html/"/>
    <updated>2011-11-01T10:24:00+01:00</updated>
    <id>http://shengmingzhiqing.com/blog/Our-life-needs-ebooks</id>
    <content type="html"><![CDATA[<p>高中以前，我一直生活在一个小县城，县城里盛行教育恐怖主义，因此卖得最好的书籍都是教辅参考书，这样的后果就是，书店里除参考书之外也就只剩下四大名著了，当然在一些人眼里四大名著其实也只不过是语文课本参考书目而已。</p>

<p>在贝塔斯曼和卓越这样的购书网站流行起来之前，托亲戚朋友从外地带书回来就成了我的课外书籍主要获取方式。刚上初中时，我让舅舅给我从西安带一些小说回来，但我并不知道买谁的好，他可能也嫌麻烦，就给我带了一张光盘回来，里面有我这辈子都看不完的书。于是我就有了人生第一次电子阅读体验——在家里一台显示器经常色偏、缺色电脑上。阅读体验极差，只能说是我好奇心太强，否则我自己无法解释为何我能在眼睛发肿并且流泪不止的情况下在电脑旁一坐一下午——我想看色情小说也没这么大的动力。在我看完大概十部左右小说以后，我还是崩溃了，全面回归纸质书阅读。
<!--more--></p>

<p>上高中以后，网上购物越来越方便，我和我的朋友老蔺也许是我们县城最早开始网上购物的人。当时贝塔斯曼、易趣未倒，卓越网还没卖给亚马逊收购，淘宝网刚刚兴起，余含泪大师代言的 99 读书人貌似还没有开始营业。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 我们买的最多的自然是书。</p>

<p>由于家处偏远山区，网上购书唯一不便在于下单到收货一般耗时半个月到一个月，如需退换货可能更麻烦。不过高中课业繁忙，看课外书时间本身很少，加上互联网发达，零星也会在网上浏览一些书籍，基本上没有必要再购置一部手持电子书设备。但老蔺偶尔有一次和他父亲提到“电子书”这个概念，当时他提到这个概念，想说的是电子化的书籍，而非手持设备，结果他爸误会了，于是给他购置了一款电子阅读器。我曾借来读过一部据说是软色情的武侠小说，显示屏是点阵液晶屏（不知道是不是这个名称），与早期文曲星这类电子词典的显示屏类似，晚上台灯一照，反光严重，只能把书侧到一个角度，才能勉强看到上面的文字，于是我直到今天仍对高中时期坚持在文曲星上看小说的同学敬佩不已。</p>

<p>这款劣质电子书让我彻底丧失了对手持电子书阅读设备的信心，在未来很长一段时间内我一直在购买纸质书阅读。上大学的四年间，亚马逊推出过两代电子墨水（E-ink）显示的 kindle 阅读器，我都因为高中的经历敬而远之。</p>

<p>去年大学毕业后，我看到网上一些很靠谱的人开始推荐类似 kindle 的阅读器，亚马逊的 kindle 销量也让我觉得这玩意可能并不是我想象的那么不靠谱，同时，网上有了 kindle 现实效果的图片和视频，这让我下决心买一部即将上市的 kindle 3。</p>

<p>我想大部分人没有产生工具依赖症的原因是没有找到称手的工具。kindle 没有让我失望，尽管没有彩色显示，但作为一个阅读文字为主的读者，我想这不是太大的问题（当然我也希望早点出彩色电子墨水）。最最重要的是，kindle 的显示效果基本上和纸没有什么区别，看书的时候眼睛不会像盯电脑屏幕那么累。</p>

<p>到现在我已经在 kindle 上读了近 30 部书，其中有一半左右的内容是我在上下班的路上看的。也许有人看完这句话觉得，kindle 只是在路上看书方便而已，但事实上，在家我也经常用 kindle 来看书。有些书我纸质书和 kindle 版都有，我也会优先考虑看 kindle 版。在我看来 kindle 与纸质书相比，至少有以下四大优势：</p>

<ol>
  <li>
    <p>轻。在地铁上看一路书（1-2 小时），拿在手上没有任何感觉。即使在家里读书，我想也很少有人愿意把书架上当家具买回来的《追忆似水年华》取下来，但有了 kindle，和重量有关的不读书借口将不再是借口。</p>
  </li>
  <li>
    <p>平。纸质书会弯曲，有时候会影响阅读体验。而 kindle 我做过实验，边走路边阅读不成问题，当然我不建议大家模仿。</p>

    <p>前两点总结：喜欢躺在床上看书的人有福了。</p>
  </li>
  <li>
    <p>获取英文原版书极其方便。基本上一本英文书美国一出版，你就可以在 amazon.com 上买到相应的 kindle 版。纸质书配送至少要一天，而电子书下载到你的 kindle 上几乎是即时的。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 更何况有很多英文原版书国内根本买不到纸版。</p>
  </li>
  <li>
    <p>搬家方便。如果你像我一样，租房住，喜欢读书，不需要摆个装满精装书来充门面的书架但由于书太多被迫摆了好几个书架的话，搬家是很头疼的一件事情。但如果能把一辈子要读的书都放到一个可以随身携带的电子设备中的话，就不用那么头疼了。虽然目前 Kindle 无法完全做到这一点，但至少让我们离这一点更近了一步。</p>
  </li>
</ol>

<p>当然现在类似 kindle 这种电子阅读设备还有很多不完善的，甚至不如纸质书的地方，但就上面这四点以及从这四点我们看到的未来发展的可能性（比如彩色电子墨水等等）足以让我们大部分人改变阅读习惯或者至少改变预期的阅读习惯。</p>

<p>前几天去听老罗（ <a href="http://weibo.com/laoluoyonghao">@罗永浩</a> ）保利剧院的演讲，讲到一个创新传播 (diffusion of innovations) 理论，这个创新传播理论让我知道了，对于任何新产品来说，总有一部分人属于滞后者。以电子书为例，总会有那么一部分买电子书的理由是没有纸质书可以买了，这部分群体就可以称为滞后者。但这部分人在人群中占得比例相对较小，大约百分之十几。而就电子书的目前给我们提供的便利以及我们可以预期到的便利来看，我想让其余的大部分人改变阅读习惯并不难。</p>

<p>最终，我们的生活会需要电子书，就像我们的生活需要电话，需要互联网一样。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>至少当时没有听说过，后来因为上面的书比较便宜，光顾过多次，直到有一次个人资料被 99 读书人泄露，我再也没在上面买过书。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>希望有一天汉语的书籍也可以如此方便，这样的话中国的作者和读者都有福了。不过，我想这至少要解决版权和出版自由两个问题。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
